------- FILE racer-main.asm LEVEL 1 PASS 2
      1  cfff					      processor	6502
      2  0801					      org	$0801
      3  0801
      4  0801							;"Net Spy Hunter" scroll test code
      5  0801							;by Leif Bloomquist, Robin Harbron, some IRQ code stolen from Lasse Oorni
      6  0801
------- FILE macros.asm LEVEL 2 PASS 2
      0  0801					      include	"macros.asm"
      1  0801
      2  0801							; ==============================================================
      3  0801							; Additional macros by LB
      4  0801							; ==============================================================
      5  0801
------- FILE equates.asm LEVEL 3 PASS 2
      0  0801					      include	"equates.asm"
      1  0801							;kernal routines
      2  0801		       ff a5	   ACPTR      =	$ffa5
      3  0801		       ff c6	   CHKIN      =	$ffc6
      4  0801		       ff c9	   CHKOUT     =	$ffc9
      5  0801		       ff cf	   CHRIN      =	$ffcf
      6  0801		       ff d2	   CHROUT     =	$ffd2
      7  0801		       ff a8	   CIOUT      =	$ffa8
      8  0801		       ff c3	   CLOSE      =	$ffc3
      9  0801		       ff e4	   GETIN      =	$ffe4
     10  0801		       ff e7	   CLALL      =	$ffe7
     11  0801		       ff cc	   CLRCHN     =	$ffcc
     12  0801		       ff b1	   LISTEN     =	$ffb1
     13  0801		       ff c0	   OPEN       =	$ffc0
     14  0801		       ff 93	   SECOND     =	$ff93
     15  0801		       ff ba	   SETLFS     =	$ffba
     16  0801		       ff bd	   SETNAM     =	$ffbd
     17  0801		       ff b4	   TALK       =	$ffb4
     18  0801		       ff 96	   TKSA       =	$ff96
     19  0801		       ff ae	   UNLSN      =	$ffae
     20  0801		       ff ab	   UNTLK      =	$ffab
     21  0801		       ff e1	   STOP       =	$ffe1
     22  0801		       ff b7	   READST     =	$ffb7
     23  0801		       ff d5	   LOAD       =	$ffd5
     24  0801		       ff d8	   SAVE       =	$ffd8
     25  0801
     26  0801							;zeropage addresses
     27  0801		       00 55	   DHCP_PTR   =	$55	;(2)
     28  0801		       00 57	   RECV_PTR   =	$57	;(2)
     29  0801		       00 59	   XMIT_PTR   =	$59	;(2)
     30  0801		       00 5b	   RECV_LEN   =	$5b	;(2)
     31  0801		       00 5d	   XMIT_LEN   =	$5d	;(2)
     32  0801		       00 5f	   DNS_TMP    =	$5f	;(2)
     33  0801		       00 61	   IPM_TMP    =	$61	;(2)
     34  0801		       00 63	   CPY_SRC    =	$63	;(2)
     35  0801		       00 65	   CPY_DST    =	$65	;(2)
     36  0801		       00 67	   SAV_PTR    =	$67	;(2)
     37  0801
     38  0801							;utils zeropage
     39  0801		       00 67	   INPUT_PTR  =	$67	;(2)
     40  0801		       00 69	   INPUT_Y    =	$69	;(1)
     41  0801
     42  0801							;checksum zeropage
     43  0801		       00 6a	   MakeChecksumZp_Ptr =	$6a	;(2)
     44  0801
     45  0801							;c64 c/g
     46  0801		       00 90	   CG_BLK     =	144
     47  0801		       00 05	   CG_WHT     =	5
     48  0801		       00 1c	   CG_RED     =	28
     49  0801		       00 9f	   CG_CYN     =	159
     50  0801		       00 9c	   CG_PUR     =	156
     51  0801		       00 1e	   CG_GRN     =	30
     52  0801		       00 1f	   CG_BLU     =	31
     53  0801		       00 9e	   CG_YEL     =	158
     54  0801		       00 95	   CG_BRN     =	149
     55  0801		       00 81	   CG_ORG     =	129
     56  0801		       00 96	   CG_PNK     =	150
     57  0801		       00 97	   CG_GR1     =	151
     58  0801		       00 98	   CG_GR2     =	152
     59  0801		       00 99	   CG_LGN     =	153
     60  0801		       00 9a	   CG_LBL     =	154
     61  0801		       00 9b	   CG_GR3     =	155
     62  0801		       00 12	   CG_RVS     =	18	;revs-on
     63  0801		       00 92	   CG_NRM     =	146	;revs-off
     64  0801
     65  0801		       00 08	   CG_DCS     =	8	;disable shift+C=
     66  0801		       00 09	   CG_ECS     =	9	;enable shift+C=
     67  0801
     68  0801		       00 0e	   CG_LCS     =	14	;switch to lowercase
     69  0801		       00 8e	   CG_UCS     =	142	;switch to uppercase
     70  0801
     71  0801		       00 93	   CG_CLR     =	147	;clear screen
     72  0801
     73  0801							;cursor movement
     74  0801		       00 13	   CS_HOM     =	19
     75  0801		       00 91	   CS_U       =	145
     76  0801		       00 11	   CS_D       =	17
     77  0801		       00 9d	   CS_L       =	157
     78  0801		       00 1d	   CS_R       =	29
     79  0801
     80  0801		       00 0d	   CRLF       =	13
     81  0801
     82  0801		       00 00	   YN_NO      =	0
     83  0801		       00 01	   YN_YES     =	1
     84  0801		       00 02	   YN_CANCEL  =	2
------- FILE macros.asm
------- FILE six-macros.asm LEVEL 3 PASS 2
      0  0801					      include	"six-macros.asm"
      1  0801					      MAC	print
      2  0801					      jsr	prns
      3  0801					      dc.b	{0},0
      4  0801					      ENDM
      5  0801
      6  0801					      MAC	iprint
      7  0801					      jsr	iprns
      8  0801					      dc.b	{0},0
      9  0801					      ENDM
     10  0801
     11  0801					      MAC	error
     12  0801					      jsr	prns
     13  0801					      dc.b	13,CG_RED,CG_RVS,{0},CG_NRM,CG_WHT,13,0
     14  0801					      ENDM
     15  0801
     16  0801					      MAC	input
     17  0801					      ldx	#>{0}
     18  0801					      lda	#<{0}
     19  0801					      ldy	{2}
     20  0801					      jsr	INPUT
     21  0801					      ENDM
     22  0801
     23  0801					      MAC	ldxa
     24  0801					      ldx	{0}+1
     25  0801					      lda	{0}
     26  0801					      ENDM
     27  0801
     28  0801					      MAC	ldax
     29  0801					      ldx	#>{0}
     30  0801					      lda	#<{0}
     31  0801					      ENDM
     32  0801
     33  0801					      MAC	stax
     34  0801					      stx	{0}+1
     35  0801					      sta	{0}
     36  0801					      ENDM
     37  0801
     38  0801					      MAC	staa
     39  0801					      sta	{1}
     40  0801					      sta	{1}+1
     41  0801					      ENDM
     42  0801
     43  0801					      MAC	movax
     44  0801					      ldax	{1}
     45  0801					      stax	{2}
     46  0801					      ENDM
     47  0801
     48  0801					      MAC	pushax
     49  0801					      pha
     50  0801					      txa
     51  0801					      pha
     52  0801					      ENDM
     53  0801
     54  0801					      MAC	popax
     55  0801					      pla
     56  0801					      tax
     57  0801					      pla
     58  0801					      ENDM
     59  0801
     60  0801					      MAC	blt
     61  0801					      bcc	{1}
     62  0801					      ENDM
     63  0801
     64  0801					      MAC	bge
     65  0801					      bcs	{1}
     66  0801					      ENDM
     67  0801
------- FILE macros.asm
      8  0801
      9  0801							; ==============================================================
     10  0801							; Macro to position the cursor
     11  0801							; ==============================================================
     12  0801
     13  0801					      MAC	plot
     14  0801					      ldy	#{1}
     15  0801					      ldx	#{2}
     16  0801					      clc
     17  0801					      jsr	$E50A	; PLOT
     18  0801					      ENDM
     19  0801
     20  0801							; ==============================================================
     21  0801							; Macro to print a string
     22  0801							; ==============================================================
     23  0801
     24  0801					      MAC	printstring
     25  0801					      ldy	#>{0}
     26  0801					      lda	#<{0}
     27  0801					      jsr	$ab1e	; STROUT
     28  0801					      ENDM
     29  0801
     30  0801							; ==============================================================
     31  0801							; Macro to print a byte
     32  0801							; ==============================================================
     33  0801
     34  0801					      MAC	printbyte
     35  0801					      ldx	#$00
     36  0801					      ldy	#$0a
     37  0801					      lda	{0}
     38  0801					      jsr	printnum
     39  0801					      ENDM
     40  0801
     41  0801							; ==============================================================
     42  0801							; Macro to print a word (direct)
     43  0801							; ==============================================================
     44  0801
     45  0801					      MAC	printword
     46  0801					      lda	#<{0}
     47  0801					      ldx	#>{0}
     48  0801					      ldy	#$0a
     49  0801					      jsr	printnum
     50  0801					      ENDM
     51  0801
     52  0801							; ==============================================================
     53  0801							; Macro to print an IP address
     54  0801							; ==============================================================
     55  0801					      MAC	print_ip
     56  0801					      ldx	#>({0})
     57  0801					      lda	#<({0})
     58  0801					      jsr	printip
     59  0801					      PRINT	CRLF
     60  0801					      ENDM
     61  0801
     62  0801							; ==============================================================
     63  0801							; Macro for border color changes (raster time measure) - erase for no debug
     64  0801							; ==============================================================
     65  0801
     66  0801					      MAC	border
     67  0801							;lda #{1}
     68  0801							;sta $d020
     69  0801					      ENDM
     70  0801
     71  0801							; ==============================================================
     72  0801							; Macro for 16-bit subtraction - Subtract 2 from 1
     73  0801							; ==============================================================
     74  0801
     75  0801					      MAC	subtract16
     76  0801					      sec
     77  0801					      lda	{1}
     78  0801					      sbc	{2}
     79  0801					      sta	{1}
     80  0801					      lda	{1}+1
     81  0801					      sbc	{2}+1
     82  0801					      sta	{1}+1
     83  0801					      ENDM
     84  0801
     85  0801							; ==============================================================
     86  0801							; Macro for 16-bit addition - Add 2 to 1
     87  0801							; ==============================================================
     88  0801
     89  0801					      MAC	add16
     90  0801					      clc
     91  0801					      lda	{1}
     92  0801					      adc	{2}
     93  0801					      sta	{1}
     94  0801					      lda	{1}+1
     95  0801					      adc	{2}+1
     96  0801					      sta	{1}+1
     97  0801					      ENDM
     98  0801
     99  0801							; ==============================================================
    100  0801							; Macro for 16-bit negation
    101  0801							; ==============================================================
    102  0801
    103  0801					      MAC	negate16
    104  0801					      sec
    105  0801					      lda	#$00
    106  0801					      sbc	{1}
    107  0801					      sta	{1}
    108  0801					      lda	#$00
    109  0801					      sbc	{1}+1
    110  0801					      sta	{1}+1
    111  0801					      ENDM
------- FILE racer-main.asm
      8  0801
      9  0801				   BASIC		;6 sys 2064
     10  0801		       0c 08 06 00*	      dc.b	$0c,$08,$06,$00,$9e,$20,$32,$30
     11  0809		       36 34 00 00*	      dc.b	$36,$34,$00,$00,$00,$00,$00
     12  0810
     13  0810				   START      SUBROUTINE
     14  0810		       a9 00		      lda	#$00
     15  0812		       8d 20 d0 	      sta	$d020
     16  0815		       8d 21 d0 	      sta	$d021
     17  0818		       8d a8 2b 	      sta	GAMEACTIVE
     18  081b		       8d ad 0c 	      sta	LANMODE
     19  081e		       20 80 5b 	      jsr	INITMUSIC
     20  0821		       4c 00 0c 	      jmp	GO
     21  0824
     22  0824							; A few wasted bytes here
     23  0824
     24  0824							; Sprites!
     25  08c0					      org	$08c0	;Sprite offsets $23 to $25
     26  08c0					      incbin	"sprites/racecar_black.spr"
     27  0980
     28  0980							;Sprite offset $26 to $2F
     29  0980					      incbin	"sprites/duel-explosions.spr"
     30  0bc0
     31  0bc0							;Sprite offset $30 - blank
     32  0bc0		       00 00 00 00*	      ds.b	64,0
     33  0c00
     34  0c00				   GO
     35  0c00							;Charset
     36  0c00		       a9 18		      lda	#$18
     37  0c02		       8d 18 d0 	      sta	$d018
     38  0c05
     39  0c05		       20 9a 29 	      jsr	TITLESCREEN
     40  0c08
     41  0c08
     42  0c08				   WAITFORBUTTON
     43  0c08		       ad 00 dc 	      lda	$dc00
     44  0c0b		       c9 6f		      cmp	#$6f
     45  0c0d		       d0 03		      bne	CHECKKEYS
     46  0c0f
     47  0c0f		       4c 0c 0d 	      jmp	STARTGAME
     48  0c12
     49  0c12				   CHECKKEYS
     50  0c12		       20 e4 ff 	      jsr	$ffe4
     51  0c15
     52  0c15		       c9 4e		      cmp	#$4E	; N
     53  0c17		       d0 03		      bne	kg
     54  0c19		       4c 31 0c 	      jmp	GETNEWIP
     55  0c1c
     56  0c1c				   kg
     57  0c1c		       c9 47		      cmp	#$47	; G
     58  0c1e		       d0 03		      bne	kl
     59  0c20		       4c 6e 0c 	      jmp	GETNEWGW
     60  0c23
     61  0c23				   kl
     62  0c23		       c9 4c		      cmp	#$4C	; L
     63  0c25		       d0 03		      bne	ks
     64  0c27		       4c ae 0c 	      jmp	SETLANMODE
     65  0c2a
     66  0c2a				   ks
     67  0c2a		       c9 53		      cmp	#$53	; S
     68  0c2c		       d0 da		      bne	WAITFORBUTTON
     69  0c2e		       4c ce 0c 	      jmp	GETNEWSERVER
     70  0c31
     71  0c31
     72  0c31							; Ask for opponent's IP address and redisplay.
     73  0c31				   GETNEWIP
      0  0c31					      PRINT	CG_CLR,CG_BLU,"NEW IP ADDRESS? ",CG_YEL
      1  0c31		       20 60 63 	      jsr	prns
      2  0c34		       93 1f 4e 45*	      dc.b	CG_CLR,CG_BLU,"NEW IP ADDRESS? ",CG_YEL,0
     75  0c48		       20 64 2c 	      jsr	getip
     76  0c4b		       ad 7d 2c 	      lda	IP_OK
     77  0c4e		       f0 e1		      beq	GETNEWIP	;Zero if IP was invalid
     78  0c50
     79  0c50		       ad 79 2c 	      lda	gotip
     80  0c53		       8d 39 5e 	      sta	CARD_IP
     81  0c56		       ad 7a 2c 	      lda	gotip+1
     82  0c59		       8d 3a 5e 	      sta	CARD_IP+1
     83  0c5c		       ad 7b 2c 	      lda	gotip+2
     84  0c5f		       8d 3b 5e 	      sta	CARD_IP+2
     85  0c62		       8d 43 5e 	      sta	CARD_GATE+2
     86  0c65		       ad 7c 2c 	      lda	gotip+3
     87  0c68		       8d 3c 5e 	      sta	CARD_IP+3
     88  0c6b		       4c 00 0c 	      jmp	GO
     89  0c6e
     90  0c6e							; Ask for gateway IP address and redisplay.
     91  0c6e				   GETNEWGW
      0  0c6e					      PRINT	CG_CLR,CG_BLU,"NEW GATEWAY ADDRESS? ",CG_YEL
      1  0c6e		       20 60 63 	      jsr	prns
      2  0c71		       93 1f 4e 45*	      dc.b	CG_CLR,CG_BLU,"NEW GATEWAY ADDRESS? ",CG_YEL,0
     93  0c8a		       20 64 2c 	      jsr	getip
     94  0c8d		       ad 7d 2c 	      lda	IP_OK
     95  0c90		       f0 dc		      beq	GETNEWGW	;Zero if IP was invalid
     96  0c92
     97  0c92		       ad 79 2c 	      lda	gotip
     98  0c95		       8d 41 5e 	      sta	CARD_GATE
     99  0c98		       ad 7a 2c 	      lda	gotip+1
    100  0c9b		       8d 42 5e 	      sta	CARD_GATE+1
    101  0c9e		       ad 7b 2c 	      lda	gotip+2
    102  0ca1		       8d 43 5e 	      sta	CARD_GATE+2
    103  0ca4		       ad 7c 2c 	      lda	gotip+3
    104  0ca7		       8d 44 5e 	      sta	CARD_GATE+3
    105  0caa		       4c 00 0c 	      jmp	GO
    106  0cad
    107  0cad				   LANMODE
    108  0cad		       00		      .byte.b	$00
    109  0cae
    110  0cae				   SETLANMODE
    111  0cae		       a9 01		      lda	#$01
    112  0cb0		       8d ad 0c 	      sta	LANMODE
    113  0cb3		       ad 4f 5e 	      lda	SERVER_IP_LAN
    114  0cb6		       8d 4b 5e 	      sta	SERVER_IP
    115  0cb9		       ad 50 5e 	      lda	SERVER_IP_LAN+1
    116  0cbc		       8d 4c 5e 	      sta	SERVER_IP+1
    117  0cbf		       ad 51 5e 	      lda	SERVER_IP_LAN+2
    118  0cc2		       8d 4d 5e 	      sta	SERVER_IP+2
    119  0cc5		       ad 52 5e 	      lda	SERVER_IP_LAN+3
    120  0cc8		       8d 4e 5e 	      sta	SERVER_IP+3
    121  0ccb		       4c 00 0c 	      jmp	GO
    122  0cce
    123  0cce							; Ask for server IP address and redisplay.
    124  0cce				   GETNEWSERVER
      0  0cce					      PRINT	CG_CLR,CG_BLU,"NEW SERVER ADDRESS? ",CG_YEL
      1  0cce		       20 60 63 	      jsr	prns
      2  0cd1		       93 1f 4e 45*	      dc.b	CG_CLR,CG_BLU,"NEW SERVER ADDRESS? ",CG_YEL,0
    126  0ce9		       20 64 2c 	      jsr	getip
    127  0cec		       ad 7d 2c 	      lda	IP_OK
    128  0cef		       f0 dd		      beq	GETNEWSERVER	;Zero if IP was invalid
    129  0cf1
    130  0cf1		       ad 79 2c 	      lda	gotip
    131  0cf4		       8d 4b 5e 	      sta	SERVER_IP
    132  0cf7		       ad 7a 2c 	      lda	gotip+1
    133  0cfa		       8d 4c 5e 	      sta	SERVER_IP+1
    134  0cfd		       ad 7b 2c 	      lda	gotip+2
    135  0d00		       8d 4d 5e 	      sta	SERVER_IP+2
    136  0d03		       ad 7c 2c 	      lda	gotip+3
    137  0d06		       8d 4e 5e 	      sta	SERVER_IP+3
    138  0d09		       4c 00 0c 	      jmp	GO
    139  0d0c
    140  0d0c
    141  0d0c				   STARTGAME
    142  0d0c							; Pick car type
    143  0d0c		       20 34 58 	      jsr	SETUPSPRITES
    144  0d0f		       20 2e 28 	      jsr	PICKCAR
    145  0d12
      0  0d12					      PRINT	CRLF
      1  0d12		       20 60 63 	      jsr	prns
      2  0d15		       0d 00		      dc.b	CRLF,0
    147  0d17		       20 5e 5e 	      jsr	NETWORK_SETUP
    148  0d1a		       20 00 28 	      jsr	irq_init
    149  0d1d		       20 89 58 	      jsr	SOUND_SETUP
    150  0d20
    151  0d20		       ad 5d 5e 	      lda	NET_FAILED
    152  0d23		       d0 4b		      bne	wait1x
    153  0d25
    154  0d25		       20 d1 5e 	      jsr	GATEWAYMAC	; Automatically determines if GW is on LAN or not
    155  0d28
    156  0d28							; If we're in LAN  mode, we need the server's MAC instead of the GW's MAC.
    157  0d28		       ad ad 0c 	      lda	LANMODE
    158  0d2b		       f0 03		      beq	SETUPDONE
    159  0d2d
    160  0d2d		       20 29 5f 	      jsr	SERVERMAC
    161  0d30
    162  0d30				   SETUPDONE
    163  0d30		       a9 01		      lda	#$01
    164  0d32		       8d 5a 5e 	      sta	NETSETUPFINISHED
    165  0d35
      0  0d35					      PRINT	CG_WHT, CRLF,CRLF, "WAITING FOR SERVER...(FIRE BUTTON SKIPS)"
      1  0d35		       20 60 63 	      jsr	prns
      2  0d38		       05 0d 0d 57*	      dc.b	CG_WHT, CRLF,CRLF, "WAITING FOR SERVER...(FIRE BUTTON SKIPS)",0
    167  0d64
    168  0d64				   wait1
    169  0d64		       ad 00 dc 	      lda	$dc00
    170  0d67		       c9 6f		      cmp	#$6f
    171  0d69		       f0 05		      beq	wait1x
    172  0d6b
    173  0d6b		       ad 59 5e 	      lda	PACKET_RECEIVED
    174  0d6e		       f0 f4		      beq	wait1
    175  0d70
    176  0d70				   wait1x
    177  0d70
    178  0d70		       20 7e 34 	      jsr	RESETTRACK
    179  0d73		       20 34 58 	      jsr	SETUPSPRITES	; Resets default positions
    180  0d76
    181  0d76							;Default position and speed
    182  0d76		       ac a7 2b 	      ldy	PLAYERNUM
    183  0d79		       b9 9e 2b 	      lda	STARTPOSITIONS,y
    184  0d7c		       8d 83 2d 	      sta	MYXPOS+1
    185  0d7f		       a9 00		      lda	#$00
    186  0d81		       8d 82 2d 	      sta	MYXPOS
    187  0d84		       8d 84 2d 	      sta	MYXPOS+2
    188  0d87		       8d 85 2d 	      sta	MYX_SPEED
    189  0d8a		       8d 86 2d 	      sta	MYX_SPEED+1
    190  0d8d		       8d dc 31 	      sta	MY_SPEED
    191  0d90		       8d dd 31 	      sta	MY_SPEED+1
    192  0d93		       8d 7d 2d 	      sta	DAMAGE
    193  0d96		       8d 02 d0 	      sta	sprite2x
    194  0d99		       8d 03 d0 	      sta	sprite2y
    195  0d9c		       8d 04 d0 	      sta	sprite3x
    196  0d9f		       8d 05 d0 	      sta	sprite3y
    197  0da2		       8d 06 d0 	      sta	sprite4x
    198  0da5		       8d 07 d0 	      sta	sprite4y
    199  0da8		       8d 08 d0 	      sta	sprite5x
    200  0dab		       8d 09 d0 	      sta	sprite5y
    201  0dae		       8d 0a d0 	      sta	sprite6x
    202  0db1		       8d 0b d0 	      sta	sprite6y
    203  0db4		       8d 0c d0 	      sta	sprite7x
    204  0db7		       8d 0d d0 	      sta	sprite7y
    205  0dba		       8d 0e d0 	      sta	sprite8x
    206  0dbd		       8d 0f d0 	      sta	sprite8y
    207  0dc0
    208  0dc0		       ad 33 58 	      lda	MY_COLOR
    209  0dc3		       8d 27 d0 	      sta	sprite1color
    210  0dc6
    211  0dc6							;---------------------------------
    212  0dc6							; Screen setup
    213  0dc6
    214  0dc6		       20 7e 34 	      jsr	RESETTRACK
    215  0dc9		       20 f9 33 	      jsr	DRAWSCREEN1
    216  0dcc
    217  0dcc							;Paint screen	(+$08 = multicolor)
    218  0dcc		       a9 09		      lda	#$01+$08
    219  0dce		       8d 86 02 	      sta	$0286
      0  0dd1					      PRINT	CG_CLR
      1  0dd1		       20 60 63 	      jsr	prns
      2  0dd4		       93 00		      dc.b	CG_CLR,0
    221  0dd6		       a9 09		      lda	#$01+$08
    222  0dd8
    223  0dd8							; Explicitly paint screen color, for older kernals
    224  0dd8		       a2 00		      ldx	#$00
    225  0dda				   SCREENCOLOR
    226  0dda		       9d 00 d8 	      sta	$d800,x
    227  0ddd		       9d 00 d9 	      sta	$d900,x
    228  0de0		       9d 00 da 	      sta	$da00,x
    229  0de3		       9d e7 da 	      sta	$dae7,x
    230  0de6		       e8		      inx
    231  0de7		       d0 f1		      bne	SCREENCOLOR
    232  0de9
    233  0de9							;Multicolors
    234  0de9		       a9 0e		      lda	#$0e
    235  0deb		       8d 22 d0 	      sta	$d022
    236  0dee		       a9 06		      lda	#$06
    237  0df0		       8d 23 d0 	      sta	$d023
    238  0df3
    239  0df3							; Logo
      0  0df3					      PLOT	0,20
      1  0df3		       a0 00		      ldy	#0
      2  0df5		       a2 14		      ldx	#20
      3  0df7		       18		      clc
      4  0df8		       20 0a e5 	      jsr	$E50A
      0  0dfb					      PRINT	CG_YEL,"NET",CG_RED,"RACER",CG_BLK,"	     GAME OVER!"
      1  0dfb		       20 60 63 	      jsr	prns
      2  0dfe		       9e 4e 45 54*	      dc.b	CG_YEL,"NET",CG_RED,"RACER",CG_BLK,"	     GAME OVER!",0
    242  0e1c
    243  0e1c							; Status Lines
      0  0e1c					      PLOT	0,22
      1  0e1c		       a0 00		      ldy	#0
      2  0e1e		       a2 16		      ldx	#22
      3  0e20		       18		      clc
      4  0e21		       20 0a e5 	      jsr	$E50A
      0  0e24					      PRINT	CG_WHT,"SPEED: ", CG_BLU, "	    "
      1  0e24		       20 60 63 	      jsr	prns
      2  0e27		       05 53 50 45*	      dc.b	CG_WHT,"SPEED: ", CG_BLU, "	    ",0
      0  0e39					      PLOT	0,23
      1  0e39		       a0 00		      ldy	#0
      2  0e3b		       a2 17		      ldx	#23
      3  0e3d		       18		      clc
      4  0e3e		       20 0a e5 	      jsr	$E50A
      0  0e41					      PRINT	CG_WHT,"SCORE:        "
      1  0e41		       20 60 63 	      jsr	prns
      2  0e44		       05 53 43 4f*	      dc.b	CG_WHT,"SCORE:        ",0
      0  0e54					      PLOT	17,22
      1  0e54		       a0 11		      ldy	#17
      2  0e56		       a2 16		      ldx	#22
      3  0e58		       18		      clc
      4  0e59		       20 0a e5 	      jsr	$E50A
      0  0e5c					      PRINT	"DAMAGE:"
      1  0e5c		       20 60 63 	      jsr	prns
      2  0e5f		       44 41 4d 41*	      dc.b	"DAMAGE:",0
      0  0e67					      PLOT	17,23
      1  0e67		       a0 11		      ldy	#17
      2  0e69		       a2 17		      ldx	#23
      3  0e6b		       18		      clc
      4  0e6c		       20 0a e5 	      jsr	$E50A
      0  0e6f					      PRINT	"  CARS:     "
      1  0e6f		       20 60 63 	      jsr	prns
      2  0e72		       20 20 43 41*	      dc.b	"  CARS:     ",0
    252  0e7f
    253  0e7f		       20 94 34 	      jsr	RESETDAMAGEBAR
    254  0e82
    255  0e82		       a0 00		      ldy	#$00
    256  0e84				   s1
    257  0e84		       b9 a8 34 	      lda	DAMAGEBARCOLORS,y
    258  0e87		       99 89 db 	      sta	DAMAGEBARCOLOR,y
    259  0e8a		       c8		      iny
    260  0e8b		       c0 0d		      cpy	#13	; Decimal
    261  0e8d		       d0 f5		      bne	s1
    262  0e8f
    263  0e8f							; Start rest of IRQ
    264  0e8f		       a9 01		      lda	#$01
    265  0e91		       8d a8 2b 	      sta	GAMEACTIVE
    266  0e94
    267  0e94							; Comms "LED"
    268  0e94		       a9 51		      lda	#$51
    269  0e96		       8d bf 07 	      sta	$07bf
    270  0e99
    271  0e99		       a9 35		      lda	#$35	;Set all ROM off, IO on.
    272  0e9b		       85 01		      sta	$01
    273  0e9d
    274  0e9d		       a9 04		      lda	#$04
    275  0e9f		       8d 7e 2d 	      sta	CARS
    276  0ea2
    277  0ea2				   LOOP
    278  0ea2		       4c a2 0e 	      jmp	LOOP
    279  0ea5
    280  0ea5							;This part ends around 0f35, so a few wasted bytes here.
    281  0ea5
    282  0ea5							; =================================================================
    283  0ea5							; Binary Includes
    284  0ea5							; =================================================================
    285  0ea5							;Include music here
    286  0ffe					      org	$0ffe	; $1000-2, because of the load address
    287  0ffe					      incbin	"music/Speedroad.dat"
    288  1aa9
    289  1aa9							;Include charset here
    290  1ffe					      org	$1ffe	; $2000-2, because of the load address
    291  1ffe					      incbin	"charset/netracer.font"
    292  2800
    293  2800
    294  2800							; -----------------------------------------------------------------
    295  2800
    296  2800				   irq_init   SUBROUTINE
    297  2800		       78		      sei
    298  2801		       a9 e3		      lda	#<raster_idle	;Set an idle-IRQ which will
    299  2803		       8d 14 03 	      sta	$0314	;be used when KERNAL is on
    300  2806		       a9 31		      lda	#>raster_idle
    301  2808		       8d 15 03 	      sta	$0315
    302  280b
    303  280b		       a9 ec		      lda	#<IRQ	;Set vector & raster position
    304  280d		       8d fe ff 	      sta	$fffe	;for next IRQ
    305  2810		       a9 31		      lda	#>IRQ
    306  2812		       8d ff ff 	      sta	$ffff
    307  2815		       a9 fa		      lda	#RASTER_GSCREEN_POS
    308  2817		       8d 12 d0 	      sta	$d012
    309  281a		       a9 10		      lda	#$10	;Set high bit of raster
    310  281c		       8d 11 d0 	      sta	$d011	;position (0) but don't blank screen
    311  281f		       a9 7f		      lda	#$7f	;Set timer interrupt off
    312  2821		       8d 0d dc 	      sta	$dc0d
    313  2824		       a9 01		      lda	#$01	;Set raster interrupt on
    314  2826		       8d 1a d0 	      sta	$d01a
    315  2829		       ad 0d dc 	      lda	$dc0d	;Acknowledge timer interrupt
    316  282c		       58		      cli
    317  282d		       60		      rts
    318  282e
    319  282e
    320  282e							; ----------------------------------------------------------
    321  282e							; Choose car design.
    322  282e				   PICKCAR
      0  282e					      PRINT	CG_CLR,CRLF,CG_WHT,"CHOOSE CAR:", CRLF, CRLF
      1  282e		       20 60 63 	      jsr	prns
      2  2831		       93 0d 05 43*	      dc.b	CG_CLR,CRLF,CG_WHT,"CHOOSE CAR:", CRLF, CRLF,0
    324  2842
      0  2842					      PRINT	"  1	2   3	4   5	6   7	8", CRLF
      1  2842		       20 60 63 	      jsr	prns
      2  2845		       20 20 31 20*	      dc.b	"  1	2   3	4   5	6   7	8", CRLF,0
      0  2866					      PRINT	CG_RVS, CG_GR1, "				   ", CRLF
      1  2866		       20 60 63 	      jsr	prns
      2  2869		       12 97 20 20*	      dc.b	CG_RVS, CG_GR1, "				   ", CRLF,0
      0  288e					      PRINT	CG_RVS, CG_GR1, "				   ", CRLF
      1  288e		       20 60 63 	      jsr	prns
      2  2891		       12 97 20 20*	      dc.b	CG_RVS, CG_GR1, "				   ", CRLF,0
      0  28b6					      PRINT	CG_RVS, CG_GR1, "				   ", CRLF
      1  28b6		       20 60 63 	      jsr	prns
      2  28b9		       12 97 20 20*	      dc.b	CG_RVS, CG_GR1, "				   ", CRLF,0
    329  28de
    330  28de		       a9 53		      lda	#$53
    331  28e0		       8d 01 d0 	      sta	sprite1y
    332  28e3		       8d 03 d0 	      sta	sprite2y
    333  28e6		       8d 05 d0 	      sta	sprite3y
    334  28e9		       8d 07 d0 	      sta	sprite4y
    335  28ec		       8d 09 d0 	      sta	sprite5y
    336  28ef		       8d 0b d0 	      sta	sprite6y
    337  28f2		       8d 0d d0 	      sta	sprite7y
    338  28f5		       8d 0f d0 	      sta	sprite8y
    339  28f8
    340  28f8		       a0 01		      ldy	#$01	; car#
    341  28fa		       a2 00		      ldx	#$00	; sprite pointer
    342  28fc				   cloop
    343  28fc		       b9 9e 2b 	      lda	STARTPOSITIONS,y
    344  28ff		       9d 00 d0 	      sta	sprite1x,x
    345  2902		       e8		      inx
    346  2903		       e8		      inx
    347  2904		       c8		      iny
    348  2905		       c0 09		      cpy	#$09
    349  2907		       d0 f3		      bne	cloop
    350  2909
    351  2909				   WAITFORCAR
    352  2909		       20 e4 ff 	      jsr	$ffe4
    353  290c		       f0 fb		      beq	WAITFORCAR
    354  290e
    355  290e				   c1
    356  290e		       c9 31		      cmp	#$31
    357  2910		       d0 05		      bne	c2
    358  2912		       a0 00		      ldy	#$00
    359  2914		       4c 56 29 	      jmp	PICKCAR_x
    360  2917				   c2
    361  2917		       c9 32		      cmp	#$32
    362  2919		       d0 05		      bne	c3
    363  291b		       a0 01		      ldy	#$01
    364  291d		       4c 56 29 	      jmp	PICKCAR_x
    365  2920				   c3
    366  2920		       c9 33		      cmp	#$33
    367  2922		       d0 05		      bne	c4
    368  2924		       a0 02		      ldy	#$02
    369  2926		       4c 56 29 	      jmp	PICKCAR_x
    370  2929				   c4
    371  2929		       c9 34		      cmp	#$34
    372  292b		       d0 05		      bne	c5
    373  292d		       a0 03		      ldy	#$03
    374  292f		       4c 56 29 	      jmp	PICKCAR_x
    375  2932				   c5
    376  2932		       c9 35		      cmp	#$35
    377  2934		       d0 05		      bne	c6
    378  2936		       a0 04		      ldy	#$04
    379  2938		       4c 56 29 	      jmp	PICKCAR_x
    380  293b				   c6
    381  293b		       c9 36		      cmp	#$36
    382  293d		       d0 05		      bne	c7
    383  293f		       a0 05		      ldy	#$05
    384  2941		       4c 56 29 	      jmp	PICKCAR_x
    385  2944				   c7
    386  2944		       c9 37		      cmp	#$37
    387  2946		       d0 05		      bne	c8
    388  2948		       a0 06		      ldy	#$06
    389  294a		       4c 56 29 	      jmp	PICKCAR_x
    390  294d				   c8
    391  294d		       c9 38		      cmp	#$38
    392  294f		       d0 b8		      bne	WAITFORCAR
    393  2951		       a0 07		      ldy	#$07
    394  2953		       4c 56 29 	      jmp	PICKCAR_x
    395  2956
    396  2956				   PICKCAR_x
    397  2956		       b9 81 58 	      lda	CARCOLORS,y
    398  2959		       8d 33 58 	      sta	MY_COLOR	; My color
    399  295c		       c8		      iny
    400  295d		       8c a7 2b 	      sty	PLAYERNUM
    401  2960
    402  2960							; For private LAN, also set the last octet of IP address and MAC with this.
    403  2960		       ad ad 0c 	      lda	LANMODE
    404  2963		       f0 34		      beq	PICKCAR_rts
    405  2965
    406  2965		       18		      clc
    407  2966		       98		      tya
    408  2967		       69 64		      adc	#100
    409  2969		       a8		      tay
    410  296a		       8c 3c 5e 	      sty	CARD_IP+3
    411  296d		       8d 38 5e 	      sta	CARD_MAC+5
    412  2970
      0  2970					      PRINT	CRLF, CG_BLU, "CHANGED IP ADDRESS TO ", CG_YEL
      1  2970		       20 60 63 	      jsr	prns
      2  2973		       0d 1f 43 48*	      dc.b	CRLF, CG_BLU, "CHANGED IP ADDRESS TO ", CG_YEL,0
      0  298d					      PRINT_IP	CARD_IP
      1  298d		       a2 5e		      ldx	#>(CARD_IP)
      2  298f		       a9 39		      lda	#<(CARD_IP)
      3  2991		       20 39 65 	      jsr	printip
      0  2994					      PRINT	CRLF
      1  2994		       20 60 63 	      jsr	prns
      2  2997		       0d 00		      dc.b	CRLF,0
    415  2999
    416  2999				   PICKCAR_rts
    417  2999		       60		      rts
    418  299a
    419  299a							;---------------------------------------------------------------
    420  299a				   TITLESCREEN
    421  299a
      0  299a					      PRINT	CG_CLR,CG_DCS,CG_YEL,"NET",CG_RED,"RACER ", CG_LBL, "1.1",CRLF,CRLF
      1  299a		       20 60 63 	      jsr	prns
      2  299d		       93 08 9e 4e*	      dc.b	CG_CLR,CG_DCS,CG_YEL,"NET",CG_RED,"RACER ", CG_LBL, "1.1",CRLF,CRLF,0
    423  29b1
      0  29b1					      PRINT	CG_LGN,"USE JOYSTICK IN PORT 2",CRLF
      1  29b1		       20 60 63 	      jsr	prns
      2  29b4		       99 55 53 45*	      dc.b	CG_LGN,"USE JOYSTICK IN PORT 2",CRLF,0
      0  29cd					      PRINT	CG_LGN,"RUN/STOP KEY RESETS GAME",CRLF,CRLF
      1  29cd		       20 60 63 	      jsr	prns
      2  29d0		       99 52 55 4e*	      dc.b	CG_LGN,"RUN/STOP KEY RESETS GAME",CRLF,CRLF,0
    426  29ec
      0  29ec					      PRINT	CG_BLU,"MY ADDRESS IS ", CG_YEL
      1  29ec		       20 60 63 	      jsr	prns
      2  29ef		       1f 4d 59 20*	      dc.b	CG_BLU,"MY ADDRESS IS ", CG_YEL,0
      0  2a00					      PRINT_IP	CARD_IP
      1  2a00		       a2 5e		      ldx	#>(CARD_IP)
      2  2a02		       a9 39		      lda	#<(CARD_IP)
      3  2a04		       20 39 65 	      jsr	printip
      0  2a07					      PRINT	CRLF
      1  2a07		       20 60 63 	      jsr	prns
      2  2a0a		       0d 00		      dc.b	CRLF,0
    429  2a0c
      0  2a0c					      PRINT	CG_BLU, "MY NETMASK IS ", CG_YEL
      1  2a0c		       20 60 63 	      jsr	prns
      2  2a0f		       1f 4d 59 20*	      dc.b	CG_BLU, "MY NETMASK IS ", CG_YEL,0
      0  2a20					      PRINT_IP	CARD_MASK
      1  2a20		       a2 5e		      ldx	#>(CARD_MASK)
      2  2a22		       a9 3d		      lda	#<(CARD_MASK)
      3  2a24		       20 39 65 	      jsr	printip
      0  2a27					      PRINT	CRLF
      1  2a27		       20 60 63 	      jsr	prns
      2  2a2a		       0d 00		      dc.b	CRLF,0
    432  2a2c
      0  2a2c					      PRINT	CG_BLU, "MY GATEWAY IS ", CG_YEL
      1  2a2c		       20 60 63 	      jsr	prns
      2  2a2f		       1f 4d 59 20*	      dc.b	CG_BLU, "MY GATEWAY IS ", CG_YEL,0
      0  2a40					      PRINT_IP	CARD_GATE
      1  2a40		       a2 5e		      ldx	#>(CARD_GATE)
      2  2a42		       a9 41		      lda	#<(CARD_GATE)
      3  2a44		       20 39 65 	      jsr	printip
      0  2a47					      PRINT	CRLF
      1  2a47		       20 60 63 	      jsr	prns
      2  2a4a		       0d 00		      dc.b	CRLF,0
    435  2a4c
      0  2a4c					      PRINT	CRLF,CG_LBL, "SERVER ADDRESS IS ", CG_YEL
      1  2a4c		       20 60 63 	      jsr	prns
      2  2a4f		       0d 9a 53 45*	      dc.b	CRLF,CG_LBL, "SERVER ADDRESS IS ", CG_YEL,0
      0  2a65					      PRINT_IP	SERVER_IP
      1  2a65		       a2 5e		      ldx	#>(SERVER_IP)
      2  2a67		       a9 4b		      lda	#<(SERVER_IP)
      3  2a69		       20 39 65 	      jsr	printip
      0  2a6c					      PRINT	CRLF
      1  2a6c		       20 60 63 	      jsr	prns
      2  2a6f		       0d 00		      dc.b	CRLF,0
      0  2a71					      PRINT	CRLF
      1  2a71		       20 60 63 	      jsr	prns
      2  2a74		       0d 00		      dc.b	CRLF,0
    439  2a76
    440  2a76		       ad ad 0c 	      lda	LANMODE
    441  2a79		       f0 16		      beq	NOTLAN
    442  2a7b
      0  2a7b					      PRINT	CG_RED, "LAN MODE SET",CRLF,CRLF
      1  2a7b		       20 60 63 	      jsr	prns
      2  2a7e		       1c 4c 41 4e*	      dc.b	CG_RED, "LAN MODE SET",CRLF,CRLF,0
    444  2a8e		       4c bd 2a 	      jmp	SHOWIRC
    445  2a91
    446  2a91				   NOTLAN
      0  2a91					      PRINT	CG_RED, "FORWARD UDP PORT 3000 IN YOUR ROUTER!", CRLF,CRLF
      1  2a91		       20 60 63 	      jsr	prns
      2  2a94		       1c 46 4f 52*	      dc.b	CG_RED, "FORWARD UDP PORT 3000 IN YOUR ROUTER!", CRLF,CRLF,0
    448  2abd
    449  2abd				   SHOWIRC
      0  2abd					      PRINT	CG_LGN, "IRC CHANNEL: NEWNET #NETRACER",CRLF,CRLF
      1  2abd		       20 60 63 	      jsr	prns
      2  2ac0		       99 49 52 43*	      dc.b	CG_LGN, "IRC CHANNEL: NEWNET #NETRACER",CRLF,CRLF,0
    451  2ae1
      0  2ae1					      PRINT	CG_GR2,"PRESS ",CG_WHT,"N",CG_GR2," TO CHANGE NETWORK ADDRESS", CRLF
      1  2ae1		       20 60 63 	      jsr	prns
      2  2ae4		       98 50 52 45*	      dc.b	CG_GR2,"PRESS ",CG_WHT,"N",CG_GR2," TO CHANGE NETWORK ADDRESS", CRLF,0
      0  2b0a					      PRINT	CG_GR2,"PRESS ",CG_WHT,"G",CG_GR2," TO CHANGE GATEWAY ADDRESS", CRLF
      1  2b0a		       20 60 63 	      jsr	prns
      2  2b0d		       98 50 52 45*	      dc.b	CG_GR2,"PRESS ",CG_WHT,"G",CG_GR2," TO CHANGE GATEWAY ADDRESS", CRLF,0
      0  2b33					      PRINT	CG_GR2,"PRESS ",CG_WHT,"S",CG_GR2," TO CHANGE SERVER ADDRESS", CRLF
      1  2b33		       20 60 63 	      jsr	prns
      2  2b36		       98 50 52 45*	      dc.b	CG_GR2,"PRESS ",CG_WHT,"S",CG_GR2," TO CHANGE SERVER ADDRESS", CRLF,0
      0  2b5b					      PRINT	CG_GR2,"PRESS ",CG_WHT,"L",CG_GR2," FOR LAN MODE", CRLF
      1  2b5b		       20 60 63 	      jsr	prns
      2  2b5e		       98 50 52 45*	      dc.b	CG_GR2,"PRESS ",CG_WHT,"L",CG_GR2," FOR LAN MODE", CRLF,0
      0  2b77					      PRINT	CRLF, "PRESS ",CG_WHT,"FIRE BUTTON",CG_GR2, " TO START GAME"
      1  2b77		       20 60 63 	      jsr	prns
      2  2b7a		       0d 50 52 45*	      dc.b	CRLF, "PRESS ",CG_WHT,"FIRE BUTTON",CG_GR2, " TO START GAME",0
    457  2b9d		       60		      rts
    458  2b9e
    459  2b9e							;Initial car positions - note decimal	(0=dummy since no car 0)
    460  2b9e				   STARTPOSITIONS
    461  2b9e		       00 20 40 60*	      .byte.b	0,32,64,96,128,160,192,224,255
    462  2ba7
    463  2ba7				   PLAYERNUM
    464  2ba7		       00		      .byte.b	0
    465  2ba8
    466  2ba8							; Flags
    467  2ba8				   GAMEACTIVE
    468  2ba8		       00		      .byte.b	0
    469  2ba9
    470  2ba9							; Includes
------- FILE joystick.asm LEVEL 2 PASS 2
      0  2ba9					      include	"joystick.asm"
      1  2ba9
      2  2ba9							;Flag that the joystick may be used for input
      3  2ba9				   JOYOK
      4  2ba9		       01		      .byte.b	$01
      5  2baa
      6  2baa							;This holds the joystick button state
      7  2baa				   JOYBUTTON
      8  2baa		       00		      .byte.b	$00
      9  2bab
     10  2bab							;Flags for directions
     11  2bab				   JOYLEFT
     12  2bab		       00		      .byte.b	$00
     13  2bac				   JOYRIGHT
     14  2bac		       00		      .byte.b	$00
     15  2bad				   JOYUP
     16  2bad		       00		      .byte.b	$00
     17  2bae				   JOYDOWN
     18  2bae		       00		      .byte.b	$00
     19  2baf
     20  2baf				   STEERRATE
     21  2baf		       64		      .byte.b	#100
     22  2bb0
     23  2bb0
     24  2bb0							; ---------------------------------------------------------------------
     25  2bb0							; This is called from inside the interrupt!
     26  2bb0				   READJOYSTICK 		; Thanks Jason aka TMR/C0S
     27  2bb0		       ad a9 2b 	      lda	JOYOK	; Joystick input is allowed
     28  2bb3		       d0 01		      bne	JOYSTART
     29  2bb5		       60		      rts
     30  2bb6
     31  2bb6				   JOYSTART
     32  2bb6		       a9 00		      lda	#$00
     33  2bb8		       8d ab 2b 	      sta	JOYLEFT
     34  2bbb		       8d ac 2b 	      sta	JOYRIGHT
     35  2bbe		       8d ad 2b 	      sta	JOYUP
     36  2bc1		       8d ae 2b 	      sta	JOYDOWN
     37  2bc4		       8d aa 2b 	      sta	JOYBUTTON
     38  2bc7
     39  2bc7		       ad dc 31 	      lda	MY_SPEED
     40  2bca		       4a		      lsr
     41  2bcb		       4a		      lsr
     42  2bcc		       4a		      lsr
     43  2bcd		       8d af 2b 	      sta	STEERRATE
     44  2bd0
     45  2bd0							; ---------------------------------------------------------------------
     46  2bd0							; Check joystick bits.
     47  2bd0		       ad 00 dc 	      lda	$dc00	; Port 2
     48  2bd3				   up
     49  2bd3		       4a		      lsr
     50  2bd4		       b0 03		      bcs	down
     51  2bd6		       ee ad 2b 	      inc	JOYUP
     52  2bd9				   down
     53  2bd9		       4a		      lsr
     54  2bda		       b0 03		      bcs	left
     55  2bdc		       ee ae 2b 	      inc	JOYDOWN
     56  2bdf				   left
     57  2bdf		       4a		      lsr
     58  2be0		       b0 03		      bcs	right
     59  2be2		       ee ab 2b 	      inc	JOYLEFT
     60  2be5				   right
     61  2be5		       4a		      lsr
     62  2be6		       b0 03		      bcs	fire
     63  2be8		       ee ac 2b 	      inc	JOYRIGHT
     64  2beb				   fire
     65  2beb		       4a		      lsr
     66  2bec		       b0 03		      bcs	JOY_DONE
     67  2bee		       ee aa 2b 	      inc	JOYBUTTON
     68  2bf1
     69  2bf1							; ---------------------------------------------------------------------
     70  2bf1							; Process movements.  Can use A again.
     71  2bf1				   JOY_DONE
     72  2bf1		       ad ad 2b 	      lda	JOYUP
     73  2bf4		       f0 0d		      beq	DODOWN
     74  2bf6
     75  2bf6							; UP
     76  2bf6		       18		      clc
     77  2bf7		       ad dc 31 	      lda	MY_SPEED
     78  2bfa		       c9 ff		      cmp	#$FF
     79  2bfc		       f0 05		      beq	DODOWN	; Already at max
     80  2bfe		       69 01		      adc	#$01
     81  2c00		       8d dc 31 	      sta	MY_SPEED
     82  2c03
     83  2c03							; ---------------------------------------------------------------------
     84  2c03				   DODOWN
     85  2c03		       ad ae 2b 	      lda	JOYDOWN
     86  2c06		       f0 05		      beq	DOLEFT
     87  2c08
     88  2c08		       a9 04		      lda	#$04
     89  2c0a		       20 be 2f 	      jsr	DECSPEED
     90  2c0d
     91  2c0d							; ---------------------------------------------------------------------
     92  2c0d				   DOLEFT
     93  2c0d		       ad ab 2b 	      lda	JOYLEFT
     94  2c10		       f0 20		      beq	DORIGHT
     95  2c12
     96  2c12		       38		      sec		; set carry for borrow purpose
     97  2c13		       ad 85 2d 	      lda	MYX_SPEED
     98  2c16		       ed af 2b 	      sbc	STEERRATE	; perform subtraction on the LSBs
     99  2c19		       8d 85 2d 	      sta	MYX_SPEED
    100  2c1c		       ad 86 2d 	      lda	MYX_SPEED+1	; do the same for the MSBs, with carry
    101  2c1f		       e9 00		      sbc	#$00	; set according to the previous result
    102  2c21		       8d 86 2d 	      sta	MYX_SPEED+1
    103  2c24
    104  2c24							; Limit Speed if less than -3
    105  2c24		       c9 fc		      cmp	#$FC
    106  2c26		       10 0a		      bpl	DORIGHT
    107  2c28
    108  2c28		       a9 fd		      lda	#$FD
    109  2c2a		       8d 86 2d 	      sta	MYX_SPEED+1
    110  2c2d		       a9 00		      lda	#$00
    111  2c2f		       8d 85 2d 	      sta	MYX_SPEED
    112  2c32
    113  2c32							; ---------------------------------------------------------------------
    114  2c32				   DORIGHT
    115  2c32		       ad ac 2b 	      lda	JOYRIGHT
    116  2c35		       f0 20		      beq	JOY_x
    117  2c37
    118  2c37		       18		      clc		; clear carry
    119  2c38		       ad 85 2d 	      lda	MYX_SPEED
    120  2c3b		       6d af 2b 	      adc	STEERRATE
    121  2c3e		       8d 85 2d 	      sta	MYX_SPEED	; store sum of LSBs
    122  2c41		       ad 86 2d 	      lda	MYX_SPEED+1
    123  2c44		       69 00		      adc	#$00	; add the MSBs using carry from
    124  2c46		       8d 86 2d 	      sta	MYX_SPEED+1	; the previous calculation
    125  2c49
    126  2c49							; Limit Speed if more than +3
    127  2c49		       c9 04		      cmp	#$04
    128  2c4b		       d0 0a		      bne	JOY_x
    129  2c4d
    130  2c4d		       a9 03		      lda	#$03
    131  2c4f		       8d 86 2d 	      sta	MYX_SPEED+1
    132  2c52		       a9 00		      lda	#$00
    133  2c54		       8d 85 2d 	      sta	MYX_SPEED
    134  2c57
    135  2c57
    136  2c57							; ---------------------------------------------------------------------
    137  2c57				   JOY_x
    138  2c57		       60		      rts
    139  2c58
------- FILE racer-main.asm
------- FILE ipaddress.asm LEVEL 2 PASS 2
      0  2c58					      include	"ipaddress.asm"
      1  2c58							; ======================================
      2  2c58							; IP Address Input routine - Schema/AIC
      3  2c58							; ======================================
      4  2c58
      5  2c58							;Converts e.g.
      6  2c58							;192.168.1.23
      7  2c58							;to
      8  2c58							;ABC ABC ABC ABC
      9  2c58							;192.168.023.001
     10  2c58							;and then to 4 bytes at gotip
     11  2c58
     12  2c58				   IPADDRESS_FILTER
     13  2c58		       31 32 33 34*	      dc.b	"1234567890.",0
     14  2c64
     15  2c64				   getip
     16  2c64		       a9 00		      lda	#$00
     17  2c66		       85 cc		      sta	$cc	; Force cursor to flash
     18  2c68
     19  2c68		       a9 2c		      lda	#>IPADDRESS_FILTER
     20  2c6a		       a2 58		      ldx	#<IPADDRESS_FILTER
     21  2c6c		       a0 0f		      ldy	#15
     22  2c6e		       20 cf 5d 	      jsr	FILTERED_INPUT
     23  2c71		       20 81 2c 	      jsr	CONVERTIP
     24  2c74
     25  2c74		       a9 01		      lda	#$01
     26  2c76		       85 cc		      sta	$cc	; Force cursor to not flash
     27  2c78		       60		      rts
     28  2c79
     29  2c79				   gotip
     30  2c79		       00 00 00 00	      dc.b	$00,$00,$00,$00
     31  2c7d
     32  2c7d				   IP_OK
     33  2c7d		       00		      dc.b	$00
     34  2c7e							;===========================
     35  2c7e
     36  2c7e				   DOTS
     37  2c7e		       00		      dc.b	#$00
     38  2c7f
     39  2c7f				   STRINDEX
     40  2c7f		       00		      dc.b	#$00
     41  2c80
     42  2c80				   IPINDEX
     43  2c80		       00		      dc.b	$00
     44  2c81
     45  2c81				   CONVERTIP
     46  2c81							;First, check that there are three periods '.' in the string.
     47  2c81		       a2 00		      ldx	#$00
     48  2c83		       8d 7e 2c 	      sta	DOTS
     49  2c86		       8d 80 2c 	      sta	IPINDEX
     50  2c89		       8d 7f 2c 	      sta	STRINDEX
     51  2c8c				   COUNTLOOP
     52  2c8c		       bd 55 2d 	      lda	GOTINPUT,x
     53  2c8f		       f0 0b		      beq	DONECOUNT	; end of string (0)
     54  2c91		       c9 2e		      cmp	#'.
     55  2c93		       d0 03		      bne	COUNTNEXT
     56  2c95		       ee 7e 2c 	      inc	DOTS
     57  2c98				   COUNTNEXT
     58  2c98		       e8		      inx
     59  2c99		       4c 8c 2c 	      jmp	COUNTLOOP
     60  2c9c
     61  2c9c				   DONECOUNT
     62  2c9c		       ad 7e 2c 	      lda	DOTS
     63  2c9f		       c9 03		      cmp	#$03
     64  2ca1		       f0 03		      beq	DOTSOK
     65  2ca3		       4c fa 2c 	      jmp	INVALIDIP
     66  2ca6
     67  2ca6
     68  2ca6							; OK, now pad the values if needed for the conversion, one octet at a time
     69  2ca6				   DOTSOK
     70  2ca6
     71  2ca6							;Init A,B,C with 0
     72  2ca6				   NEXTBYTE
     73  2ca6		       a9 00		      lda	#$0
     74  2ca8		       8d 46 2d 	      sta	A
     75  2cab		       8d 47 2d 	      sta	B
     76  2cae		       8d 48 2d 	      sta	C
     77  2cb1
     78  2cb1				   BYTELOOP
     79  2cb1		       ae 7f 2c 	      ldx	STRINDEX
     80  2cb4		       bd 55 2d 	      lda	GOTINPUT,x
     81  2cb7		       f0 1b		      beq	ENDOFBYTE	;end of string (0)
     82  2cb9		       c9 2e		      cmp	#'.
     83  2cbb		       f0 17		      beq	ENDOFBYTE
     84  2cbd
     85  2cbd							;Shift ABC over
     86  2cbd		       ac 47 2d 	      ldy	B
     87  2cc0		       8c 46 2d 	      sty	A	;old A is lost
     88  2cc3		       ac 48 2d 	      ldy	C
     89  2cc6		       8c 47 2d 	      sty	B
     90  2cc9		       e9 30		      sbc	#$30	;Convert from PETSCII to equivalent value
     91  2ccb		       8d 48 2d 	      sta	C	;insert new digit
     92  2cce
     93  2cce				   NEXTDIGIT
     94  2cce		       ee 7f 2c 	      inc	STRINDEX
     95  2cd1		       4c b1 2c 	      jmp	BYTELOOP
     96  2cd4
     97  2cd4				   ENDOFBYTE
     98  2cd4		       20 1b 2d 	      jsr	dec2hex	;Returns byte in accumulator, carry set if >255
     99  2cd7
    100  2cd7		       b0 21		      bcs	INVALIDIP
    101  2cd9
    102  2cd9							;Save the returned byte
    103  2cd9		       ac 80 2c 	      ldy	IPINDEX
    104  2cdc		       99 79 2c 	      sta	gotip,y
    105  2cdf		       ee 80 2c 	      inc	IPINDEX
    106  2ce2		       ad 80 2c 	      lda	IPINDEX
    107  2ce5		       c9 04		      cmp	#$04	;Done
    108  2ce7		       f0 06		      beq	IP_DONE
    109  2ce9
    110  2ce9		       ee 7f 2c 	      inc	STRINDEX	;Skip over the '.'
    111  2cec		       4c a6 2c 	      jmp	NEXTBYTE
    112  2cef
    113  2cef				   IP_DONE
    114  2cef		       a9 01		      lda	#$01
    115  2cf1		       8d 7d 2c 	      sta	IP_OK
    116  2cf4		       a9 20		      lda	#$20
    117  2cf6		       20 d2 ff 	      jsr	$ffd2	;overwrite cursor detritus
    118  2cf9		       60		      rts
    119  2cfa
    120  2cfa
    121  2cfa				   INVALIDIP
      0  2cfa					      PRINT	" ",CRLF,CG_RED,"INVALID IP ADDRESS!",CRLF
      1  2cfa		       20 60 63 	      jsr	prns
      2  2cfd		       20 0d 1c 49*	      dc.b	" ",CRLF,CG_RED,"INVALID IP ADDRESS!",CRLF,0
    123  2d15		       a9 00		      lda	#$00
    124  2d17		       8d 7d 2c 	      sta	IP_OK
    125  2d1a		       60		      rts
    126  2d1b
    127  2d1b
    128  2d1b							;===================================================
    129  2d1b							; Convert three-digit decimal (ABC) into a byte
    130  2d1b							;===================================================
    131  2d1b
    132  2d1b				   dec2hex
    133  2d1b		       ad 46 2d 	      lda	A
    134  2d1e		       20 49 2d 	      jsr	MULT10
    135  2d21		       20 49 2d 	      jsr	MULT10	;x100
    136  2d24		       8d 43 2d 	      sta	TMP0
    137  2d27		       ad 47 2d 	      lda	B
    138  2d2a		       20 49 2d 	      jsr	MULT10	;x10
    139  2d2d		       8d 44 2d 	      sta	TMP1
    140  2d30		       ad 48 2d 	      lda	C
    141  2d33		       8d 45 2d 	      sta	TMP2	;x1
    142  2d36
    143  2d36		       18		      clc
    144  2d37		       a9 00		      lda	#$00
    145  2d39		       6d 43 2d 	      adc	TMP0
    146  2d3c		       6d 44 2d 	      adc	TMP1
    147  2d3f		       6d 45 2d 	      adc	TMP2
    148  2d42		       60		      rts		;Carry will be set if result was > 255
    149  2d43
    150  2d43							; ===================
    151  2d43
    152  2d43				   TMP0
    153  2d43		       00		      dc.b	#$00
    154  2d44
    155  2d44				   TMP1
    156  2d44		       00		      dc.b	#$00
    157  2d45
    158  2d45				   TMP2
    159  2d45		       00		      dc.b	#$00
    160  2d46
    161  2d46				   A			;First digit
    162  2d46		       00		      dc.b	#$00
    163  2d47
    164  2d47				   B			;Second digit
    165  2d47		       00		      dc.b	#$00
    166  2d48
    167  2d48				   C			;Third digit
    168  2d48		       00		      dc.b	#$00
    169  2d49
    170  2d49
    171  2d49							; =======================================================================
    172  2d49							; Multiply by 10 - from http://www.6502.org/source/integers/fastx10.htm
    173  2d49
    174  2d49		       0a	   MULT10     ASL		;multiply by 2
    175  2d4a		       8d 54 2d 	      STA	TEMP10	;temp store in TEMP
    176  2d4d		       0a		      ASL		;again multiply by 2 (*4)
    177  2d4e		       0a		      ASL		;again multiply by 2 (*8)
    178  2d4f		       18		      CLC
    179  2d50		       6d 54 2d 	      ADC	TEMP10	;as result, A = x*8 + x*2
    180  2d53		       60		      RTS
    181  2d54
    182  2d54		       00	   TEMP10     .byte.b	0
    183  2d55
    184  2d55
    185  2d55							; Buffer
    186  2d55				   GOTINPUT
    187  2d55		       00 00 00 00*	      ds.b	$28	; 40 bytes
------- FILE racer-main.asm
------- FILE racer-game.asm LEVEL 2 PASS 2
      0  2d7d					      include	"racer-game.asm"
      1  2d7d							; Network game - Game-related logic and variables
      2  2d7d
      3  2d7d							; Game stats
      4  2d7d				   DAMAGE
      5  2d7d		       00		      .byte.b	$00
      6  2d7e
      7  2d7e				   CARS
      8  2d7e		       00		      .byte.b	$00	; Set in racer-main
      9  2d7f
     10  2d7f				   SCORE		; stored in BCD
     11  2d7f		       00 00 00 	      .byte.b	$00,$00,$00
     12  2d82
     13  2d82				   MYXPOS
     14  2d82		       00 80 00 	      .byte.b	$00,$80,$00	; First byte is "fraction", second byte is "integer", 3rd byte is "high bit"
     15  2d85
     16  2d85				   MYX_SPEED
     17  2d85		       00 00		      .byte.b	$00,$00	; First byte is "fraction", second byte is "integer"
     18  2d87
     19  2d87							;--------------------------------------------------------------------
     20  2d87							; Game logic
     21  2d87				   GAME_TICK
     22  2d87							;Check for Run/Stop - Reset game if pressed!
     23  2d87
     24  2d87		       a9 7f		      LDA	#$7F
     25  2d89		       8d 00 dc 	      STA	$DC00
     26  2d8c		       ad 01 dc 	      LDA	$DC01
     27  2d8f		       c9 7f		      CMP	#$7F
     28  2d91		       d0 03		      BNE	CHECKNET
     29  2d93
     30  2d93		       4c ae 30 	      jmp	GAME_OVER
     31  2d96
     32  2d96				   CHECKNET
     33  2d96							;If network timed out, don't update
     34  2d96		       ad 5c 5e 	      lda	NET_TIMEDOUT
     35  2d99		       f0 03		      beq	NET_OK
     36  2d9b		       4c e1 2d 	      jmp	GAME_TICK_x
     37  2d9e
     38  2d9e							; If game over, don't update
     39  2d9e				   NET_OK
     40  2d9e		       ad ac 30 	      lda	GAMEOVER_FLAG
     41  2da1		       f0 03		      beq	GAME_OK1
     42  2da3		       4c ae 30 	      jmp	GAME_OVER
     43  2da6
     44  2da6				   GAME_OK1
     45  2da6							; If car was wrecked, only update animation (no controls)
     46  2da6		       ad ab 30 	      lda	CAR_DESTROYED
     47  2da9		       f0 03		      beq	GAME_OK2
     48  2dab		       4c 48 30 	      jmp	DESTROY_ANIM	;Skip game update entirely
     49  2dae
     50  2dae				   GAME_OK2
     51  2dae							; Joystick input
     52  2dae		       20 b0 2b 	      jsr	READJOYSTICK
     53  2db1
     54  2db1				   CHECKCARS
     55  2db1							; Check for collision with other cars - note: this is collision based on previous
     56  2db1							; frame's movement!  takes 1 frame for sprites to be redrawn and collision to be
     57  2db1							; registered.
     58  2db1		       ad 1e d0 	      lda	$d01e
     59  2db4		       8d e6 2e 	      sta	D01ETEMP
     60  2db7		       29 01		      and	#$01
     61  2db9		       f0 03		      beq	CHECK	;zero, meaning no collision
     62  2dbb		       20 e7 2e 	      jsr	HITCAR
     63  2dbe
     64  2dbe							; Check for collision with background
     65  2dbe				   CHECK
     66  2dbe
     67  2dbe		       20 e2 2d 	      jsr	UPDATECARX	; Update my X position based on X speed
     68  2dc1		       20 1f 2e 	      jsr	HITSIDE	; no longer uses h/w collision, always does lookup now
     69  2dc4
     70  2dc4							; Sounds
     71  2dc4				   SOUNDS
     72  2dc4		       20 a4 58 	      jsr	SOUND_ENGINE
     73  2dc7
     74  2dc7							; Friction
     75  2dc7		       20 39 2f 	      jsr	SLOWX
     76  2dca
     77  2dca		       ad ad 2b 	      lda	JOYUP
     78  2dcd		       d0 08		      bne	CHECKDAMAGE
     79  2dcf
     80  2dcf		       ad dc 31 	      lda	MY_SPEED
     81  2dd2		       f0 03		      beq	CHECKDAMAGE	; Already at 0
     82  2dd4
     83  2dd4		       ce dc 31 	      dec	MY_SPEED
     84  2dd7
     85  2dd7				   CHECKDAMAGE
     86  2dd7							; Check if damage > 100
     87  2dd7		       ae 7d 2d 	      ldx	DAMAGE
     88  2dda		       e0 64		      cpx	#100	;Decimal
      0  2ddc					      blt	GAME_TICK_x
      1  2ddc		       90 03		      bcc	GAME_TICK_x
     90  2dde
     91  2dde							;Damage excedeed 100!	Kaboom!
     92  2dde		       20 30 30 	      jsr	INIT_EXPLOSION
     93  2de1
     94  2de1				   GAME_TICK_x
     95  2de1		       60		      rts
     96  2de2
     97  2de2
     98  2de2
     99  2de2
    100  2de2							; ----------------------------------------------------------
    101  2de2							; Update car X position  (Y is done in screen update)
    102  2de2							; 16-bit addition	in case we use fractions in future
    103  2de2				   UPDATECARX
    104  2de2							;ADD16 MYXPOS, MYX_SPEED  ; NOW 24-BIT!
    105  2de2
    106  2de2							;figure out implied high-byte of MYX_SPEED
    107  2de2		       a9 00		      lda	#0
    108  2de4		       8d 1c 2e 	      sta	.temp
    109  2de7		       ad 86 2d 	      lda	MYX_SPEED+1
    110  2dea		       10 05		      bpl	.done
    111  2dec		       a9 ff		      lda	#255
    112  2dee		       8d 1c 2e 	      sta	.temp
    113  2df1				   .done
    114  2df1		       18		      clc
    115  2df2		       ad 82 2d 	      lda	MYXPOS
    116  2df5		       6d 85 2d 	      adc	MYX_SPEED
    117  2df8		       8d 82 2d 	      sta	MYXPOS
    118  2dfb		       ad 83 2d 	      lda	MYXPOS+1
    119  2dfe		       6d 86 2d 	      adc	MYX_SPEED+1
    120  2e01		       8d 83 2d 	      sta	MYXPOS+1
    121  2e04		       ad 84 2d 	      lda	MYXPOS+2
    122  2e07		       6d 1c 2e 	      adc	.temp
    123  2e0a		       8d 84 2d 	      sta	MYXPOS+2
    124  2e0d
    125  2e0d							; And update sprite
    126  2e0d		       ad 83 2d 	      lda	MYXPOS+1
    127  2e10		       8d 00 d0 	      sta	sprite1x
    128  2e13		       ad 84 2d 	      lda	MYXPOS+2
    129  2e16		       c9 00		      cmp	#0
    130  2e18		       d0 01		      bne	.ahead1
    131  2e1a							;zero out 9th bit of xpos
    132  2e1a							;lda $d010
    133  2e1a							;and #254
    134  2e1a							;sta $d010
    135  2e1a		       60		      rts
    136  2e1b				   .ahead1
    137  2e1b							;set 9th bit
    138  2e1b							;lda $d010
    139  2e1b							;ora #1
    140  2e1b							;sta $d010
    141  2e1b		       60		      rts
    142  2e1c
    143  2e1c				   .temp
    144  2e1c		       00		      .byte.b	$00
    145  2e1d							; ----------------------------------------------------------
    146  2e1d							; Check if collided with the side of the track!
    147  2e1d
    148  2e1d				   BOUNCE
    149  2e1d		       a0 01		      .byte.b	$A0, $01	; First byte is "fraction", second byte is "integer"
    150  2e1f
    151  2e1f				   HITSIDE    SUBROUTINE
    152  2e1f
    153  2e1f				   CHECKTRACK
    154  2e1f							; 1. Look around to see what we hit.
    155  2e1f
    156  2e1f							; Left corner
    157  2e1f		       ad 84 2d 	      lda	MYXPOS+2
    158  2e22		       6a		      ror
    159  2e23		       ad 83 2d 	      lda	MYXPOS+1
    160  2e26		       6a		      ror
    161  2e27		       18		      clc
    162  2e28		       69 01		      adc	#1	; to make up for 2 pixel space at left at sprite (divided by two)
    163  2e2a		       aa		      tax
    164  2e2b		       bd f7 30 	      lda	XTOCHAR,x
    165  2e2e		       aa		      tax
    166  2e2f		       bd e0 05 	      lda	$05e0,x
    167  2e32		       c9 20		      cmp	#$20	; Blank space
    168  2e34		       f0 44		      beq	CHECKRIGHT
    169  2e36		       c9 4b		      cmp	#"K"	; flat wall
    170  2e38		       d0 14		      bne	.next1a
      0  2e3a					      NEGATE16	MYX_SPEED
      1  2e3a		       38		      sec
      2  2e3b		       a9 00		      lda	#$00
      3  2e3d		       ed 85 2d 	      sbc	MYX_SPEED
      4  2e40		       8d 85 2d 	      sta	MYX_SPEED
      5  2e43		       a9 00		      lda	#$00
      6  2e45		       ed 86 2d 	      sbc	MYX_SPEED+1
      7  2e48		       8d 86 2d 	      sta	MYX_SPEED+1
    172  2e4b		       4c d5 2e 	      jmp	DOBOUNCE
    173  2e4e				   .next1a
    174  2e4e		       c9 42		      cmp	#"B"	;diagonal wall
    175  2e50		       d0 03		      bne	.next1b
    176  2e52		       4c 6d 2e 	      jmp	MOVERIGHT
    177  2e55				   .next1b
    178  2e55		       c9 4d		      cmp	#"M"	; diagonal away... bounce for now
    179  2e57		       d0 03		      bne	.next1c
    180  2e59		       4c 6d 2e 	      jmp	MOVERIGHT
    181  2e5c				   .next1c
    182  2e5c		       c9 4c		      cmp	#"L"	; sometimes can look past edge tiles into this...
    183  2e5e		       d0 03		      bne	.next1d
    184  2e60		       4c 6d 2e 	      jmp	MOVERIGHT
    185  2e63				   .next1d
    186  2e63		       c9 41		      cmp	#"A"	; sometimes can look past edge tiles into this...
    187  2e65		       d0 03		      bne	.next1e
    188  2e67		       4c 6d 2e 	      jmp	MOVERIGHT
    189  2e6a				   .next1e
    190  2e6a		       4c 7a 2e 	      jmp	CHECKRIGHT
    191  2e6d
    192  2e6d				   MOVERIGHT
    193  2e6d		       a9 00		      lda	#0
    194  2e6f		       8d 85 2d 	      sta	MYX_SPEED	;set speed to 1 pixel/frame right
    195  2e72		       a9 01		      lda	#1
    196  2e74		       8d 86 2d 	      sta	MYX_SPEED+1
    197  2e77		       4c d5 2e 	      jmp	DOBOUNCE
    198  2e7a
    199  2e7a				   CHECKRIGHT
    200  2e7a							;Right corner
    201  2e7a		       ad 84 2d 	      lda	MYXPOS+2
    202  2e7d		       6a		      ror
    203  2e7e		       ad 83 2d 	      lda	MYXPOS+1
    204  2e81		       6a		      ror
    205  2e82		       18		      clc
    206  2e83		       69 0b		      adc	#11	; to make up for 2 pixel gap at right (divided by 2)
    207  2e85		       aa		      tax
    208  2e86		       bd f7 30 	      lda	XTOCHAR,x
    209  2e89		       aa		      tax
    210  2e8a		       bd e0 05 	      lda	$05e0,x
    211  2e8d
    212  2e8d		       c9 20		      cmp	#$20	; Blank space
    213  2e8f		       f0 54		      beq	.exit
    214  2e91		       c9 4a		      cmp	#"J"
    215  2e93		       d0 14		      bne	.next2a
      0  2e95					      NEGATE16	MYX_SPEED
      1  2e95		       38		      sec
      2  2e96		       a9 00		      lda	#$00
      3  2e98		       ed 85 2d 	      sbc	MYX_SPEED
      4  2e9b		       8d 85 2d 	      sta	MYX_SPEED
      5  2e9e		       a9 00		      lda	#$00
      6  2ea0		       ed 86 2d 	      sbc	MYX_SPEED+1
      7  2ea3		       8d 86 2d 	      sta	MYX_SPEED+1
    217  2ea6		       4c d5 2e 	      jmp	DOBOUNCE
    218  2ea9				   .next2a
    219  2ea9		       c9 43		      cmp	#"C"
    220  2eab		       d0 03		      bne	.next2b
    221  2ead		       4c c8 2e 	      jmp	MOVELEFT
    222  2eb0				   .next2b
    223  2eb0		       c9 4e		      cmp	#"N"	; diagonal away... bounce for now
    224  2eb2		       d0 03		      bne	.next2c
    225  2eb4		       4c c8 2e 	      jmp	MOVELEFT
    226  2eb7				   .next2c
    227  2eb7		       c9 4c		      cmp	#"L"	; sometimes can look past edge tiles into this...
    228  2eb9		       d0 03		      bne	.next2d
    229  2ebb		       4c c8 2e 	      jmp	MOVELEFT
    230  2ebe				   .next2d
    231  2ebe		       c9 41		      cmp	#"A"	; sometimes can look past edge tiles into this...
    232  2ec0		       d0 03		      bne	.next2e
    233  2ec2		       4c c8 2e 	      jmp	MOVELEFT
    234  2ec5				   .next2e
    235  2ec5		       4c e5 2e 	      jmp	.exit
    236  2ec8
    237  2ec8				   MOVELEFT
    238  2ec8		       a9 00		      lda	#0
    239  2eca		       8d 85 2d 	      sta	MYX_SPEED	;set speed to 1 pixel/frame left
    240  2ecd		       a9 ff		      lda	#$ff
    241  2ecf		       8d 86 2d 	      sta	MYX_SPEED+1
    242  2ed2		       4c d5 2e 	      jmp	DOBOUNCE
    243  2ed5
    244  2ed5				   DOBOUNCE
    245  2ed5				   HITSIDE_x
    246  2ed5		       20 c4 5a 	      jsr	SOUND_HITSIDE
    247  2ed8		       a9 03		      lda	#3	; Decimal
    248  2eda		       20 af 2f 	      jsr	INCDAMAGE
    249  2edd
    250  2edd		       a9 0a		      lda	#10	;Decimal
    251  2edf		       20 be 2f 	      jsr	DECSPEED
    252  2ee2
    253  2ee2		       20 e2 2d 	      jsr	UPDATECARX
    254  2ee5				   .exit
    255  2ee5		       60		      rts
    256  2ee6
    257  2ee6							; ----------------------------------------------------------
    258  2ee6							; Collided with another car!
    259  2ee6
    260  2ee6				   D01ETEMP
    261  2ee6		       00		      .byte.b	$00
    262  2ee7
    263  2ee7				   HITCAR     SUBROUTINE
    264  2ee7							; Determine which car we hit.
    265  2ee7		       a0 01		      ldy	#$01	; Start at sprite #1 ($d002)
    266  2ee9
    267  2ee9				   CHECKMORE
    268  2ee9		       20 d6 2f 	      jsr	CHECKCAR
    269  2eec
    270  2eec		       ad 2d 30 	      lda	CARFOUND
    271  2eef		       d0 0b		      bne	FOUND
    272  2ef1
    273  2ef1							; Not found, next car
    274  2ef1		       c8		      iny
    275  2ef2		       c0 08		      cpy	#$08
    276  2ef4		       d0 f3		      bne	CHECKMORE
    277  2ef6
    278  2ef6				   NOTFOUND
    279  2ef6							; If we reached here, no valid collision was found (bug?), so don't do any more
    280  2ef6		       a9 00		      lda	#0
    281  2ef8		       8d e6 07 	      sta	$7e6
    282  2efb
    283  2efb		       60		      rts
    284  2efc
    285  2efc							; Found which car we hit.
    286  2efc				   FOUND
    287  2efc		       98		      tya
    288  2efd		       18		      clc		;display sprite num in bottom right corner for debugging
    289  2efe		       69 30		      adc	#$30
    290  2f00		       8d e6 07 	      sta	$7e6
    291  2f03
    292  2f03							;Y now contains sprite# of car we hit (starting at 1, since player car is sprite 0)
    293  2f03
    294  2f03							;Based on 1st year physics, if two objects of equal mass collide, they simply
    295  2f03							;exchange velocities.	We take on the other player's velocity (assume that other
    296  2f03							;client is doing same.)
    297  2f03
    298  2f03							;lda IN_XSPEEDLOW,y
    299  2f03							;sta MYX_SPEED
    300  2f03							;lda IN_XSPEEDHIGH,y
    301  2f03							;sta MYX_SPEED+1
    302  2f03
    303  2f03							;lda IN_YSPEEDLOW,y
    304  2f03							;sta MY_SPEED
    305  2f03							;lda IN_YSPEEDHIGH,y
    306  2f03							;sta MY_SPEED+1
    307  2f03
    308  2f03							; if collision on right, move left... if on left, move right
    309  2f03		       38		      sec
    310  2f04		       ad 83 2d 	      lda	MYXPOS+1	; 16-bit subtraction
    311  2f07		       f9 c3 31 	      sbc	IN_XPOSLOW,y
    312  2f0a		       ad 84 2d 	      lda	MYXPOS+2	;  High byte - reserve for future
    313  2f0d		       f9 cb 31 	      sbc	IN_XPOSHIGH,y
    314  2f10		       90 0d		      bcc	.ahead1
    315  2f12
    316  2f12							; move right
    317  2f12		       a9 00		      lda	#0
    318  2f14		       8d 85 2d 	      sta	MYX_SPEED	;set speed to 1 pixel/frame right
    319  2f17		       a9 01		      lda	#1
    320  2f19		       8d 86 2d 	      sta	MYX_SPEED+1
    321  2f1c		       4c 29 2f 	      jmp	HITCAR_x
    322  2f1f
    323  2f1f				   .ahead1
    324  2f1f							; move left
    325  2f1f		       a9 00		      lda	#0
    326  2f21		       8d 85 2d 	      sta	MYX_SPEED	;set speed to 1 pixel/frame left
    327  2f24		       a9 ff		      lda	#$ff
    328  2f26		       8d 86 2d 	      sta	MYX_SPEED+1
    329  2f29
    330  2f29				   HITCAR_x
    331  2f29		       20 e3 5a 	      jsr	SOUND_HITCAR
    332  2f2c		       a9 02		      lda	#02	; Decimal
    333  2f2e		       20 af 2f 	      jsr	INCDAMAGE
    334  2f31
    335  2f31		       a9 0a		      lda	#10	;Decimal
    336  2f33		       20 be 2f 	      jsr	DECSPEED
    337  2f36
    338  2f36		       60		      rts
    339  2f37
    340  2f37							; ---------------------------------------------------------
    341  2f37							; Decrease X (lateral) speed if joystick released
    342  2f37
    343  2f37				   FRICTION
    344  2f37		       14 00		      .byte.b	20, 0	; Tweak this!	Decimal
    345  2f39
    346  2f39				   SLOWX
    347  2f39							; If X speed is already zero, do nothing.
    348  2f39		       18		      clc
    349  2f3a		       ad 85 2d 	      lda	MYX_SPEED
    350  2f3d		       6d 86 2d 	      adc	MYX_SPEED+1
    351  2f40		       f0 46		      beq	SLOWX_x
    352  2f42
    353  2f42							; Constantly move the speed towards zero - need direction by checking sign
    354  2f42		       ad 86 2d 	      lda	MYX_SPEED+1	; High byte
    355  2f45		       30 03		      bmi	XSNEG	; Negative
    356  2f47		       4c 65 2f 	      jmp	XSPOS	; Positive
    357  2f4a
    358  2f4a				   XSNEG
    359  2f4a		       ad ab 2b 	      lda	JOYLEFT
    360  2f4d		       d0 39		      bne	SLOWX_x
      0  2f4f					      ADD16	MYX_SPEED, FRICTION
      1  2f4f		       18		      clc
      2  2f50		       ad 85 2d 	      lda	MYX_SPEED
      3  2f53		       6d 37 2f 	      adc	FRICTION
      4  2f56		       8d 85 2d 	      sta	MYX_SPEED
      5  2f59		       ad 86 2d 	      lda	MYX_SPEED+1
      6  2f5c		       6d 38 2f 	      adc	FRICTION+1
      7  2f5f		       8d 86 2d 	      sta	MYX_SPEED+1
    362  2f62		       b0 1c		      bcs	STOPX	;Crossed to positive?
    363  2f64		       60		      rts
    364  2f65
    365  2f65				   XSPOS
    366  2f65		       ad ac 2b 	      lda	JOYRIGHT
    367  2f68		       d0 1e		      bne	SLOWX_x
      0  2f6a					      SUBTRACT16	MYX_SPEED, FRICTION
      1  2f6a		       38		      sec
      2  2f6b		       ad 85 2d 	      lda	MYX_SPEED
      3  2f6e		       ed 37 2f 	      sbc	FRICTION
      4  2f71		       8d 85 2d 	      sta	MYX_SPEED
      5  2f74		       ad 86 2d 	      lda	MYX_SPEED+1
      6  2f77		       ed 38 2f 	      sbc	FRICTION+1
      7  2f7a		       8d 86 2d 	      sta	MYX_SPEED+1
    369  2f7d		       90 01		      bcc	STOPX	;Crossed to negative?
    370  2f7f		       60		      rts
    371  2f80
    372  2f80							; Stop X motion completely.
    373  2f80				   STOPX
    374  2f80		       a9 00		      lda	#$00
    375  2f82		       8d 85 2d 	      sta	MYX_SPEED
    376  2f85		       8d 86 2d 	      sta	MYX_SPEED+1
    377  2f88
    378  2f88				   SLOWX_x
    379  2f88		       60		      rts
    380  2f89
    381  2f89
    382  2f89							; ---------------------------------------------------------
    383  2f89							; Increment score by A,X (two bytes, decimal mode... max of 9999)
    384  2f89				   INCSCORE
    385  2f89		       f8		      sed
    386  2f8a
    387  2f8a		       8d ad 2f 	      sta	SCOREUP
    388  2f8d		       8e ae 2f 	      stx	SCOREUP+1
    389  2f90		       18		      clc
    390  2f91		       ad 7f 2d 	      lda	SCORE
    391  2f94		       6d ad 2f 	      adc	SCOREUP
    392  2f97		       8d 7f 2d 	      sta	SCORE
    393  2f9a		       ad 80 2d 	      lda	SCORE+1
    394  2f9d		       6d ae 2f 	      adc	SCOREUP+1
    395  2fa0		       8d 80 2d 	      sta	SCORE+1
    396  2fa3		       ad 81 2d 	      lda	SCORE+2
    397  2fa6		       69 00		      adc	#0
    398  2fa8		       8d 81 2d 	      sta	SCORE+2
    399  2fab
    400  2fab		       d8		      cld
    401  2fac
    402  2fac		       60		      rts
    403  2fad
    404  2fad				   SCOREUP
    405  2fad		       00 00		      .byte.b	$00,$00
    406  2faf
    407  2faf							; ---------------------------------------------------------
    408  2faf							; Increment damage by A (one byte)
    409  2faf				   INCDAMAGE
    410  2faf		       8d bd 2f 	      sta	DAMAGEUP
    411  2fb2		       18		      clc
    412  2fb3		       ad 7d 2d 	      lda	DAMAGE
    413  2fb6		       6d bd 2f 	      adc	DAMAGEUP
    414  2fb9		       8d 7d 2d 	      sta	DAMAGE
    415  2fbc		       60		      rts
    416  2fbd
    417  2fbd				   DAMAGEUP
    418  2fbd		       00		      .byte.b	$00
    419  2fbe
    420  2fbe							; ---------------------------------------------------------
    421  2fbe							; Decrement speed by A (one byte), keep positive
    422  2fbe				   DECSPEED
    423  2fbe		       8d d5 2f 	      sta	SPEED_DEC
    424  2fc1
    425  2fc1		       38		      sec
    426  2fc2		       ad dc 31 	      lda	MY_SPEED
    427  2fc5		       f0 0d		      beq	DESCSPEED_x	; Already at 0
    428  2fc7
    429  2fc7		       ed d5 2f 	      sbc	SPEED_DEC
    430  2fca		       8d dc 31 	      sta	MY_SPEED
    431  2fcd		       b0 05		      bcs	DESCSPEED_x	; Result still positive (no carry)
    432  2fcf
    433  2fcf		       a9 00		      lda	#$00
    434  2fd1		       8d dc 31 	      sta	MY_SPEED	; Was negative, limit to 0
    435  2fd4
    436  2fd4				   DESCSPEED_x
    437  2fd4		       60		      rts
    438  2fd5
    439  2fd5				   SPEED_DEC
    440  2fd5		       00		      .byte.b	$00
    441  2fd6
    442  2fd6							; ---------------------------------------------------------
    443  2fd6							; Check if we hit a particular car.  Use y to point to sprite regs.
    444  2fd6							; Thanks Jorma Oksanen!
    445  2fd6							; Sets CARHIT to 1 if hit.
    446  2fd6
    447  2fd6				   CHECKCAR
    448  2fd6
    449  2fd6		       a9 00		      lda	#$00
    450  2fd8		       8d 2d 30 	      sta	CARFOUND
    451  2fdb
    452  2fdb		       38		      sec
    453  2fdc		       ad 83 2d 	      lda	MYXPOS+1	; 16-bit subtraction
    454  2fdf		       f9 c3 31 	      sbc	IN_XPOSLOW,y
    455  2fe2		       8d 2e 30 	      sta	dx
    456  2fe5		       ad 84 2d 	      lda	MYXPOS+2	;  High byte - reserve for future
    457  2fe8		       f9 cb 31 	      sbc	IN_XPOSHIGH,y
    458  2feb		       90 0b		      bcc	.dxneg
    459  2fed
    460  2fed							; dx positive
    461  2fed		       d0 38		      bne	.skip	; dx in [0,23] ?
    462  2fef		       ad 2e 30 	      lda	dx
    463  2ff2		       c9 18		      cmp	#24
    464  2ff4		       90 11		      bcc	.xok	; yes
    465  2ff6		       b0 2f		      bcs	.skip
    466  2ff8
    467  2ff8				   .dxneg
    468  2ff8		       c9 ff		      cmp	<#-1	; dx in [-23,-1] ?
    469  2ffa		       d0 2b		      bne	.skip	; no
    470  2ffc		       ad 2e 30 	      lda	dx
    471  2fff		       c9 e9		      cmp	<#-23
    472  3001		       90 24		      bcc	.skip	; no
    473  3003		       49 ff		      eor	#$ff
    474  3005		       69 00		      adc	#0
    475  3007
    476  3007				   .xok
    477  3007
    478  3007							; Y check ---------------------------
    479  3007		       38		      sec		; repeat with dy, range [-20,20]
    480  3008		       ad 01 d0 	      lda	sprite1y	; a bit easier, as we
    481  300b		       f9 d3 31 	      sbc	IN_YPOS,y	; don't have high byte
    482  300e		       8d 2f 30 	      sta	dy
    483  3011		       90 06		      bcc	.dyneg
    484  3013		       c9 15		      cmp	#21
    485  3015		       90 0a		      bcc	.yok
    486  3017		       b0 0e		      bcs	.skip
    487  3019
    488  3019		       c9 eb	   .dyneg     cmp	<#-21
    489  301b		       90 0a		      bcc	.skip
    490  301d		       49 ff		      eor	<#-1
    491  301f		       69 00		      adc	#0
    492  3021				   .yok
    493  3021							; A collision!
    494  3021		       a9 01		      lda	#$01
    495  3023		       8d 2d 30 	      sta	CARFOUND
    496  3026		       60		      rts
    497  3027
    498  3027				   .skip
    499  3027							; Not a collision?
    500  3027		       a9 00		      lda	#$00
    501  3029		       8d 2d 30 	      sta	CARFOUND
    502  302c		       60		      rts
    503  302d
    504  302d				   CARFOUND
    505  302d		       00		      .byte.b	$00
    506  302e
    507  302e				   dx
    508  302e		       00		      .byte.b	$00
    509  302f
    510  302f				   dy
    511  302f		       00		      .byte.b	$00
    512  3030
    513  3030
    514  3030							; --------------------------------------------------------------------
    515  3030							; Damage exceeded 100, set up explosion animation sequence
    516  3030				   INIT_EXPLOSION
    517  3030		       a9 01		      lda	#$01
    518  3032		       8d ab 30 	      sta	CAR_DESTROYED
    519  3035
    520  3035		       a9 08		      lda	#$08	;and below
    521  3037		       8d ad 30 	      sta	FIREBALL_ANIM_COUNT
    522  303a
    523  303a		       a9 26		      lda	#$26
    524  303c		       8d f8 07 	      sta	sprite1pnt
    525  303f
    526  303f							;Set explosion to light red
    527  303f		       a9 0a		      lda	#$0a
    528  3041		       8d 27 d0 	      sta	sprite1color
    529  3044
    530  3044							; Boom!
    531  3044		       20 60 5b 	      jsr	SOUND_KABOOM
    532  3047		       60		      rts
    533  3048
    534  3048
    535  3048							; --------------------------------------------------------------------
    536  3048							; Animate explosion sprite but don't allow any user control
    537  3048
    538  3048				   DESTROY_ANIM
    539  3048							;Slow me down
    540  3048		       ad dc 31 	      lda	MY_SPEED
    541  304b		       f0 03		      beq	slow
    542  304d		       ce dc 31 	      dec	MY_SPEED
    543  3050
    544  3050				   slow
    545  3050							; Slow down the animation of the fireball
    546  3050		       ce ad 30 	      dec	FIREBALL_ANIM_COUNT
    547  3053		       ad ad 30 	      lda	FIREBALL_ANIM_COUNT
    548  3056		       d0 52		      bne	DESTROY_ANIM_x
    549  3058
    550  3058							;Restart counter
    551  3058		       a9 08		      lda	#$08	; and above
    552  305a		       8d ad 30 	      sta	FIREBALL_ANIM_COUNT
    553  305d
    554  305d		       ee f8 07 	      inc	sprite1pnt
    555  3060		       ad f8 07 	      lda	sprite1pnt
    556  3063		       c9 2f		      cmp	#$2F
    557  3065		       d0 43		      bne	DESTROY_ANIM_x
    558  3067
    559  3067		       a9 2f		      lda	#$2F
    560  3069		       8d f8 07 	      sta	sprite1pnt
    561  306c
    562  306c							; Decrease num cars remaining
    563  306c		       ce 7e 2d 	      dec	CARS
    564  306f		       f0 3d		      beq	GAME_OVER
    565  3071
    566  3071							;Start again at beginning of track -----------
    567  3071				   RESETCAR
    568  3071		       ad 33 58 	      lda	MY_COLOR
    569  3074		       8d 27 d0 	      sta	sprite1color
    570  3077
    571  3077		       ac a7 2b 	      ldy	PLAYERNUM
    572  307a		       b9 9e 2b 	      lda	STARTPOSITIONS,y
    573  307d		       8d 83 2d 	      sta	MYXPOS+1
    574  3080		       a9 00		      lda	#$00
    575  3082		       8d 82 2d 	      sta	MYXPOS
    576  3085		       8d 84 2d 	      sta	MYXPOS+2
    577  3088
    578  3088		       a9 00		      lda	#$00
    579  308a		       8d 7d 2d 	      sta	DAMAGE
    580  308d		       8d ab 30 	      sta	CAR_DESTROYED
    581  3090		       8d 85 2d 	      sta	MYX_SPEED
    582  3093		       8d 86 2d 	      sta	MYX_SPEED+1
    583  3096		       8d dc 31 	      sta	MY_SPEED
    584  3099		       8d dd 31 	      sta	MY_SPEED+1
    585  309c
    586  309c		       a9 23		      lda	#$23
    587  309e		       8d f8 07 	      sta	sprite1pnt
    588  30a1
    589  30a1		       20 94 34 	      jsr	RESETDAMAGEBAR
    590  30a4		       20 7e 34 	      jsr	RESETTRACK
    591  30a7		       20 f9 33 	      jsr	DRAWSCREEN1
    592  30aa
    593  30aa				   DESTROY_ANIM_x
    594  30aa		       60		      rts
    595  30ab
    596  30ab				   CAR_DESTROYED
    597  30ab		       00		      .byte.b	$00
    598  30ac
    599  30ac				   GAMEOVER_FLAG
    600  30ac		       00		      .byte.b	$00
    601  30ad
    602  30ad				   FIREBALL_ANIM_COUNT
    603  30ad		       ff		      .byte.b	$FF	;Overwritten
    604  30ae
    605  30ae							; --------------------------------------------------------------------
    606  30ae							; Game over!  Note this is still called repeatedly by the IRQ.
    607  30ae
    608  30ae				   GAME_OVER
    609  30ae		       a9 01		      lda	#$01
    610  30b0		       8d ac 30 	      sta	GAMEOVER_FLAG
    611  30b3
    612  30b3		       a9 00		      lda	#$00
    613  30b5		       8d 18 d4 	      sta	$d418
    614  30b8		       8d dc 31 	      sta	MY_SPEED
    615  30bb		       8d dd 31 	      sta	MY_SPEED+1
    616  30be
    617  30be		       a9 03		      lda	#$03
    618  30c0		       a2 10		      ldx	#$10
    619  30c2				   go1
    620  30c2		       9d 28 db 	      sta	GAMEOVERCOLOR,x
    621  30c5		       ca		      dex
    622  30c6		       d0 fa		      bne	go1
    623  30c8
    624  30c8		       ad 00 dc 	      lda	$dc00
    625  30cb		       c9 6f		      cmp	#$6f	; Fire button
    626  30cd		       f0 01		      beq	RESET_GAME
    627  30cf		       60		      rts
    628  30d0
    629  30d0				   RESET_GAME
    630  30d0		       a9 00		      lda	#$00
    631  30d2		       8d ac 30 	      sta	GAMEOVER_FLAG
    632  30d5
    633  30d5		       a9 0f		      lda	#$0f
    634  30d7		       8d 18 d4 	      sta	$d418
    635  30da
    636  30da		       a9 00		      lda	#$00
    637  30dc		       a2 10		      ldx	#$10
    638  30de				   go2
    639  30de		       9d 28 db 	      sta	GAMEOVERCOLOR,x
    640  30e1		       ca		      dex
    641  30e2		       d0 fa		      bne	go2
    642  30e4
    643  30e4		       a9 04		      lda	#$04
    644  30e6		       8d 7e 2d 	      sta	CARS
    645  30e9
    646  30e9		       a9 00		      lda	#$00
    647  30eb		       8d 7f 2d 	      sta	SCORE
    648  30ee		       8d 80 2d 	      sta	SCORE+1
    649  30f1		       8d 81 2d 	      sta	SCORE+2
    650  30f4
    651  30f4		       4c 71 30 	      jmp	RESETCAR
    652  30f7
    653  30f7							; --------------------------------------------------------------------
    654  30f7							; Sprite X to character cell lookup
    655  30f7				   XTOCHAR
    656  30f7		       00 00 00 00*	      .byte.b	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4
    657  3117		       05 05 05 05*	      .byte.b	5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,9,9,9,9,10,10,10,10,11,11,11,11,12
    658  3134		       0c 0c 0c 0d*	      .byte.b	12,12,12,13,13,13,13,14,14,14,14,15,15,15,15,16,16,16,16,17,17,17,17
    659  314b		       12 12 12 12*	      .byte.b	18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,22,22,22,22,23,23,23,23
    660  3163		       18 18 18 18*	      .byte.b	24,24,24,24,25,25,25,25,26,26,26,26,27,27,27,27,28,28,28,28,29,29,29,29
    661  317b		       1e 1e 1e 1e*	      .byte.b	30,30,30,30,31,31,31,31,32,32,32,32,33,33,33,33,34,34,34,34,35,35,35,35
    662  3193		       24 24 24 24*	      .byte.b	36,36,36,36,37,37,37,37,38,38,38,38,39,39,39,39
    663  31a3
    664  31a3
    665  31a3
    666  31a3							; --------------------------------------------------------------------
    667  31a3							; Speeds received from other players - first byte is a dummy in all cases
    668  31a3
    669  31a3				   IN_XSPEEDLOW
    670  31a3		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    671  31ab
    672  31ab				   IN_XSPEEDHIGH
    673  31ab		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    674  31b3
    675  31b3				   IN_YSPEEDLOW
    676  31b3		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    677  31bb
    678  31bb				   IN_YSPEEDHIGH
    679  31bb		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    680  31c3
    681  31c3				   IN_XPOSLOW
    682  31c3		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    683  31cb
    684  31cb				   IN_XPOSHIGH
    685  31cb		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    686  31d3
    687  31d3				   IN_YPOS
    688  31d3		       ff 00 00 00*	      .byte.b	$FF,$00,$00,$00,$00,$00,$00,$00
    689  31db
    690  31db				   IN_XPOS_D010
    691  31db		       00		      .byte.b	$0
------- FILE racer-main.asm
------- FILE racer-screen.asm LEVEL 2 PASS 2
      0  31dc					      include	"racer-screen.asm"
      1  31dc							; NetRacer screen/track updates
      2  31dc
      3  31dc		       04 00	   SCREEN     =	$0400
      4  31dc
      5  31dc		       07 89	   DAMAGEBAR  =	$0789
      6  31dc		       db 89	   DAMAGEBARCOLOR =	DAMAGEBAR+$D400
      7  31dc
      8  31dc		       07 77	   SPEEDBAR   =	$0777
      9  31dc		       db 77	   SPEEDBARCOLOR =	SPEEDBAR+$D400
     10  31dc
     11  31dc		       07 9f	   SCORELOC   =	$079F
     12  31dc
     13  31dc		       07 b1	   CARSLOC    =	DAMAGEBAR+40
     14  31dc
     15  31dc		       db 28	   GAMEOVERCOLOR =	$0728+$D400
     16  31dc
     17  31dc		       00 fc	   savea      =	$fc
     18  31dc		       00 fd	   savex      =	$fd
     19  31dc		       00 fe	   savey      =	$fe
     20  31dc
     21  31dc		       00 fa	   RASTER_GSCREEN_POS =	250	; 250
     22  31dc		       00 cd	   RASTER_PANEL_POS =	205	; 221
     23  31dc		       00 d7	   RASTER_PANEL2_POS =	215	; 214 230
     24  31dc
     25  31dc				   MY_SPEED
     26  31dc				   VERTSCROLLRATE		; Effectively, my speed
     27  31dc		       00 00		      dc.b	$00,$00	; Low/High (high not used, keep at 0 for now)
     28  31de
     29  31de				   VERTSCROLLFRACTION		; Low
     30  31de		       00		      dc.b	$00
     31  31df
     32  31df				   VERTSCROLL		; High
     33  31df		       00		      dc.b	$00
     34  31e0
     35  31e0				   DRAWSCREENFLAG		;Without this, the screen would constantly be scrolled if VERTSCROLL was 0
     36  31e0		       00		      dc.b	$00
     37  31e1
     38  31e1				   DAMAGETEMP
     39  31e1		       00		      .byte.b	$00
     40  31e2
     41  31e2				   SPEEDTEMP
     42  31e2		       00		      .byte.b	$00
     43  31e3
     44  31e3				   raster_idle
     45  31e3		       ce 19 d0 	      dec	$d019
     46  31e6		       20 8e 5e 	      jsr	NETWORK_UPDATE
     47  31e9		       4c 81 ea 	      jmp	$ea81
     48  31ec
     49  31ec							;===========================
     50  31ec							; IRQ - Top
     51  31ec							;===========================
     52  31ec
     53  31ec				   IRQ	      SUBROUTINE
     54  31ec		       d8		      cld
     55  31ed		       85 fc		      sta	savea
     56  31ef		       86 fd		      stx	savex
     57  31f1		       84 fe		      sty	savey
     58  31f3
     59  31f3							;Set gamescreen scrolling
     60  31f3				   rgscr_scrx
     61  31f3		       a9 18		      lda	#$18	; was $17   No scrolling, 40 columns, multicolor
     62  31f5		       8d 16 d0 	      sta	$d016
     63  31f8				   rgscr_scry
     64  31f8		       a9 17		      lda	#$17
     65  31fa		       8d 11 d0 	      sta	$d011
     66  31fd
     67  31fd							;Road Color
     68  31fd		       a9 0b		      lda	#$0b	; Grey
     69  31ff		       8d 21 d0 	      sta	$d021
     70  3202
     71  3202		       a9 ff		      lda	#255
     72  3204		       8d 15 d0 	      sta	$d015
     73  3207							;Put sprites back on screen
     74  3207		       ad c4 31 	      lda	IN_XPOSLOW+1
     75  320a		       8d 02 d0 	      sta	$d002
     76  320d		       ad c5 31 	      lda	IN_XPOSLOW+2
     77  3210		       8d 04 d0 	      sta	$d004
     78  3213		       ad c6 31 	      lda	IN_XPOSLOW+3
     79  3216		       8d 06 d0 	      sta	$d006
     80  3219		       ad c7 31 	      lda	IN_XPOSLOW+4
     81  321c		       8d 08 d0 	      sta	$d008
     82  321f		       ad c8 31 	      lda	IN_XPOSLOW+5
     83  3222		       8d 0a d0 	      sta	$d00a
     84  3225		       ad c9 31 	      lda	IN_XPOSLOW+6
     85  3228		       8d 0c d0 	      sta	$d00c
     86  322b		       ad ca 31 	      lda	IN_XPOSLOW+7
     87  322e		       8d 0e d0 	      sta	$d00e
     88  3231
     89  3231		       ad 84 2d 	      lda	MYXPOS+2
     90  3234		       29 01		      and	#1
     91  3236		       0d db 31 	      ora	IN_XPOS_D010
     92  3239		       8d 10 d0 	      sta	$d010
     93  323c
     94  323c							;Check for network timeout
     95  323c		       ad 5c 5e 	      lda	NET_TIMEDOUT
     96  323f		       f0 03		      beq	checkgame
     97  3241		       4c ba 32 	      jmp	.done
     98  3244
     99  3244				   checkgame
    100  3244							;Don't update game just yet
    101  3244		       ad a8 2b 	      lda	GAMEACTIVE
    102  3247		       d0 03		      bne	dotrack
    103  3249		       4c ba 32 	      jmp	.done
    104  324c
    105  324c				   dotrack
    106  324c							; Change border color to measure IRQ time
      0  324c					      BORDER	$02
      1  324c
      2  324c
    108  324c
    109  324c							;Game Tick
    110  324c							;jsr GAME_TICK
    111  324c
    112  324c							;Sound Tick
    113  324c							;jsr SOUND_TICK
    114  324c
    115  324c							; Find the absolute track position
    116  324c							; 16-bit addition
    117  324c		       18		      clc
    118  324d		       ad b8 34 	      lda	REALTRACKPOS
    119  3250		       6d dc 31 	      adc	VERTSCROLLRATE
    120  3253		       8d b8 34 	      sta	REALTRACKPOS
    121  3256		       ad b9 34 	      lda	REALTRACKPOS+1
    122  3259		       6d dd 31 	      adc	VERTSCROLLRATE+1
    123  325c		       8d b9 34 	      sta	REALTRACKPOS+1
    124  325f		       ad ba 34 	      lda	REALTRACKPOS+2
    125  3262		       69 00		      adc	#$0
    126  3264		       8d ba 34 	      sta	REALTRACKPOS+2
    127  3267
    128  3267							; increment smooth scroll counter based on current speed
    129  3267							; 16-bit addition
    130  3267		       18		      clc
    131  3268		       ad de 31 	      lda	VERTSCROLLFRACTION
    132  326b		       6d dc 31 	      adc	VERTSCROLLRATE
    133  326e		       8d de 31 	      sta	VERTSCROLLFRACTION
    134  3271		       90 17		      bcc	CHECKSCROLL
    135  3273							;lda VERTSCROLL
    136  3273							;adc VERTSCROLLRATE+1
    137  3273							;sta VERTSCROLL
    138  3273		       ee df 31 	      inc	VERTSCROLL
    139  3276
    140  3276							; Animate car sprite when screen scrolls
    141  3276		       ad ab 30 	      lda	CAR_DESTROYED
    142  3279		       d0 0f		      bne	CHECKSCROLL
    143  327b		       ee f8 07 	      inc	sprite1pnt
    144  327e		       ad f8 07 	      lda	sprite1pnt
    145  3281		       c9 26		      cmp	#$26
    146  3283		       d0 05		      bne	CHECKSCROLL
    147  3285		       a9 23		      lda	#$23
    148  3287		       8d f8 07 	      sta	sprite1pnt
    149  328a
    150  328a				   CHECKSCROLL
    151  328a
    152  328a		       ad df 31 	      lda	VERTSCROLL
    153  328d		       c9 08		      cmp	#8
    154  328f		       d0 0a		      bne	set_smooth_scroll	;don't need to shift screen
    155  3291
    156  3291		       a9 00		      lda	#0
    157  3293		       8d df 31 	      sta	VERTSCROLL	;reset smooth scroll
    158  3296
    159  3296		       a9 00		      lda	#$00	; Set that screen can be redrawn now (once)
    160  3298		       8d e0 31 	      sta	DRAWSCREENFLAG
    161  329b
    162  329b				   set_smooth_scroll
    163  329b							; Set current scroll
    164  329b		       a9 10		      lda	#$10	;$d011
    165  329d		       29 f8		      and	#%11111000
    166  329f		       0d df 31 	      ora	VERTSCROLL
    167  32a2		       8d 11 d0 	      sta	$d011
    168  32a5
    169  32a5		       ad df 31 	      lda	VERTSCROLL
    170  32a8		       d0 10		      bne	.done	;screen does not need to be redrawn
    171  32aa
    172  32aa							;Draw new screen pos - only once per 8 pixels!!
    173  32aa		       ad e0 31 	      lda	DRAWSCREENFLAG
    174  32ad		       d0 0b		      bne	.done
    175  32af		       20 f2 33 	      jsr	DRAWSCREEN
    176  32b2		       a9 01		      lda	#$01
    177  32b4		       8d e0 31 	      sta	DRAWSCREENFLAG
    178  32b7		       4c bd 32 	      jmp	.nonetwork	; Don't poll network if screen is scrolled - not enough raster time!
    179  32ba
    180  32ba				   .done
      0  32ba					      BORDER	$06
      1  32ba
      2  32ba
    182  32ba		       20 8e 5e 	      jsr	NETWORK_UPDATE
    183  32bd
    184  32bd				   .nonetwork
      0  32bd					      BORDER	$00
      1  32bd
      2  32bd
    186  32bd
    187  32bd		       a9 d6		      lda	#<IRQ1	;Set vector & raster position
    188  32bf		       8d fe ff 	      sta	$fffe	;for next IRQ
    189  32c2		       a9 32		      lda	#>IRQ1
    190  32c4		       8d ff ff 	      sta	$ffff
    191  32c7		       a9 cd		      lda	#RASTER_PANEL_POS
    192  32c9		       8d 12 d0 	      sta	$d012
    193  32cc		       a5 fc		      lda	savea
    194  32ce		       a6 fd		      ldx	savex
    195  32d0		       a4 fe		      ldy	savey
    196  32d2		       ce 19 d0 	      dec	$d019	;Acknowledge IRQ
    197  32d5				   nmi
    198  32d5		       40		      rti
    199  32d6
    200  32d6							;===========================
    201  32d6							; IRQ - Bottom
    202  32d6							;===========================
    203  32d6
    204  32d6				   IRQ1       SUBROUTINE
    205  32d6		       85 fc		      sta	savea
    206  32d8		       ad 11 d0 	      lda	$d011	;Are we going to hit a bad
    207  32db		       c9 15		      cmp	#$15	;line when setting the
    208  32dd		       f0 0d		      beq	rpanel_badline	;new $d011 & $d018 values?
    209  32df		       a9 17		      lda	#$17
    210  32e1		       8d 11 d0 	      sta	$d011
    211  32e4		       48		      pha		;No, delay
    212  32e5		       68		      pla
    213  32e6		       48		      pha
    214  32e7		       68		      pla
    215  32e8		       ea		      nop
    216  32e9		       ea		      nop
    217  32ea		       ea		      nop
    218  32eb		       ea		      nop
    219  32ec
    220  32ec				   rpanel_badline
    221  32ec		       86 fd		      stx	savex
    222  32ee		       a9 57		      lda	#$57	;Blank screen
    223  32f0		       8d 11 d0 	      sta	$d011
    224  32f3		       84 fe		      sty	savey
    225  32f5				   rpanel_direct
    226  32f5		       d8		      cld
    227  32f6							;inc rastercount
    228  32f6		       a9 00		      lda	#$00	;Set bg.colors
    229  32f8		       8d 21 d0 	      sta	$d021
    230  32fb		       8d 15 d0 	      sta	$d015	;Sprites off
    231  32fe							;lda #PANELMC1
    232  32fe							;sta $d022
    233  32fe							;lda #PANELMC2
    234  32fe							;sta $d023
    235  32fe		       a9 00		      lda	#$0	;All sprites to bottom of
    236  3300							;sta $d001			  ;screen (so that no "ghosts"
    237  3300		       8d 02 d0 	      sta	$d002	;appear when sprites move
    238  3303		       8d 04 d0 	      sta	$d004	;downwards)
    239  3306		       8d 06 d0 	      sta	$d006
    240  3309		       8d 08 d0 	      sta	$d008
    241  330c		       8d 0a d0 	      sta	$d00a
    242  330f		       8d 0c d0 	      sta	$d00c
    243  3312		       8d 0e d0 	      sta	$d00e
    244  3315		       8d 10 d0 	      sta	$d010
    245  3318		       a9 31		      lda	#<IRQ2	;Set vector & raster position
    246  331a		       8d fe ff 	      sta	$fffe	;for next IRQ
    247  331d		       a9 33		      lda	#>IRQ2
    248  331f		       8d ff ff 	      sta	$ffff
    249  3322		       a9 d7		      lda	#RASTER_PANEL2_POS
    250  3324		       8d 12 d0 	      sta	$d012
    251  3327		       a5 fc		      lda	savea
    252  3329		       a6 fd		      ldx	savex
    253  332b		       a4 fe		      ldy	savey
    254  332d		       ce 19 d0 	      dec	$d019
    255  3330		       40		      rti
    256  3331
    257  3331				   IRQ2
    258  3331		       d8		      cld
    259  3332		       85 fc		      sta	savea
    260  3334		       86 fd		      stx	savex
    261  3336		       84 fe		      sty	savey
    262  3338		       a9 17		      lda	#$17	;Screen visible now
    263  333a		       8d 11 d0 	      sta	$d011
    264  333d		       a9 08		      lda	#$08	; No scrolling, 40 columns, no multicolor
    265  333f		       8d 16 d0 	      sta	$d016	;X-scrolling in place
    266  3342		       a9 37		      lda	#$37
    267  3344		       85 01		      sta	$1
    268  3346
    269  3346							;------------------------------------------
    270  3346							; Status Display
    271  3346
    272  3346							;Damage
    273  3346		       a2 00		      ldx	#$00
    274  3348		       ac 7d 2d 	      ldy	DAMAGE
    275  334b		       f0 20		      beq	SHOWSPEED	;Zero
    276  334d		       8c e1 31 	      sty	DAMAGETEMP
    277  3350
    278  3350							;Solid bars
    279  3350		       38		      sec
    280  3351				   d1
    281  3351		       ad e1 31 	      lda	DAMAGETEMP
    282  3354		       e9 08		      sbc	#$08
    283  3356		       30 0c		      bmi	d2
    284  3358		       8d e1 31 	      sta	DAMAGETEMP
    285  335b		       a9 80		      lda	#$80
    286  335d		       9d 89 07 	      sta	DAMAGEBAR,x
    287  3360		       e8		      inx
    288  3361		       4c 51 33 	      jmp	d1
    289  3364
    290  3364				   d2
    291  3364		       ac e1 31 	      ldy	DAMAGETEMP
    292  3367		       b9 9f 34 	      lda	DAMAGEPORTION,y
    293  336a		       9d 89 07 	      sta	DAMAGEBAR,x
    294  336d
    295  336d				   SHOWSPEED
    296  336d							; Clear out bar first
    297  336d		       a9 20		      lda	#$20	;Space
    298  336f		       a2 09		      ldx	#$09
    299  3371				   sp0
    300  3371		       9d 76 07 	      sta	SPEEDBAR-1,x
    301  3374		       ca		      dex
    302  3375		       d0 fa		      bne	sp0
    303  3377
    304  3377		       a2 00		      ldx	#$00
    305  3379		       ad dc 31 	      lda	MY_SPEED
    306  337c		       f0 23		      beq	SHOWSCORE	;Zero
    307  337e		       4a		      lsr
    308  337f		       4a		      lsr
    309  3380		       a8		      tay
    310  3381		       8c e2 31 	      sty	SPEEDTEMP
    311  3384
    312  3384							;Solid bars
    313  3384		       38		      sec
    314  3385				   sp1
    315  3385		       ad e2 31 	      lda	SPEEDTEMP
    316  3388		       e9 08		      sbc	#$08
    317  338a		       30 0c		      bmi	sp2
    318  338c		       8d e2 31 	      sta	SPEEDTEMP
    319  338f		       a9 80		      lda	#$80
    320  3391		       9d 77 07 	      sta	SPEEDBAR,x
    321  3394		       e8		      inx
    322  3395		       4c 85 33 	      jmp	sp1
    323  3398
    324  3398				   sp2
    325  3398		       ac e2 31 	      ldy	SPEEDTEMP
    326  339b		       b9 9f 34 	      lda	DAMAGEPORTION,y
    327  339e		       9d 77 07 	      sta	SPEEDBAR,x
    328  33a1
    329  33a1				   SHOWSCORE
    330  33a1		       20 d0 33 	      jsr	DISPLAYSCORE
    331  33a4				   SHOWCARS
    332  33a4		       18		      clc
    333  33a5		       ad 7e 2d 	      lda	CARS
    334  33a8		       69 30		      adc	#$30	;Map to screen code
    335  33aa		       8d b1 07 	      sta	CARSLOC
    336  33ad
    337  33ad				   STATSDONE
    338  33ad							;Game Tick
    339  33ad		       20 87 2d 	      jsr	GAME_TICK
    340  33b0
    341  33b0							;Sound Tick
    342  33b0		       20 b5 5a 	      jsr	SOUND_TICK
    343  33b3
    344  33b3
    345  33b3		       a9 35		      lda	#$35
    346  33b5		       85 01		      sta	$1
    347  33b7
    348  33b7		       a9 ec		      lda	#<IRQ	;Set vector & raster position
    349  33b9		       8d fe ff 	      sta	$fffe	;for next IRQ
    350  33bc		       a9 31		      lda	#>IRQ
    351  33be		       8d ff ff 	      sta	$ffff
    352  33c1		       a9 fa		      lda	#RASTER_GSCREEN_POS
    353  33c3		       8d 12 d0 	      sta	$d012
    354  33c6		       a5 fc		      lda	savea
    355  33c8		       a6 fd		      ldx	savex
    356  33ca		       a4 fe		      ldy	savey
    357  33cc		       ce 19 d0 	      dec	$d019
    358  33cf		       40		      rti
    359  33d0
    360  33d0							;===========================
    361  33d0				   DISPLAYSCORE 		;display BCD score
    362  33d0							;===========================
    363  33d0
    364  33d0		       a2 00		      ldx	#0
    365  33d2		       a0 02		      ldy	#2
    366  33d4
    367  33d4		       b9 7f 2d    .loop      lda	SCORE,y
    368  33d7		       4a		      lsr
    369  33d8		       4a		      lsr
    370  33d9		       4a		      lsr
    371  33da		       4a		      lsr
    372  33db		       18		      clc
    373  33dc		       69 30		      adc	#$30
    374  33de		       9d 9f 07 	      sta	SCORELOC,x
    375  33e1		       e8		      inx
    376  33e2
    377  33e2		       b9 7f 2d 	      lda	SCORE,y
    378  33e5		       29 0f		      and	#$0f
    379  33e7		       18		      clc
    380  33e8		       69 30		      adc	#$30
    381  33ea		       9d 9f 07 	      sta	SCORELOC,x
    382  33ed		       e8		      inx
    383  33ee
    384  33ee		       88		      dey
    385  33ef		       10 e3		      bpl	.loop
    386  33f1
    387  33f1		       60		      rts
    388  33f2
    389  33f2							;===========================
    390  33f2							; Screen Draw routine
    391  33f2							;===========================
    392  33f2
    393  33f2				   DRAWSCREEN SUBROUTINE
    394  33f2
    395  33f2							; This earns 1 point!
    396  33f2		       a9 01		      lda	#01
    397  33f4		       a2 00		      ldx	#00
    398  33f6		       20 89 2f 	      jsr	INCSCORE
    399  33f9
    400  33f9				   DRAWSCREEN1
    401  33f9							;move position in track - maybe later a camera routine will handle this
    402  33f9		       38		      sec
    403  33fa		       ad b6 34 	      lda	TRACKPOS
    404  33fd		       e9 28		      sbc	#40
    405  33ff		       8d b6 34 	      sta	TRACKPOS
    406  3402		       ad b7 34 	      lda	TRACKPOS+1
    407  3405		       e9 00		      sbc	#0
    408  3407		       8d b7 34 	      sta	TRACKPOS+1
    409  340a
    410  340a							; Check if we're at the start, and reset if so
    411  340a		       ad b6 34 	      lda	TRACKPOS
    412  340d		       c9 bb		      cmp	#<TRACK
    413  340f		       d0 2a		      bne	PREPSCROLL
    414  3411		       ad b7 34 	      lda	TRACKPOS+1
    415  3414		       c9 34		      cmp	#>TRACK
    416  3416		       d0 23		      bne	PREPSCROLL
    417  3418
    418  3418							; -----------------------------------
    419  3418							; Finished a lap
    420  3418
    421  3418							; This earns 1000 points!
    422  3418							;lda #<1000  ; Decimal
    423  3418							;ldx #>1000
    424  3418		       a9 00		      lda	#00
    425  341a		       a2 0a		      ldx	#10	; BCD 1000
    426  341c		       20 89 2f 	      jsr	INCSCORE
    427  341f		       20 1a 5b 	      jsr	SOUND_LAP
    428  3422
    429  3422							; And takes off 20 damage
    430  3422		       38		      sec
    431  3423		       ad 7d 2d 	      lda	DAMAGE
    432  3426		       e9 14		      sbc	#20	;Decimal
    433  3428		       30 06		      bmi	damage0
    434  342a
    435  342a		       8d 7d 2d 	      sta	DAMAGE
    436  342d		       4c 35 34 	      jmp	rok
    437  3430
    438  3430				   damage0
    439  3430		       a9 00		      lda	#$00
    440  3432		       8d 7d 2d 	      sta	DAMAGE
    441  3435							;drop thru
    442  3435
    443  3435				   rok
    444  3435		       20 94 34 	      jsr	RESETDAMAGEBAR
    445  3438		       20 7e 34 	      jsr	RESETTRACK
    446  343b
    447  343b				   PREPSCROLL
    448  343b							;prepare to do scroll
    449  343b		       ad b6 34 	      lda	TRACKPOS
    450  343e		       8d 56 34 	      sta	.sm1+1
    451  3441		       ad b7 34 	      lda	TRACKPOS+1
    452  3444		       8d 57 34 	      sta	.sm1+2
    453  3447
    454  3447		       a9 00		      lda	#<SCREEN
    455  3449		       8d 59 34 	      sta	.sm2+1
    456  344c		       a9 04		      lda	#>SCREEN
    457  344e		       8d 5a 34 	      sta	.sm2+2
    458  3451
    459  3451		       a0 14		      ldy	#20	;rows to draw
    460  3453		       a2 27	   .loop1     ldx	#39	;columns
    461  3455		       bd ff ff    .sm1       lda	$ffff,x	;track map data
    462  3458		       9d ff ff    .sm2       sta	$ffff,x	;screen position
    463  345b		       ca		      dex
    464  345c		       10 f7		      bpl	.sm1
    465  345e
    466  345e							;set up for next row of screen and track
    467  345e		       18		      clc
    468  345f		       ad 56 34 	      lda	.sm1+1
    469  3462		       69 28		      adc	#40
    470  3464		       8d 56 34 	      sta	.sm1+1
    471  3467		       90 03		      bcc	.ahead1
    472  3469		       ee 57 34 	      inc	.sm1+2
    473  346c
    474  346c		       18	   .ahead1    clc
    475  346d		       ad 59 34 	      lda	.sm2+1
    476  3470		       69 28		      adc	#40
    477  3472		       8d 59 34 	      sta	.sm2+1
    478  3475		       90 03		      bcc	.ahead2
    479  3477		       ee 5a 34 	      inc	.sm2+2
    480  347a
    481  347a		       88	   .ahead2    dey
    482  347b		       d0 d6		      bne	.loop1
    483  347d		       60		      rts
    484  347e
    485  347e							;-----------------------------------------
    486  347e							;set start position for track scroll
    487  347e							;-----------------------------------------
    488  347e				   RESETTRACK
    489  347e		       a9 23		      lda	#<START_POINT
    490  3480		       8d b6 34 	      sta	TRACKPOS
    491  3483		       a9 54		      lda	#>START_POINT
    492  3485		       8d b7 34 	      sta	TRACKPOS+1
    493  3488
    494  3488		       a9 00		      lda	#$00
    495  348a		       8d b8 34 	      sta	REALTRACKPOS
    496  348d		       8d b9 34 	      sta	REALTRACKPOS+1
    497  3490		       8d ba 34 	      sta	REALTRACKPOS+2	; Reaches max of 1591 - why?
    498  3493		       60		      rts
    499  3494
    500  3494
    501  3494							;-------------------------
    502  3494							; Clear damage bar
    503  3494				   RESETDAMAGEBAR
    504  3494		       a0 0e		      ldy	#14
    505  3496		       a9 20		      lda	#$20
    506  3498				   r1
    507  3498		       99 88 07 	      sta	DAMAGEBAR-1,y
    508  349b		       88		      dey
    509  349c		       d0 fa		      bne	r1
    510  349e		       60		      rts
    511  349f
    512  349f							;-----------------------------------------
    513  349f							;lookup for damage bar
    514  349f				   DAMAGEPORTION
    515  349f		       20 81 82 83*	      .byte.b	$20,$81,$82,$83,$84,$85,$86,$87,$88
    516  34a8
    517  34a8							;-----------------------------------------
    518  34a8							; Colors of the damage bar (no multicolor)
    519  34a8				   DAMAGEBARCOLORS
    520  34a8		       05 05 05 05*	      .byte.b	5,5,5,5,5,7,7,7,7,7,2,2,2,2
    521  34b6
    522  34b6							;-----------------------------------------
    523  34b6							;Track position in memory
    524  34b6		       00 00	   TRACKPOS   dc.b	0,0
    525  34b8
    526  34b8							; Absolute track postion 0-2000, to be be transmitted to server
    527  34b8				   REALTRACKPOS
    528  34b8		       00		      dc.b	0	;(fraction, not sent)
    529  34b9		       00 00		      dc.b	0,0
    530  34bb
    531  34bb				   TRACK
    532  34bb		       4c 41 41 41*	      dc.b	"LAAAAAB			  JAAAAAAL"
    533  34e3		       4c 41 41 41*	      dc.b	"LAAAAB			  JAAAAAAL"
    534  350b		       4c 41 41 41*	      dc.b	"LAAAB 			  JAAAAAAL"
    535  3533		       4c 41 41 42*	      dc.b	"LAAB				  JAAAAAAL"
    536  355b		       4c 41 42 20*	      dc.b	"LAB				  JAAAAAAL"
    537  3583		       4c 42 20 20*	      dc.b	"LB				  JAAAAAAL"
    538  35ab		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    539  35d3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    540  35fb		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    541  3623		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    542  364b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    543  3673		       4b 20 20 20*	      dc.b	"K				  SPPPPPPP"
    544  369b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    545  36c3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    546  36eb		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    547  3713		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    548  373b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    549  3763		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    550  378b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    551  37b3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    552  37db		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    553  3803		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    554  382b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    555  3853		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    556  387b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    557  38a3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"	;END  LINE 731
    558  38cb							; Above must match from START_POINT onward  - TODO move to a common include file
    559  38cb		       4c 49 4d 20*	      dc.b	"LIM				 NAAAAAAAL"
    560  38f3		       4c 41 41 4d*	      dc.b	"LAAM				 JAAAAAAAL"
    561  391b		       4c 41 41 41*	      dc.b	"LAAAM 			 JAAAAAAAL"
    562  3943		       4c 41 4f 41*	      dc.b	"LAOAAM			 JAAAAAOAL"
    563  396b		       4c 41 41 41*	      dc.b	"LAAAAAM			 JAAAAAAAL"
    564  3993		       4c 41 41 41*	      dc.b	"LAAAAAAM			 JAAAAAAAL"
    565  39bb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    566  39e3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    567  3a0b		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    568  3a33		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    569  3a5b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    570  3a83		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    571  3aab		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    572  3ad3		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    573  3afb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    574  3b23		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    575  3b4b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    576  3b73		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    577  3b9b		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    578  3bc3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    579  3beb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    580  3c13		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    581  3c3b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    582  3c63		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    583  3c8b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    584  3cb3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    585  3cdb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    586  3d03		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    587  3d2b		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    588  3d53		       4c 41 41 41*	      dc.b	"LAAAAAAK			 CAAAAAAAL"
    589  3d7b		       4c 41 41 41*	      dc.b	"LAAAAAAK			  CAAAAAAL"
    590  3da3		       4c 41 41 41*	      dc.b	"LAAAAAAK			   CAAAAAL"
    591  3dcb		       4c 41 41 41*	      dc.b	"LAAAAAAK			    CAAAAL"
    592  3df3		       4c 41 41 41*	      dc.b	"LAAAAAAK			     CAAAL"
    593  3e1b		       4c 41 41 41*	      dc.b	"LAAAAAAK			      JAAL"
    594  3e43		       4c 41 41 41*	      dc.b	"LAAAAAAB			      JAAL"
    595  3e6b		       4c 41 41 41*	      dc.b	"LAAAAAB			      JAAL"
    596  3e93		       4c 41 41 41*	      dc.b	"LAAAAK	   GIIIIIIH	      JAAL"
    597  3ebb		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    598  3ee3		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    599  3f0b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    600  3f33		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    601  3f5b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    602  3f83		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    603  3fab		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    604  3fd3		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    605  3ffb		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    606  4023		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    607  404b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    608  4073		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    609  409b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    610  40c3		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    611  40eb		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    612  4113		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    613  413b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    614  4163		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    615  418b		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    616  41b3		       4c 41 41 41*	      dc.b	"LAAAAK	   JAAAAAAK	      JAAL"
    617  41db		       4c 41 41 41*	      dc.b	"LAAAAK	   CAAAAAAB	      JAAL"
    618  4203		       4c 41 41 41*	      dc.b	"LAAAAK	    CAAAAB	      JAAL"
    619  422b		       4c 41 41 41*	      dc.b	"LAAAAK	     CAAB	      JAAL"
    620  4253		       4c 41 41 41*	      dc.B	"LAAAAAM	      CB	      JAAL"
    621  427b		       4c 41 41 41*	      dc.b	"LAAAAAAM			      JAAL"
    622  42a3		       4c 41 41 41*	      dc.b	"LAAAAAAK			      JAAL"
    623  42cb		       4c 41 41 41*	      dc.b	"LAAAAAAAM			      JAAL"
    624  42f3		       4c 41 41 41*	      dc.b	"LAAAAAAAAM			      JAAL"
    625  431b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAM			      JAAL"
    626  4343		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAM			      JAAL"
    627  436b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAM 		      JAOL"
    628  4393		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAM		      JAAL"
    629  43bb		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAM		      JAAL"
    630  43e3		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAAM		      JAAL"
    631  440b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAAB		      JAAL"
    632  4433		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAB		      JAAL"
    633  445b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAK		      JAAL"
    634  4483		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAK		     NAAAL"
    635  44ab		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAB		     JAAAL"
    636  44d3		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAB 		    NAAAAL"
    637  44fb		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAB			    JAAAAL"
    638  4523		       4c 41 41 41*	      dc.b	"LAAAAAAAAAB			    JAAAAL"
    639  454b		       4c 41 41 41*	      dc.b	"LAAAAAAAAB			   NAAAAAL"
    640  4573		       4c 41 41 41*	      dc.b	"LAAAAAAAB			  NAAAAAAL"
    641  459b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 NAAAAAAAL"
    642  45c3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    643  45eb		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    644  4613		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    645  463b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    646  4663		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    647  468b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    648  46b3		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    649  46db		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    650  4703		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    651  472b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    652  4753		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    653  477b		       4c 41 4f 41*	      dc.b	"LAOAAAAK			 JAAAAAOAL"
    654  47a3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    655  47cb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    656  47f3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    657  481b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    658  4843		       4c 41 4f 41*	      dc.b	"LAOAAOAK			 JAAOAAOAL"
    659  486b		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    660  4893		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    661  48bb		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    662  48e3		       4c 41 41 41*	      dc.b	"LAAAAAAK			 JAAAAAAAL"
    663  490b		       4c 41 4f 56*	      dc.b	"LAOVAAAAIIIM		NIIIIIIIIAAAWAAOAL"
    664  4933		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    665  495b		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    666  4983		       4c 41 41 56*	      Dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    667  49ab		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    668  49d3		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    669  49fb		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    670  4a23		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    671  4a4b		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    672  4a73		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    673  4a9b		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    674  4ac3		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAK		JAAAAAAAAAAAWAAAAL"
    675  4aeb		       4c 41 41 56*	      dc.b	"LAAVAAAAAAAB		JAAAAAAAAAAAWAAAAL"
    676  4b13		       4c 41 41 41*	      dc.b	"LAAAAAAAAAB		CAAAAAAAAAAAAAAAAL"
    677  4b3b		       4c 41 41 41*	      dc.b	"LAAAAAAAAB		 CAAAAAAAAAAAAAAAL"
    678  4b63		       4c 41 41 41*	      dc.b	"LAAAAAAAB		  CAAAAAAAAAAAAAAL"
    679  4b8b		       4c 41 41 41*	      dc.b	"LAAAAAAK		   CAAAAAAAAAAAAAL"
    680  4bb3		       4c 41 41 41*	      dc.b	"LAAAAAAK		    CAAAAAAAAAAAAL"
    681  4bdb		       4c 41 41 41*	      dc.b	"LAAAAAAK		     CAAAAAAAAAAAL"
    682  4c03		       4c 41 41 41*	      dc.b	"LAAAAAAK		      CAAAAAAAAAAL"
    683  4c2b		       4c 41 41 41*	      dc.b	"LAAAAAAK		       CAAAAAAAAAL"
    684  4c53		       4c 41 41 41*	      dc.b	"LAAAAAAK			CAAAAAAAAL"
    685  4c7b		       4c 41 41 41*	      dc.b	"LAAAAAAB			 JAAAAAAAL"
    686  4ca3		       4c 41 41 41*	      dc.b	"LAAAAAB			 JAAAAAAAL"
    687  4ccb		       4c 41 41 41*	      dc.b	"LAAAAB			 JAAAAAAAL"
    688  4cf3		       4c 41 41 41*	      dc.b	"LAAAB 			 JAAAAAAAL"
    689  4d1b		       4c 41 41 42*	      dc.b	"LAAB				 JAAAAAAAL"
    690  4d43		       4c 41 4b 20*	      dc.b	"LAK				 JAAAAAAAL"
    691  4d6b		       4c 41 4b 20*	      dc.b	"LAK				 JAAAAAAAL"
    692  4d93		       4c 41 4b 20*	      dc.b	"LAK	      NM		 JAAAAAAAL"
    693  4dbb		       4c 41 4b 20*	      dc.b	"LAK	     NAAM		 JAAAAAAAL"
    694  4de3		       4c 41 4b 20*	      dc.b	"LAK	    NAAAAM		 JAAAAAAAL"
    695  4e0b		       4c 41 4b 20*	      dc.b	"LAK	   NAAAAAAM		NAAAAAAAAL"
    696  4e33		       4c 41 4b 20*	      dc.b	"LAK	   JAOAAOAK	       NAAAAAAAAAL"
    697  4e5b		       4c 41 4b 20*	      dc.b	"LAK	   JAAAAAAK	      NAAAAAAAAAAL"
    698  4e83		       4c 41 4b 20*	      dc.b	"LAK	   JAOAAOAK	     NAAAAAAAAAAAL"
    699  4eab		       4c 41 4b 20*	      dc.b	"LAK	   CAAAAAAB	    NAAAAAAAAAAAAL"
    700  4ed3		       4c 41 4b 20*	      dc.b	"LAK	    CAAAAB	   NAAAAAAAAAAAAAL"
    701  4efb		       4c 41 4b 20*	      dc.b	"LAK	     CAAB	  NAAAAAAAAAAAAAAL"
    702  4f23		       4c 41 4b 20*	      dc.b	"LAK	      CB	 NAAAAAAAAAAAAAAAL"
    703  4f4b		       4c 41 4b 20*	      dc.b	"LAK			NAAAAAAAAAAAAAAAAL"
    704  4f73		       4c 41 41 4d*	      dc.b	"LAAM			JAAAAAAAAAAAAAAAAL"
    705  4f9b		       4c 41 41 41*	      dc.b	"LAAAM 		JAAAAAAAAAAAAAAAAL"
    706  4fc3		       4c 41 41 41*	      dc.b	"LAAAAM		JAAAAAAAAAAAAAAAAL"
    707  4feb		       4c 41 41 41*	      dc.b	"LAAAAAM		CAAAAAAAAAAAAAAAAL"
    708  5013		       4c 41 41 41*	      dc.b	"LAAAAAAM		 CAAAAAAAAAAAAAAAL"
    709  503b		       4c 41 41 41*	      dc.b	"LAAAAAAAM		  CAAAAAAAAAAAAAAL"
    710  5063		       4c 41 41 41*	      dc.b	"LAAAAAAAAM		   CAAAAAAAAAAAAAL"
    711  508b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAM		    CAAAAAAAAAAAAL"
    712  50b3		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAM		     CAAAAAAAAAAAL"
    713  50db		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAM 	      CAAAAAAAAAAL"
    714  5103		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAM	       CAAAAAAAAAL"
    715  512b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAM		CAAAAAAAAL"
    716  5153		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAK		 CAAAAAAAL"
    717  517b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAK		  CAAAAAAL"
    718  51a3		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAK		   CAAAAAL"
    719  51cb		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAK		    CAAAAL"
    720  51f3		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAK		     CAAAL"
    721  521b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAAB		      JAAL"
    722  5243		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAAB		      JAAL"
    723  526b		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAAB 		      JAAL"
    724  5293		       4c 41 41 41*	      dc.b	"LAAAAAAAAAAB			      JAAL"
    725  52bb		       4c 41 41 41*	      dc.b	"LAAAAAAAAAB			     NAAAL"
    726  52e3		       4c 41 41 41*	      dc.b	"LAAAAAAAAB			    NAAAAL"
    727  530b		       4c 41 41 41*	      dc.b	"LAAAAAAAB			    JAAAAL"
    728  5333		       4c 41 41 41*	      dc.b	"LAAAAAAK			    JAAAAL"
    729  535b		       4c 41 41 41*	      dc.b	"LAAAAAAK			   NAAAAAL"
    730  5383		       4c 41 41 41*	      dc.b	"LAAAAAAK			   JAAAAAL"
    731  53ab		       4c 41 41 41*	      dc.b	"LAAAAAAK			   JAAAAAL"
    732  53d3		       4c 41 41 41*	      dc.b	"LAAAAAAK			   JAAAAAL"
    733  53fb		       4c 41 41 41*	      dc.b	"LAAAAAAB			  NAAAAAAL"
    734  5423				   START_POINT
    735  5423		       4c 41 41 41*	      dc.b	"LAAAAAB			  JAAAAAAL"
    736  544b		       4c 41 41 41*	      dc.b	"LAAAAB			  JAAAAAAL"
    737  5473		       4c 41 41 41*	      dc.b	"LAAAB 			  JAAAAAAL"
    738  549b		       4c 41 41 42*	      dc.b	"LAAB				  JAAAAAAL"
    739  54c3		       4c 41 42 20*	      dc.b	"LAB				  JAAAAAAL"
    740  54eb		       4c 42 20 20*	      dc.b	"LB				  JAAAAAAL"
    741  5513		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    742  553b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    743  5563		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    744  558b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    745  55b3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    746  55db		       4b 20 20 20*	      dc.b	"K				  SPPPPPPP"
    747  5603		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    748  562b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    749  5653		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    750  567b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    751  56a3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    752  56cb		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    753  56f3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    754  571b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    755  5743		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    756  576b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    757  5793		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    758  57bb		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    759  57e3		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"
    760  580b		       4b 20 20 20*	      dc.b	"K				  JAAAAAAL"	;END  LINE 737
------- FILE racer-main.asm
------- FILE racer-graphics.asm LEVEL 2 PASS 2
      0  5833					      include	"racer-graphics.asm"
      1  5833							; Sprites and graphics
      2  5833
      3  5833		       db bf	   COMMSLED   =	$DBBF
      4  5833
      5  5833		       d0 00	   sprite1x   =	$D000
      6  5833		       d0 01	   sprite1y   =	$D001
      7  5833		       d0 02	   sprite2x   =	$D002
      8  5833		       d0 03	   sprite2y   =	$D003
      9  5833		       d0 04	   sprite3x   =	$D004
     10  5833		       d0 05	   sprite3y   =	$D005
     11  5833		       d0 06	   sprite4x   =	$D006
     12  5833		       d0 07	   sprite4y   =	$D007
     13  5833		       d0 08	   sprite5x   =	$D008
     14  5833		       d0 09	   sprite5y   =	$D009
     15  5833		       d0 0a	   sprite6x   =	$D00A
     16  5833		       d0 0b	   sprite6y   =	$D00B
     17  5833		       d0 0c	   sprite7x   =	$D00C
     18  5833		       d0 0d	   sprite7y   =	$D00D
     19  5833		       d0 0e	   sprite8x   =	$D00E
     20  5833		       d0 0f	   sprite8y   =	$D00F
     21  5833
     22  5833		       07 f8	   sprite1pnt =	$07f8
     23  5833		       07 f9	   sprite2pnt =	$07f9
     24  5833		       07 fa	   sprite3pnt =	$07fa
     25  5833		       07 fb	   sprite4pnt =	$07fb
     26  5833		       07 fc	   sprite5pnt =	$07fc
     27  5833		       07 fd	   sprite6pnt =	$07fd
     28  5833		       07 fe	   sprite7pnt =	$07fe
     29  5833		       07 ff	   sprite8pnt =	$07ff
     30  5833
     31  5833		       d0 27	   sprite1color =	$D027
     32  5833		       d0 28	   sprite2color =	$D028
     33  5833		       d0 29	   sprite3color =	$D029
     34  5833		       d0 2a	   sprite4color =	$D02A
     35  5833		       d0 2b	   sprite5color =	$D02B
     36  5833		       d0 2c	   sprite6color =	$D02C
     37  5833		       d0 2d	   sprite7color =	$D02D
     38  5833		       d0 2e	   sprite8color =	$D02E
     39  5833
     40  5833				   MY_COLOR
     41  5833		       00		      .byte.b	$00
     42  5834
     43  5834							;------------------------------------------------------------------------------
     44  5834							; We are using these sprites:
     45  5834							; #1	 = My Car
     46  5834							; #2-#7 = Other cars, as defined by server
     47  5834							; #8	 = Repair points
     48  5834
     49  5834				   SETUPSPRITES
     50  5834		       a9 ff		      lda	#$FF	; All
     51  5836		       8d 15 d0 	      sta	$D015
     52  5839
     53  5839							; My default location
     54  5839		       ae 82 2d 	      ldx	MYXPOS
     55  583c		       a0 96		      ldy	#150
     56  583e		       8e 00 d0 	      stx	sprite1x
     57  5841		       8c 01 d0 	      sty	sprite1y
     58  5844
     59  5844							;This also uses sprite multicolors, so set them here
     60  5844		       a9 01		      lda	#$01
     61  5846		       8d 25 d0 	      sta	$d025
     62  5849		       a9 00		      lda	#$00
     63  584b		       8d 26 d0 	      sta	$d026
     64  584e
     65  584e							;Sprite pointers
     66  584e		       a9 23		      lda	#$23
     67  5850		       8d f8 07 	      sta	sprite1pnt
     68  5853		       8d f9 07 	      sta	sprite2pnt
     69  5856		       8d fa 07 	      sta	sprite3pnt
     70  5859		       8d fb 07 	      sta	sprite4pnt
     71  585c		       8d fc 07 	      sta	sprite5pnt
     72  585f		       8d fd 07 	      sta	sprite6pnt
     73  5862		       8d fe 07 	      sta	sprite7pnt
     74  5865		       8d ff 07 	      sta	sprite8pnt
     75  5868
     76  5868							;Set Multicolors
     77  5868		       a9 ff		      lda	#$FF
     78  586a		       8d 1c d0 	      sta	$d01c
     79  586d
     80  586d							;Sprite Colors
     81  586d		       a0 00		      ldy	#$00
     82  586f				   col1
     83  586f		       b9 81 58 	      lda	CARCOLORS,y
     84  5872		       99 27 d0 	      sta	sprite1color,y
     85  5875		       c8		      iny
     86  5876		       c0 09		      cpy	#$09
     87  5878		       d0 f5		      bne	col1
     88  587a
     89  587a							; Clear sprite collision registers by reading them
     90  587a		       ad 1e d0 	      lda	$d01e	; sprite-sprite
     91  587d		       ad 1f d0 	      lda	$d01f	; background
     92  5880
     93  5880		       60		      rts
     94  5881
     95  5881							; ---------------------
     96  5881							; Car colors
     97  5881				   CARCOLORS
     98  5881		       02 03 04 05	      .byte.b	$02,$03,$04,$05
     99  5885		       06 07 08 0e	      .byte.b	$06,$07,$08,$0e
------- FILE racer-main.asm
------- FILE racer-soundfx.asm LEVEL 2 PASS 2
      0  5889					      include	"racer-soundfx.asm"
      1  5889							; Sound Effects
      2  5889
      3  5889							;------------------------------------------------------------------------------
      4  5889							; Setup - clear sound chip and set maximum volume!
      5  5889
      6  5889				   SOUND_SETUP
      7  5889		       a2 00		      ldx	#$00
      8  588b		       8a		      txa
      9  588c				   SETUP1
     10  588c		       9d 00 d4 	      sta	$d400,x
     11  588f		       e8		      inx
     12  5890		       e0 19		      cpx	#$19
     13  5892		       d0 f8		      bne	SETUP1
     14  5894
     15  5894		       a9 0f		      lda	#$0f
     16  5896		       8d 18 d4 	      sta	$d418
     17  5899
     18  5899							;Set up sawtooth for Voice 1 (boring)
     19  5899		       a9 f0		      lda	#$f0
     20  589b		       8d 06 d4 	      sta	$d406
     21  589e		       a9 21		      lda	#$21
     22  58a0		       8d 04 d4 	      sta	$d404
     23  58a3		       60		      rts
     24  58a4
     25  58a4
     26  58a4							;------------------------------------------------------------------------------
     27  58a4							; Engine Sound - use Voice 1
     28  58a4				   SOUND_ENGINE
     29  58a4		       ac dc 31 	      ldy	MY_SPEED
     30  58a7		       b9 b4 58 	      lda	SPEEDHI,y
     31  58aa		       8d 01 d4 	      sta	$d401
     32  58ad		       b9 b4 59 	      lda	SPEEDLO,y
     33  58b0		       8d 00 d4 	      sta	$d400
     34  58b3		       60		      rts
     35  58b4
     36  58b4				   SPEEDHI
     37  58b4		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
     38  58d7		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2
     39  58fa		       02 02 02 02*	      .byte.b	2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     40  591d		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3
     41  5940		       03 03 03 03*	      .byte.b	3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,4,4,4,4
     42  5963		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
     43  5986		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
     44  59a9		       04 04 04 04*	      .byte.b	4,4,4,4,4,4,4,4,4,4,4
     45  59b4
     46  59b4				   SPEEDLO
     47  59b4		       00 03 06 09*	      .byte.b	0,3,6,9,12,15,18,21,24,27,30,33,36,39,42,45,48,51,54,57,60,63,66,69
     48  59cc		       48 4b 4e 51*	      .byte.b	72,75,78,81,84,87,90,93,96,99,102,105,108,111,114,117,120,123,126,129
     49  59e0		       84 87 8a 8d*	      .byte.b	132,135,138,141,144,147,150,153,156,159,162,165,168,171,174,177,180
     50  59f1		       b7 ba bd c0*	      .byte.b	183,186,189,192,195,198,201,204,207,210,213,216,219,222,225,228,231
     51  5a02		       ea ed f0 f3*	      .byte.b	234,237,240,243,246,249,252,255,2,5,8,11,14,17,20,23,26,29,32,35,38
     52  5a17		       29 2c 2f 32*	      .byte.b	41,44,47,50,53,56,59,62,65,68,71,74,77,80,83,86,89,92,95,98,101,104
     53  5a2d		       6b 6e 71 74*	      .byte.b	107,110,113,116,119,122,125,128,131,134,137,140,143,146,149,152,155
     54  5a3e		       9e a1 a4 a7*	      .byte.b	158,161,164,167,170,173,176,179,182,185,188,191,194,197,200,203,206
     55  5a4f		       d1 d4 d7 da*	      .byte.b	209,212,215,218,221,224,227,230,233,236,239,242,245,248,251,254,1,4
     56  5a61		       07 0a 0d 10*	      .byte.b	7,10,13,16,19,22,25,28,31,34,37,40,43,46,49,52,55,58,61,64,67,70,73
     57  5a78		       4c 4f 52 55*	      .byte.b	76,79,82,85,88,91,94,97,100,103,106,109,112,115,118,121,124,127,130
     58  5a8b		       85 88 8b 8e*	      .byte.b	133,136,139,142,145,148,151,154,157,160,163,166,169,172,175,178,181
     59  5a9c		       b8 bb be c1*	      .byte.b	184,187,190,193,196,199,202,205,208,211,214,217,220,223,226,229,232
     60  5aad		       eb ee f1 f4*	      .byte.b	235,238,241,244,247,250,253
     61  5ab4
     62  5ab4
     63  5ab4							;------------------------------------------------------------------------------
     64  5ab4							; Called from within the IRQ.	Handles hard restart and retrigger timing.
     65  5ab4
     66  5ab4							;Number of frames between hard restart
     67  5ab4				   SOUND_SIDECOUNT
     68  5ab4		       02		      .byte.b	$02
     69  5ab5
     70  5ab5				   SOUND_TICK
     71  5ab5		       60		      rts		;!!!!
     72  5ab6		       ad b4 5a 	      lda	SOUND_SIDECOUNT	; Already at 0?  If so, leave it.
     73  5ab9		       f0 08		      beq	SOUND_TICK_x
     74  5abb
     75  5abb		       ce b4 5a 	      dec	SOUND_SIDECOUNT	; Decrement.
     76  5abe		       d0 03		      bne	SOUND_TICK_x	; Are we at 0?  If not yet, exit till next frame.
     77  5ac0
     78  5ac0							; Counter is done.  Trigger the sound.
     79  5ac0		       20 c4 5a 	      jsr	SOUND_HITSIDE1
     80  5ac3
     81  5ac3				   SOUND_TICK_x
     82  5ac3		       60		      rts
     83  5ac4
     84  5ac4							;------------------------------------------------------------------------------
     85  5ac4							; Collision with Side - use Voice 2
     86  5ac4
     87  5ac4				   SOUND_HITSIDE		;Do hard restart and start timer
     88  5ac4							;  jsr HARDRESTART2
     89  5ac4							;  lda #$03
     90  5ac4							;  sta SOUND_SIDECOUNT
     91  5ac4							;  rts
     92  5ac4
     93  5ac4				   SOUND_HITSIDE1
     94  5ac4		       a9 0f		      lda	#$0f
     95  5ac6		       8d 0c d4 	      sta	$d40c
     96  5ac9		       a9 0a		      lda	#$0A
     97  5acb		       8d 0d d4 	      sta	$d40d
     98  5ace		       a9 07		      lda	#$07	; Pitch
     99  5ad0		       8d 08 d4 	      sta	$d408
    100  5ad3		       a9 00		      lda	#$00
    101  5ad5		       8d 07 d4 	      sta	$d407
    102  5ad8		       a9 81		      lda	#$81
    103  5ada		       8d 0b d4 	      sta	$d40b
    104  5add		       a9 80		      lda	#$80
    105  5adf		       8d 0b d4 	      sta	$d40b
    106  5ae2		       60		      rts
    107  5ae3
    108  5ae3							;------------------------------------------------------------------------------
    109  5ae3							; Collision with Car - use Voice 2
    110  5ae3
    111  5ae3				   SOUND_HITCAR
    112  5ae3		       a9 00		      lda	#$00	; 0 Attack, 0 Decay
    113  5ae5		       8d 0c d4 	      sta	$d40c
    114  5ae8		       a9 09		      lda	#$09	; 0 Sustain, ?? release
    115  5aea		       8d 0d d4 	      sta	$d40d
    116  5aed		       a9 05		      lda	#$05	; Pitch (High)
    117  5aef		       8d 08 d4 	      sta	$d408
    118  5af2		       a9 00		      lda	#$00	; Pitch (Low)
    119  5af4		       8d 07 d4 	      sta	$d407
    120  5af7		       a9 81		      lda	#$81	; Trigger
    121  5af9		       8d 0b d4 	      sta	$d40b
    122  5afc		       a9 80		      lda	#$80	; Release
    123  5afe		       8d 0b d4 	      sta	$d40b
    124  5b01		       60		      rts
    125  5b02
    126  5b02							;------------------------------------------------------------------------------
    127  5b02							; Hard restart of voice 2 so we can retrigger ADSR
    128  5b02
    129  5b02				   HARDRESTART2
    130  5b02		       a9 00		      lda	#$00
    131  5b04		       8d 07 d4 	      sta	$d407
    132  5b07		       8d 08 d4 	      sta	$d408
    133  5b0a		       8d 09 d4 	      sta	$d409
    134  5b0d		       8d 0a d4 	      sta	$d40A
    135  5b10		       8d 0b d4 	      sta	$d40B
    136  5b13		       8d 0c d4 	      sta	$d40C
    137  5b16		       8d 0d d4 	      sta	$d40D
    138  5b19		       60		      rts
    139  5b1a
    140  5b1a
    141  5b1a							;------------------------------------------------------------------------------
    142  5b1a							; Completed a lap - voice 3
    143  5b1a
    144  5b1a				   SOUND_LAP
    145  5b1a		       a9 00		      lda	#$00
    146  5b1c		       8d 13 d4 	      sta	$d413
    147  5b1f		       a9 09		      lda	#$09
    148  5b21		       8d 14 d4 	      sta	$d414
    149  5b24		       a9 40		      lda	#$40
    150  5b26		       8d 0f d4 	      sta	$d40F
    151  5b29		       a9 00		      lda	#$00
    152  5b2b		       8d 0e d4 	      sta	$d40E
    153  5b2e		       a9 11		      lda	#$11
    154  5b30		       8d 12 d4 	      sta	$d412
    155  5b33		       a9 10		      lda	#$10
    156  5b35		       8d 12 d4 	      sta	$d412
    157  5b38		       60		      rts
    158  5b39
    159  5b39							;------------------------------------------------------------------------------
    160  5b39							; Network Timeout - voice 3
    161  5b39
    162  5b39				   SOUND_TIMEOUT
    163  5b39
    164  5b39							; Mute engine sound
    165  5b39		       a9 00		      lda	#$00
    166  5b3b		       8d 01 d4 	      sta	$d401
    167  5b3e		       8d 00 d4 	      sta	$d400
    168  5b41
    169  5b41							; Bingy beep
    170  5b41		       a9 00		      lda	#$00
    171  5b43		       8d 13 d4 	      sta	$d413
    172  5b46		       a9 02		      lda	#$02
    173  5b48		       8d 14 d4 	      sta	$d414
    174  5b4b		       a9 20		      lda	#$20
    175  5b4d		       8d 0f d4 	      sta	$d40F
    176  5b50		       a9 00		      lda	#$00
    177  5b52		       8d 0e d4 	      sta	$d40E
    178  5b55		       a9 21		      lda	#$21
    179  5b57		       8d 12 d4 	      sta	$d412
    180  5b5a		       a9 20		      lda	#$20
    181  5b5c		       8d 12 d4 	      sta	$d412
    182  5b5f		       60		      rts
    183  5b60
    184  5b60							;------------------------------------------------------------------------------
    185  5b60							; Explosion - voice 3
    186  5b60
    187  5b60				   SOUND_KABOOM
    188  5b60		       a9 00		      lda	#$00
    189  5b62		       8d 13 d4 	      sta	$d413
    190  5b65		       a9 0b		      lda	#$0B
    191  5b67		       8d 14 d4 	      sta	$d414
    192  5b6a		       a9 02		      lda	#$02
    193  5b6c		       8d 0f d4 	      sta	$d40F
    194  5b6f		       a9 00		      lda	#$00
    195  5b71		       8d 0e d4 	      sta	$d40E
    196  5b74		       a9 81		      lda	#$81
    197  5b76		       8d 12 d4 	      sta	$d412
    198  5b79		       a9 80		      lda	#$80
    199  5b7b		       8d 12 d4 	      sta	$d412
    200  5b7e		       60		      rts
    201  5b7f
    202  5b7f
    203  5b7f				   scrreel
    204  5b7f		       00		      .byte.b	$00
    205  5b80
    206  5b80		       07 98	   SCROLLSTART equ	$0798
    207  5b80
    208  5b80							;------------------------------------------------------------------------------
    209  5b80							; Music
    210  5b80				   INITMUSIC
    211  5b80		       20 00 10 	      jsr	$1000
    212  5b83
    213  5b83		       78		      sei
    214  5b84		       a9 01		      lda	#$01
    215  5b86		       8d 19 d0 	      sta	$d019
    216  5b89		       8d 1a d0 	      sta	$d01a
    217  5b8c		       a9 1b		      lda	#$1b
    218  5b8e		       8d 11 d0 	      sta	$d011
    219  5b91		       a9 7f		      lda	#$7f
    220  5b93		       8d 0d dc 	      sta	$dc0d
    221  5b96		       a9 d5		      lda	#$D5
    222  5b98		       8d 12 d0 	      sta	$d012
    223  5b9b		       a9 b1		      lda	#<SCROLL
    224  5b9d		       8d 14 03 	      sta	$0314
    225  5ba0		       a9 5b		      lda	#>SCROLL
    226  5ba2		       8d 15 03 	      sta	$0315
    227  5ba5		       58		      cli
    228  5ba6
    229  5ba6							; For scroll
    230  5ba6		       a9 50		      lda	#<CREDITS
    231  5ba8		       8d e5 5b 	      sta	msg+1
    232  5bab		       a9 5c		      lda	#>CREDITS
    233  5bad		       8d e6 5b 	      sta	msg+2
    234  5bb0		       60		      rts
    235  5bb1
    236  5bb1
    237  5bb1							;This is the top of the raster split
    238  5bb1				   SCROLL
    239  5bb1		       ee 19 d0 	      inc	$d019
    240  5bb4		       a9 20		      lda	#$20
    241  5bb6		       8d 12 d0 	      sta	$d012
    242  5bb9		       a9 20		      lda	#<PLAYMUSIC
    243  5bbb		       8d 14 03 	      sta	$0314
    244  5bbe		       a9 5c		      lda	#>PLAYMUSIC
    245  5bc0		       8d 15 03 	      sta	$0315
    246  5bc3
    247  5bc3							; ------------------
    248  5bc3		       ad 68 5d 	      lda	doscroll
    249  5bc6		       f0 4b		      beq	SCROLL_x
    250  5bc8
    251  5bc8							;Scroll routine borrowed from richard bayliss!
    252  5bc8
    253  5bc8		       ce 7f 5b 	      dec	scrreel	; smoothness for
    254  5bcb		       ad 7f 5b 	      lda	scrreel	; our scrolltext
    255  5bce		       29 07		      and	#$07	; message using
    256  5bd0		       8d 16 d0 	      sta	$d016	; the screen x-pos
    257  5bd3		       c9 07		      cmp	#$07	; and counting 7
    258  5bd5		       d0 3c		      bne	SCROLL_x	; times else
    259  5bd7							; move to the
    260  5bd7							; control sequence
    261  5bd7
    262  5bd7		       a2 00		      ldx	#$00
    263  5bd9		       bd 98 07    message    lda	SCROLLSTART,x	; pull characters
    264  5bdc		       9d 97 07 	      sta	SCROLLSTART-1,x	; for the scroll
    265  5bdf		       e8		      inx
    266  5be0		       e0 28		      cpx	#$28
    267  5be2		       d0 f5		      bne	message
    268  5be4
    269  5be4
    270  5be4		       ad ff ff    msg	      lda	$FFFF	; Overwritten
    271  5be7
    272  5be7		       c9 00		      cmp	#$00	;is '@' (wrap mark)
    273  5be9							;read? if not then
    274  5be9		       d0 0d		      bne	end	;jump to end prompt
    275  5beb
    276  5beb		       a9 50		      lda	#<CREDITS	;reset msg+1
    277  5bed		       8d e5 5b 	      sta	msg+1	;and msg+2 so
    278  5bf0		       a9 5c		      lda	#>CREDITS	;that the text
    279  5bf2		       8d e6 5b 	      sta	msg+2	;will restart
    280  5bf5		       4c e4 5b 	      jmp	msg	;then jump msg
    281  5bf8
    282  5bf8				   end
    283  5bf8		       38		      sec
    284  5bf9		       c9 20		      cmp	#$20	;Spaces are OK
    285  5bfb		       f0 06		      beq	show
    286  5bfd		       c9 3a		      cmp	#$3A	;Colons too
    287  5bff		       f0 02		      beq	show
    288  5c01		       e9 40		      sbc	#$40	;Convert all others to screencode
    289  5c03
    290  5c03				   show
    291  5c03		       8d bf 07 	      sta	SCROLLSTART+$27	;place character, read from CREDITS
    292  5c06
    293  5c06		       ee e5 5b 	      inc	msg+1	;increment msg+1 by
    294  5c09		       ad e5 5b 	      lda	msg+1	;one character so
    295  5c0c		       c9 00		      cmp	#$00	;is the reset counter
    296  5c0e							;('@') marked? if not
    297  5c0e							;then jump to control
    298  5c0e
    299  5c0e		       d0 03		      bne	SCROLL_x
    300  5c10		       ee e6 5b 	      inc	msg+2	;do the same for the high byte
    301  5c13
    302  5c13				   SCROLL_x
    303  5c13							;Color scroll
    304  5c13		       a9 01		      lda	#$01
    305  5c15		       a2 28		      ldx	#$28
    306  5c17				   sx
    307  5c17		       9d 97 db 	      sta	SCROLLSTART-1+$D400,x
    308  5c1a		       ca		      dex
    309  5c1b		       d0 fa		      bne	sx
    310  5c1d		       4c 81 ea 	      jmp	$ea81
    311  5c20
    312  5c20							;This is the bottom of the raster split
    313  5c20				   PLAYMUSIC
    314  5c20		       ee 19 d0 	      inc	$d019
    315  5c23		       a9 dc		      lda	#$DC
    316  5c25		       8d 12 d0 	      sta	$d012
    317  5c28		       a9 b1		      lda	#<SCROLL
    318  5c2a		       8d 14 03 	      sta	$0314
    319  5c2d		       a9 5b		      lda	#>SCROLL
    320  5c2f		       8d 15 03 	      sta	$0315
    321  5c32
    322  5c32		       a9 c8		      lda	#$c8
    323  5c34		       8d 16 d0 	      sta	$d016	;End horiz scroll
    324  5c37
    325  5c37							;Using a PAL tune.  Skip every 6th frame if NTSC
    326  5c37		       ad a6 02 	      lda	$2A6
    327  5c3a		       d0 0d		      bne	MUSIC_OK
    328  5c3c
    329  5c3c		       ce 4f 5c 	      dec	NTSCCOUNT
    330  5c3f		       d0 08		      bne	MUSIC_OK
    331  5c41		       a9 07		      lda	#$07
    332  5c43		       8d 4f 5c 	      sta	NTSCCOUNT
    333  5c46		       4c 4c 5c 	      jmp	MUSIC_x
    334  5c49
    335  5c49				   MUSIC_OK
    336  5c49		       20 03 10 	      jsr	$1003
    337  5c4c				   MUSIC_x
    338  5c4c		       4c 31 ea 	      jmp	$ea31
    339  5c4f
    340  5c4f				   NTSCCOUNT
    341  5c4f		       07		      .byte.b	$07
    342  5c50
    343  5c50				   CREDITS
    344  5c50		       20 43 4f 4e*	      .byte.b	" CONCEPT AND FRAMEWORK: LEIF BLOOMQUIST   "
    345  5c7a		       4e 45 54 57*	      .byte.b	"NETWORK CODE: OLIVER VIEBROOKS   "
    346  5c9b		       44 49 53 50*	      .byte.b	"DISPLAY CODE: ROBIN HARBRON AND LASSE OORNI	"
    347  5cc9		       47 52 41 50*	      .byte.b	"GRAPHICS: RAYMOND LEJUEZ   "
    348  5ce4		       4d 55 53 49*	      .byte.b	"MUSIC: ALEXANDER ROTZSCH   "
    349  5cff		       53 45 52 56*	      .byte.b	"SERVER HOSTING: IAN COLQUHOUN   "
    350  5d1f		       50 4c 41 59*	      .byte.b	"PLAYTESTERS: ROBIN HARBRON  DAVE MCMURTRIE  DAVE HARTMAN  "
    351  5d59		       20 20 20 20*	      .byte.b	"		", 0
    352  5d68
    353  5d68
    354  5d68
    355  5d68
    356  5d68				   doscroll
    357  5d68		       01		      .byte.b	$01
------- FILE racer-main.asm
------- FILE racer-utils.asm LEVEL 2 PASS 2
      0  5d69					      include	"racer-utils.asm"
      1  5d69							; racer-utils.asm
      2  5d69							; Utils and macros
      3  5d69
      4  5d69
      5  5d69							; ====================================================================
      6  5d69							; Return a random number from 1-255 using SID Voice #3 - thanks Golan
      7  5d69							; ====================================================================
      8  5d69
      9  5d69				   RANDOM255
     10  5d69		       a9 ff		      LDA	#$FF
     11  5d6b		       8d 0f d4 	      STA	$D40F
     12  5d6e		       a9 80		      LDA	#$80
     13  5d70		       8d 12 d4 	      STA	$D412
     14  5d73		       ad 1b d4 	      LDA	$D41B
     15  5d76		       60		      rts
     16  5d77
     17  5d77							; ==============================================================
     18  5d77							; Simple checksum on sent/received data
     19  5d77							; Start of data in x:a, length in y
     20  5d77							; checksum in CSUM when finished
     21  5d77							; ==============================================================
     22  5d77
     23  5d77		       00	   CSUM_SAVE  dc.b	$00
     24  5d78
     25  5d78		       00	   CSUM       dc.b	$00
     26  5d79
     27  5d79				   DATACHECKSUM
     28  5d79		       8e 86 5d 	      stx	DCS1+1
     29  5d7c		       8d 87 5d 	      sta	DCS1+2
     30  5d7f
     31  5d7f		       a9 00		      lda	#$00	; Reset checksum
     32  5d81		       8d 78 5d 	      sta	CSUM
     33  5d84		       18		      clc
     34  5d85
     35  5d85				   DCS1
     36  5d85		       b9 ff ff 	      lda	$FFFF,y	;Overwritten above
     37  5d88		       6d 78 5d 	      adc	CSUM
     38  5d8b		       8d 78 5d 	      sta	CSUM
     39  5d8e		       88		      dey
     40  5d8f		       c0 ff		      cpy	#$FF	; aka -1 This is needed so the "zeroth" byte gets added
     41  5d91		       d0 f2		      bne	DCS1
     42  5d93		       60		      rts
     43  5d94
     44  5d94
     45  5d94							; ==============================================================
     46  5d94							; All defaults are NTSC.  This code overrides for PAL.
     47  5d94							; ==============================================================
     48  5d94
     49  5d94
     50  5d94							; ==============================================================
     51  5d94							; Filtered Input routine
     52  5d94							; ==============================================================
     53  5d94
     54  5d94				   TEXT_FILTER
     55  5d94		       20 41 42 43*	      dc.b	" ABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890.,-+!#$%&'()*",0
     56  5dc7
     57  5dc7							;Input a string and store it in GOTINPUT, terminated with a null byte.
     58  5dc7							;x:a is a pointer to the allowed list of characters, null-terminated.
     59  5dc7							;max # of chars in y returns num of chars entered in y.
     60  5dc7
     61  5dc7				   MAXCHARS
     62  5dc7		       00		      dc.b	$00
     63  5dc8
     64  5dc8				   LASTCHAR
     65  5dc8		       00		      dc.b	$00
     66  5dc9
     67  5dc9		       ff e4	   GETIN      =	$ffe4
     68  5dc9
     69  5dc9				   FILTERED_TEXT
     70  5dc9		       a9 5d		      lda	#>TEXT_FILTER
     71  5dcb		       a2 94		      ldx	#<TEXT_FILTER
     72  5dcd		       a0 26		      ldy	#38
     73  5dcf							;Drop through
     74  5dcf
     75  5dcf				   FILTERED_INPUT
     76  5dcf		       8c c7 5d 	      sty	MAXCHARS
     77  5dd2		       8e ef 5d 	      stx	CHECKALLOWED+1
     78  5dd5		       8d f0 5d 	      sta	CHECKALLOWED+2
     79  5dd8
     80  5dd8							;Zero characters received.
     81  5dd8		       a9 00		      lda	#$00
     82  5dda		       85 69		      sta	INPUT_Y
     83  5ddc
     84  5ddc							;Wait for a character.
     85  5ddc				   INPUT_GET
     86  5ddc		       20 e4 ff 	      jsr	GETIN
     87  5ddf		       f0 fb		      beq	INPUT_GET
     88  5de1
     89  5de1		       8d c8 5d 	      sta	LASTCHAR
     90  5de4
     91  5de4		       c9 14		      cmp	#$14	;Delete
     92  5de6		       f0 33		      beq	DELETE	;TODO
     93  5de8
     94  5de8		       c9 0d		      cmp	#$0d	;Return
     95  5dea		       f0 27		      beq	INPUT_DONE
     96  5dec
     97  5dec							;Check the allowed list of characters.
     98  5dec		       a2 00		      ldx	#$00
     99  5dee				   CHECKALLOWED
    100  5dee		       bd ff ff 	      lda	$FFFF,x	;Overwritten
    101  5df1		       f0 e9		      beq	INPUT_GET	;Reached end of list (0)
    102  5df3
    103  5df3		       cd c8 5d 	      cmp	LASTCHAR
    104  5df6		       f0 04		      beq	INPUTOK	;Match found
    105  5df8
    106  5df8							;Not end or match, keep checking
    107  5df8		       e8		      inx
    108  5df9		       4c ee 5d 	      jmp	CHECKALLOWED
    109  5dfc
    110  5dfc				   INPUTOK
    111  5dfc		       ad c8 5d 	      lda	LASTCHAR	;Get the char back
    112  5dff		       a4 69		      ldy	INPUT_Y
    113  5e01		       99 55 2d 	      sta	GOTINPUT,y
    114  5e04		       20 d2 ff 	      jsr	$ffd2	;Print it
    115  5e07
    116  5e07		       e6 69		      inc	INPUT_Y	;Next character
    117  5e09
    118  5e09							;End reached?
    119  5e09		       a5 69		      lda	INPUT_Y
    120  5e0b		       cd c7 5d 	      cmp	MAXCHARS
    121  5e0e		       f0 03		      beq	INPUT_DONE
    122  5e10
    123  5e10							;Not yet.
    124  5e10		       4c dc 5d 	      jmp	INPUT_GET
    125  5e13
    126  5e13				   INPUT_DONE
    127  5e13		       a4 69		      ldy	INPUT_Y
    128  5e15		       a9 00		      lda	#$00
    129  5e17		       99 55 2d 	      sta	GOTINPUT,y	;Zero-terminate
    130  5e1a		       60		      rts
    131  5e1b
    132  5e1b							; Delete last character.
    133  5e1b				   DELETE
    134  5e1b							;First, check if we're at the beginning.  If so, just exit.
    135  5e1b		       a5 69		      lda	INPUT_Y
    136  5e1d		       d0 03		      bne	DELETE_OK
    137  5e1f		       4c dc 5d 	      jmp	INPUT_GET
    138  5e22
    139  5e22							;At least one character entered.
    140  5e22				   DELETE_OK
    141  5e22							;Move pointer back.
    142  5e22		       c6 69		      dec	INPUT_Y
    143  5e24
    144  5e24							;Store a zero, just in case no other characters are entered.
    145  5e24		       a4 69		      ldy	INPUT_Y
    146  5e26		       a9 00		      lda	#$00
    147  5e28		       99 55 2d 	      sta	GOTINPUT,y
    148  5e2b
    149  5e2b							;Print the delete char
    150  5e2b		       a9 14		      lda	#$14
    151  5e2d		       20 d2 ff 	      jsr	$ffd2
    152  5e30
    153  5e30							;Wait for next char
    154  5e30		       4c dc 5d 	      jmp	INPUT_GET
------- FILE racer-main.asm
------- FILE racer-network.asm LEVEL 2 PASS 2
      0  5e33					      include	"racer-network.asm"
      1  5e33
      2  5e33							; Network stuff for racing game
      3  5e33
      4  5e33		       00 80 10 0c*CARD_MAC   dc.b	$00,$80,$10,$0c,$64,$01
      5  5e39		       c0 a8 01 40 CARD_IP    dc.b	192,168,1,64
      6  5e3d		       ff ff ff 00 CARD_MASK  dc.b	255,255,255,0
      7  5e41		       c0 a8 01 01 CARD_GATE  dc.b	192,168,1,1
      8  5e45		       00 00 00 00*CARD_GATE_MAC dc.b	$00,$00,$00,$00,$00,$00
      9  5e4b
     10  5e4b				   SERVER_IP
     11  5e4b		       d0 4f da c9	      .byte.b	208,79,218,201	; Public
     12  5e4f
     13  5e4f				   SERVER_IP_LAN
     14  5e4f		       c0 a8 07 64	      .byte.b	192,168,7,100	; Private
     15  5e53
     16  5e53							; Default,  overwritten by ARP
     17  5e53				   SERVER_MAC
     18  5e53		       01 02 03 04*	      .byte.b	$01,$02,$03,$04,$05,$06
     19  5e59
     20  5e59
     21  5e59		       0b b8	   USER_UDP_PORT =	3000
     22  5e59
     23  5e59		       8e 86	   UDP_DATA_IN equ	INPACKET+$2A	; Beginning of UDP data buffer
     24  5e59
     25  5e59							;Various Flags...
     26  5e59
     27  5e59				   PACKET_RECEIVED		; Flag for incoming data
     28  5e59		       00		      .byte.b	$00
     29  5e5a
     30  5e5a				   NETSETUPFINISHED
     31  5e5a		       00		      .byte.b	$00
     32  5e5b
     33  5e5b				   NETWORK_TIMEOUT		; Reset by packet receive.
     34  5e5b							; If this goes above a threshold, means no data received
     35  5e5b		       00		      .byte.b	$00
     36  5e5c
     37  5e5c				   NET_TIMEDOUT 		; Flag for main game loop
     38  5e5c		       00		      .byte.b	$00
     39  5e5d
     40  5e5d				   NET_FAILED
     41  5e5d		       00		      .byte.b	$00
     42  5e5e
     43  5e5e							;----------------------------------------------------------------
     44  5e5e							; Called from main program
     45  5e5e				   NETWORK_SETUP
     46  5e5e
      0  5e5e					      PRINT	CG_RED
      1  5e5e		       20 60 63 	      jsr	prns
      2  5e61		       1c 00		      dc.b	CG_RED,0
     48  5e63							; Basic card initialization
     49  5e63		       20 b6 61 	      jsr	net_init	; Carry set if failed
     50  5e66		       90 0b		      bcc	UDPSETUP
     51  5e68
     52  5e68							;Failed
     53  5e68		       20 38 63 	      jsr	getanykey
     54  5e6b		       a9 01		      lda	#$01
     55  5e6d		       8d 5d 5e 	      sta	NET_FAILED
     56  5e70		       4c 88 5e 	      jmp	NETWORK_SETUP_x
     57  5e73
     58  5e73				   UDPSETUP
     59  5e73							; UDP Setup
     60  5e73		       a9 b8		      lda	#<3000	; This doesn't have to match USER_UDP_PORT, but it does
     61  5e75		       a2 0b		      ldx	#>3000
     62  5e77		       20 18 84 	      jsr	UDP_SET_SRC_PORT
     63  5e7a
     64  5e7a		       a9 ba		      lda	#<3002
     65  5e7c		       a2 0b		      ldx	#>3002
     66  5e7e		       20 1f 84 	      jsr	UDP_SET_DEST_PORT
     67  5e81
     68  5e81		       a9 4b		      lda	#<SERVER_IP
     69  5e83		       a2 5e		      ldx	#>SERVER_IP
     70  5e85		       20 26 84 	      jsr	UDP_SET_DEST_IP
     71  5e88
     72  5e88				   NETWORK_SETUP_x
     73  5e88		       a9 00		      lda	#$00
     74  5e8a		       8d 59 5e 	      sta	PACKET_RECEIVED
     75  5e8d		       60		      rts
     76  5e8e
     77  5e8e							; -------------------------------------------------------------------------
     78  5e8e							; Called from IRQ
     79  5e8e				   NETWORK_UPDATE
     80  5e8e		       20 a3 62 	      jsr	NETIRQ
     81  5e91
     82  5e91		       ad 5a 5e 	      lda	NETSETUPFINISHED
     83  5e94		       f0 24		      beq	NETWORK_UPDATEx
     84  5e96
     85  5e96		       ad 5d 5e 	      lda	NET_FAILED
     86  5e99		       d0 1f		      bne	NETWORK_UPDATEx
     87  5e9b
     88  5e9b		       20 87 5f 	      jsr	SENDUPDATE
     89  5e9e
     90  5e9e							;Network timeouts
     91  5e9e		       ad 5c 5e 	      lda	NET_TIMEDOUT	; Timeout in progress
     92  5ea1		       d0 18		      bne	NTIMEOUT
     93  5ea3
     94  5ea3		       ee 5b 5e 	      inc	NETWORK_TIMEOUT
     95  5ea6		       ad 5b 5e 	      lda	NETWORK_TIMEOUT
     96  5ea9
     97  5ea9							; Packets are sent every 50 milliseconds (20/sec)
     98  5ea9							; This routine is called every ~17 ms (NTSC)
     99  5ea9							; If we go 30 calls (~0.5 seconds) without a packet, freeze game.
    100  5ea9		       c9 1e		      cmp	#30	;Decimal
      0  5eab					      blt	NETWORK_UPDATEx
      1  5eab		       90 0d		      bcc	NETWORK_UPDATEx
    102  5ead
    103  5ead		       a9 01		      lda	#$01
    104  5eaf		       8d 5c 5e 	      sta	NET_TIMEDOUT
    105  5eb2		       a9 00		      lda	#$00
    106  5eb4		       8d 59 5e 	      sta	PACKET_RECEIVED
    107  5eb7		       20 bb 5e 	      jsr	NTIMEOUT
    108  5eba
    109  5eba				   NETWORK_UPDATEx
    110  5eba		       60		      rts
    111  5ebb
    112  5ebb				   NTIMEOUT
    113  5ebb		       a9 02		      lda	#$02
    114  5ebd		       8d 20 d0 	      sta	$d020
    115  5ec0
    116  5ec0		       20 39 5b 	      jsr	SOUND_TIMEOUT
    117  5ec3		       ad 59 5e 	      lda	PACKET_RECEIVED
    118  5ec6		       f0 08		      beq	NTIMEOUT_x	; No packet yet
    119  5ec8
    120  5ec8		       a9 00		      lda	#$00
    121  5eca		       8d 20 d0 	      sta	$d020
    122  5ecd		       8d 5c 5e 	      sta	NET_TIMEDOUT
    123  5ed0
    124  5ed0				   NTIMEOUT_x
    125  5ed0		       60		      rts
    126  5ed1
    127  5ed1
    128  5ed1							; -------------------------------------------------------------------------
    129  5ed1							; Get Gateway MAC
    130  5ed1							; -------------------------------------------------------------------------
    131  5ed1
    132  5ed1							;Only get gateway MAC if the opponent's not on the local subnet
    133  5ed1				   GATEWAYMAC
    134  5ed1		       a9 8c		      lda	#<UDP_DEST_IP
    135  5ed3		       a2 83		      ldx	#>UDP_DEST_IP
    136  5ed5		       20 fd 66 	      jsr	IPMASK
    137  5ed8		       90 4e		      bcc	MAC_SKIP
    138  5eda
      0  5eda					      PRINT	CRLF,"RESOLVING GATEWAY MAC..."
      1  5eda		       20 60 63 	      jsr	prns
      2  5edd		       0d 52 45 53*	      dc.b	CRLF,"RESOLVING GATEWAY MAC...",0
    140  5ef7		       20 57 62 	      jsr	get_macs
    141  5efa		       90 25		      bcc	MAC_OK
    142  5efc
    143  5efc							;Flag errors
      0  5efc					      PRINT	CRLF,CG_WHT,"ERROR RESOLVING THE GW MAC!",CRLF
      1  5efc		       20 60 63 	      jsr	prns
      2  5eff		       0d 05 45 52*	      dc.b	CRLF,CG_WHT,"ERROR RESOLVING THE GW MAC!",CRLF,0
    145  5f1e
    146  5f1e		       4c 1e 5f    nomac      jmp	nomac	;Freeze
    147  5f21
    148  5f21				   MAC_OK
      0  5f21					      PRINT	"OK",CRLF
      1  5f21		       20 60 63 	      jsr	prns
      2  5f24		       4f 4b 0d 00	      dc.b	"OK",CRLF,0
    150  5f28				   MAC_SKIP
    151  5f28		       60		      rts
    152  5f29
    153  5f29							; -------------------------------------------------------------------------
    154  5f29							; Get Server MAC (LAN Mode only)
    155  5f29							; -------------------------------------------------------------------------
    156  5f29
    157  5f29				   SERVERMAC
      0  5f29					      PRINT	CRLF,"RESOLVING SERVER MAC..."
      1  5f29		       20 60 63 	      jsr	prns
      2  5f2c		       0d 52 45 53*	      dc.b	CRLF,"RESOLVING SERVER MAC...",0
    159  5f45
    160  5f45							;get MAC for server
    161  5f45		       a9 4b		      lda	#<SERVER_IP
    162  5f47		       a2 5e		      ldx	#>SERVER_IP
    163  5f49		       20 f6 6c 	      jsr	GET_ARP
    164  5f4c		       b0 10		      bcs	SMAC_FAILED
    165  5f4e							;copy gateway mac
    166  5f4e		       a2 00		      ldx	#$00
    167  5f50				   gm1_0
    168  5f50		       bd 6a 6b 	      lda	ARP_MAC,x
    169  5f53		       9d 53 5e 	      sta	SERVER_MAC,x
    170  5f56		       e8		      inx
    171  5f57		       e0 06		      cpx	#$06
    172  5f59		       d0 f5		      bne	gm1_0
    173  5f5b
    174  5f5b		       4c 21 5f 	      jmp	MAC_OK
    175  5f5e
    176  5f5e				   SMAC_FAILED
      0  5f5e					      PRINT	CRLF,CG_WHT,"ERROR RESOLVING THE SERVER MAC!",CRLF
      1  5f5e		       20 60 63 	      jsr	prns
      2  5f61		       0d 05 45 52*	      dc.b	CRLF,CG_WHT,"ERROR RESOLVING THE SERVER MAC!",CRLF,0
    178  5f84
    179  5f84		       4c 84 5f    nomac1     jmp	nomac1	;Freeze
    180  5f87
    181  5f87							; -------------------------------------------------------------------------
    182  5f87							; Packet Send Routine
    183  5f87							; -------------------------------------------------------------------------
    184  5f87
    185  5f87				   SENDUPDATE
    186  5f87		       a9 0e		      lda	#$0e	; Including zero-term. and checksum
    187  5f89		       a2 00		      ldx	#$00
    188  5f8b		       20 3a 84 	      jsr	UDP_SET_DATALEN
    189  5f8e
    190  5f8e							; Packet type
    191  5f8e		       a9 00		      lda	#$00	; Game update
    192  5f90		       8d 8c 80 	      sta	UDP_DATA
    193  5f93
    194  5f93							; X Position
    195  5f93		       ad 83 2d 	      lda	MYXPOS+1
    196  5f96		       ae 84 2d 	      ldx	MYXPOS+2	; High byte, TODO
    197  5f99		       8d 8d 80 	      sta	UDP_DATA+1
    198  5f9c		       8e 8e 80 	      stx	UDP_DATA+2
    199  5f9f
    200  5f9f							; Y Position
    201  5f9f		       ad b9 34 	      lda	REALTRACKPOS+1
    202  5fa2		       ae ba 34 	      ldx	REALTRACKPOS+2
    203  5fa5		       8d 8f 80 	      sta	UDP_DATA+3
    204  5fa8		       8e 90 80 	      stx	UDP_DATA+4
    205  5fab
    206  5fab							;X Speed (include fractional)
    207  5fab		       ad 85 2d 	      lda	MYX_SPEED
    208  5fae		       ae 86 2d 	      ldx	MYX_SPEED+1
    209  5fb1		       8d 91 80 	      sta	UDP_DATA+5
    210  5fb4		       8e 92 80 	      stx	UDP_DATA+6
    211  5fb7
    212  5fb7							;Y Speed (include fractional)
    213  5fb7		       ad dc 31 	      lda	MY_SPEED
    214  5fba		       ae dd 31 	      ldx	MY_SPEED+1
    215  5fbd		       8d 93 80 	      sta	UDP_DATA+7
    216  5fc0		       8e 94 80 	      stx	UDP_DATA+8
    217  5fc3
    218  5fc3							;Car color
    219  5fc3		       ad 27 d0 	      lda	sprite1color
    220  5fc6		       8d 95 80 	      sta	UDP_DATA+9
    221  5fc9
    222  5fc9							;Sprite#
    223  5fc9		       ad f8 07 	      lda	sprite1pnt
    224  5fcc		       8d 96 80 	      sta	UDP_DATA+10
    225  5fcf
    226  5fcf							; Send!
    227  5fcf		       20 c7 83 	      jsr	UDP_SEND
    228  5fd2		       60		      rts
    229  5fd3
    230  5fd3
    231  5fd3							; -------------------------------------------------------------------------
    232  5fd3							; Packet Receive + Handling Routines
    233  5fd3							; -------------------------------------------------------------------------
    234  5fd3
    235  5fd3							; Temporary holder of the checksum we received
    236  5fd3				   RCV_CSUM
    237  5fd3		       ff		      dc.b	$ff
    238  5fd4
    239  5fd4							; ==============================================================
    240  5fd4							; Master packet receiver.  This occurs inside the interrupt!
    241  5fd4							; A UDP packet has arrived, and the port matches the one we want.
    242  5fd4							; ==============================================================
    243  5fd4
    244  5fd4				   MYUDP_PROCESS SUBROUTINE
    245  5fd4							; Check checksum, and don't ack if bad
    246  5fd4							;  jsr CHECKSUM
    247  5fd4							;  jmp BADCSUM
    248  5fd4
    249  5fd4		       ee bf db 	      inc	COMMSLED
    250  5fd7
    251  5fd7							; Reset timeout
    252  5fd7		       a9 00		      lda	#$00
    253  5fd9		       8d 5b 5e 	      sta	NETWORK_TIMEOUT
    254  5fdc
    255  5fdc							; Display sprites as commanded by the server
    256  5fdc							;--------------------------------------
    257  5fdc		       ae 87 8e 	      ldx	UDP_DATA_IN+1
    258  5fdf		       ac 89 8e 	      ldy	UDP_DATA_IN+3
    259  5fe2		       8e 02 d0 	      stx	sprite2x
    260  5fe5		       8e c4 31 	      stx	IN_XPOSLOW+1
    261  5fe8		       8c 03 d0 	      sty	sprite2y
    262  5feb		       8c d4 31 	      sty	IN_YPOS+1
    263  5fee
    264  5fee		       ad 8b 8e 	      lda	UDP_DATA_IN+5
    265  5ff1		       8d a4 31 	      sta	IN_XSPEEDLOW+1
    266  5ff4		       ad 8c 8e 	      lda	UDP_DATA_IN+6
    267  5ff7		       8d ac 31 	      sta	IN_XSPEEDHIGH+1
    268  5ffa
    269  5ffa		       ad 8d 8e 	      lda	UDP_DATA_IN+7
    270  5ffd		       8d b4 31 	      sta	IN_YSPEEDLOW+1
    271  6000		       ad 8e 8e 	      lda	UDP_DATA_IN+8
    272  6003		       8d bc 31 	      sta	IN_YSPEEDHIGH+1
    273  6006
    274  6006		       ad 8f 8e 	      lda	UDP_DATA_IN+9
    275  6009		       8d 28 d0 	      sta	sprite2color
    276  600c		       ad 90 8e 	      lda	UDP_DATA_IN+10
    277  600f		       8d f9 07 	      sta	sprite2pnt
    278  6012
    279  6012							;--------------------------------------
    280  6012		       ae 93 8e 	      ldx	UDP_DATA_IN+13
    281  6015		       ac 95 8e 	      ldy	UDP_DATA_IN+15
    282  6018		       8e 04 d0 	      stx	sprite3x
    283  601b		       8e c5 31 	      stx	IN_XPOSLOW+2
    284  601e		       8c 05 d0 	      sty	sprite3y
    285  6021		       8c d5 31 	      sty	IN_YPOS+2
    286  6024
    287  6024		       ad 97 8e 	      lda	UDP_DATA_IN+17
    288  6027		       8d a5 31 	      sta	IN_XSPEEDLOW+2
    289  602a		       ad 98 8e 	      lda	UDP_DATA_IN+18
    290  602d		       8d ad 31 	      sta	IN_XSPEEDHIGH+2
    291  6030
    292  6030		       ad 99 8e 	      lda	UDP_DATA_IN+19
    293  6033		       8d b5 31 	      sta	IN_YSPEEDLOW+2
    294  6036		       ad 9a 8e 	      lda	UDP_DATA_IN+20
    295  6039		       8d bd 31 	      sta	IN_YSPEEDHIGH+2
    296  603c
    297  603c		       ad 9b 8e 	      lda	UDP_DATA_IN+21
    298  603f		       8d 29 d0 	      sta	sprite3color
    299  6042		       ad 9c 8e 	      lda	UDP_DATA_IN+22
    300  6045		       8d fa 07 	      sta	sprite3pnt
    301  6048
    302  6048							;--------------------------------------
    303  6048		       ae 9f 8e 	      ldx	UDP_DATA_IN+25
    304  604b		       ac a1 8e 	      ldy	UDP_DATA_IN+27
    305  604e		       8e 06 d0 	      stx	sprite4x
    306  6051		       8e c6 31 	      stx	IN_XPOSLOW+3
    307  6054		       8c 07 d0 	      sty	sprite4y
    308  6057		       8c d6 31 	      sty	IN_YPOS+3
    309  605a
    310  605a		       ad a3 8e 	      lda	UDP_DATA_IN+29
    311  605d		       8d a6 31 	      sta	IN_XSPEEDLOW+3
    312  6060		       ad a4 8e 	      lda	UDP_DATA_IN+30
    313  6063		       8d ae 31 	      sta	IN_XSPEEDHIGH+3
    314  6066
    315  6066		       ad a5 8e 	      lda	UDP_DATA_IN+31
    316  6069		       8d b6 31 	      sta	IN_YSPEEDLOW+3
    317  606c		       ad a6 8e 	      lda	UDP_DATA_IN+32
    318  606f		       8d be 31 	      sta	IN_YSPEEDHIGH+3
    319  6072
    320  6072		       ad a7 8e 	      lda	UDP_DATA_IN+33
    321  6075		       8d 2a d0 	      sta	sprite4color
    322  6078		       ad a8 8e 	      lda	UDP_DATA_IN+34
    323  607b		       8d fb 07 	      sta	sprite4pnt
    324  607e
    325  607e							;--------------------------------------
    326  607e		       ae ab 8e 	      ldx	UDP_DATA_IN+37
    327  6081		       ac ad 8e 	      ldy	UDP_DATA_IN+39
    328  6084		       8e 08 d0 	      stx	sprite5x
    329  6087		       8e c7 31 	      stx	IN_XPOSLOW+4
    330  608a		       8c 09 d0 	      sty	sprite5y
    331  608d		       8c d7 31 	      sty	IN_YPOS+4
    332  6090
    333  6090		       ad af 8e 	      lda	UDP_DATA_IN+41
    334  6093		       8d a7 31 	      sta	IN_XSPEEDLOW+4
    335  6096		       ad b0 8e 	      lda	UDP_DATA_IN+42
    336  6099		       8d af 31 	      sta	IN_XSPEEDHIGH+4
    337  609c
    338  609c		       ad b1 8e 	      lda	UDP_DATA_IN+43
    339  609f		       8d b7 31 	      sta	IN_YSPEEDLOW+4
    340  60a2		       ad b2 8e 	      lda	UDP_DATA_IN+44
    341  60a5		       8d bf 31 	      sta	IN_YSPEEDHIGH+4
    342  60a8
    343  60a8		       ad b3 8e 	      lda	UDP_DATA_IN+45
    344  60ab		       8d 2b d0 	      sta	sprite5color
    345  60ae		       ad b4 8e 	      lda	UDP_DATA_IN+46
    346  60b1		       8d fc 07 	      sta	sprite5pnt
    347  60b4
    348  60b4							;--------------------------------------
    349  60b4		       ae b7 8e 	      ldx	UDP_DATA_IN+49
    350  60b7		       ac b9 8e 	      ldy	UDP_DATA_IN+51
    351  60ba		       8e 0a d0 	      stx	sprite6x
    352  60bd		       8e c8 31 	      stx	IN_XPOSLOW+5
    353  60c0		       8c 0b d0 	      sty	sprite6y
    354  60c3		       8c d8 31 	      sty	IN_YPOS+5
    355  60c6
    356  60c6		       ad bb 8e 	      lda	UDP_DATA_IN+53
    357  60c9		       8d a8 31 	      sta	IN_XSPEEDLOW+5
    358  60cc		       ad bc 8e 	      lda	UDP_DATA_IN+54
    359  60cf		       8d b0 31 	      sta	IN_XSPEEDHIGH+5
    360  60d2
    361  60d2		       ad bd 8e 	      lda	UDP_DATA_IN+55
    362  60d5		       8d b8 31 	      sta	IN_YSPEEDLOW+5
    363  60d8		       ad be 8e 	      lda	UDP_DATA_IN+56
    364  60db		       8d c0 31 	      sta	IN_YSPEEDHIGH+5
    365  60de
    366  60de		       ad bf 8e 	      lda	UDP_DATA_IN+57
    367  60e1		       8d 2c d0 	      sta	sprite6color
    368  60e4		       ad c0 8e 	      lda	UDP_DATA_IN+58
    369  60e7		       8d fd 07 	      sta	sprite6pnt
    370  60ea
    371  60ea							;--------------------------------------
    372  60ea		       ae c3 8e 	      ldx	UDP_DATA_IN+61
    373  60ed		       ac c5 8e 	      ldy	UDP_DATA_IN+63
    374  60f0		       8e 0c d0 	      stx	sprite7x
    375  60f3		       8e c9 31 	      stx	IN_XPOSLOW+6
    376  60f6		       8c 0d d0 	      sty	sprite7y
    377  60f9		       8c d9 31 	      sty	IN_YPOS+6
    378  60fc
    379  60fc		       ad c7 8e 	      lda	UDP_DATA_IN+65
    380  60ff		       8d a9 31 	      sta	IN_XSPEEDLOW+6
    381  6102		       ad c8 8e 	      lda	UDP_DATA_IN+66
    382  6105		       8d b1 31 	      sta	IN_XSPEEDHIGH+6
    383  6108
    384  6108		       ad c9 8e 	      lda	UDP_DATA_IN+67
    385  610b		       8d b9 31 	      sta	IN_YSPEEDLOW+6
    386  610e		       ad ca 8e 	      lda	UDP_DATA_IN+68
    387  6111		       8d c1 31 	      sta	IN_YSPEEDHIGH+6
    388  6114
    389  6114		       ad cb 8e 	      lda	UDP_DATA_IN+69
    390  6117		       8d 2d d0 	      sta	sprite7color
    391  611a		       ad cc 8e 	      lda	UDP_DATA_IN+70
    392  611d		       8d fe 07 	      sta	sprite7pnt
    393  6120
    394  6120							;--------------------------------------
    395  6120		       ae cf 8e 	      ldx	UDP_DATA_IN+73
    396  6123		       ac d1 8e 	      ldy	UDP_DATA_IN+75
    397  6126		       8e 0e d0 	      stx	sprite8x
    398  6129		       8e ca 31 	      stx	IN_XPOSLOW+7
    399  612c		       8c 0f d0 	      sty	sprite8y
    400  612f		       8c da 31 	      sty	IN_YPOS+7
    401  6132
    402  6132		       ad d3 8e 	      lda	UDP_DATA_IN+77
    403  6135		       8d aa 31 	      sta	IN_XSPEEDLOW+7
    404  6138		       ad d4 8e 	      lda	UDP_DATA_IN+78
    405  613b		       8d b2 31 	      sta	IN_XSPEEDHIGH+7
    406  613e
    407  613e		       ad d5 8e 	      lda	UDP_DATA_IN+79
    408  6141		       8d ba 31 	      sta	IN_YSPEEDLOW+7
    409  6144		       ad d6 8e 	      lda	UDP_DATA_IN+80
    410  6147		       8d c2 31 	      sta	IN_YSPEEDHIGH+7
    411  614a
    412  614a		       ad d7 8e 	      lda	UDP_DATA_IN+81
    413  614d		       8d 2e d0 	      sta	sprite8color
    414  6150		       ad d8 8e 	      lda	UDP_DATA_IN+82
    415  6153		       8d ff 07 	      sta	sprite8pnt
    416  6156
    417  6156							;now, calculate MSB for sprites
    418  6156		       a9 00		      lda	#0
    419  6158		       ae 88 8e 	      ldx	UDP_DATA_IN+2
    420  615b		       8e cc 31 	      stx	IN_XPOSHIGH+1
    421  615e		       f0 02		      beq	.ahead1
    422  6160		       09 02		      ora	#2
    423  6162				   .ahead1
    424  6162		       ae 94 8e 	      ldx	UDP_DATA_IN+14
    425  6165		       8e cd 31 	      stx	IN_XPOSHIGH+2
    426  6168		       f0 02		      beq	.ahead2
    427  616a		       09 04		      ora	#4
    428  616c				   .ahead2
    429  616c		       ae a0 8e 	      ldx	UDP_DATA_IN+26
    430  616f		       8e ce 31 	      stx	IN_XPOSHIGH+3
    431  6172		       f0 02		      beq	.ahead3
    432  6174		       09 08		      ora	#8
    433  6176				   .ahead3
    434  6176		       ae ac 8e 	      ldx	UDP_DATA_IN+38
    435  6179		       8e cf 31 	      stx	IN_XPOSHIGH+4
    436  617c		       f0 02		      beq	.ahead4
    437  617e		       09 10		      ora	#16
    438  6180				   .ahead4
    439  6180		       ae b8 8e 	      ldx	UDP_DATA_IN+50
    440  6183		       8e d0 31 	      stx	IN_XPOSHIGH+5
    441  6186		       f0 02		      beq	.ahead5
    442  6188		       09 20		      ora	#32
    443  618a				   .ahead5
    444  618a		       ae c4 8e 	      ldx	UDP_DATA_IN+62
    445  618d		       8e d1 31 	      stx	IN_XPOSHIGH+6
    446  6190		       f0 02		      beq	.ahead6
    447  6192		       09 40		      ora	#64
    448  6194				   .ahead6
    449  6194		       ae d0 8e 	      ldx	UDP_DATA_IN+74
    450  6197		       8e d2 31 	      stx	IN_XPOSHIGH+7
    451  619a		       f0 02		      beq	.ahead7
    452  619c		       09 80		      ora	#128
    453  619e				   .ahead7
    454  619e							;sta .self+1
    455  619e							;lda $d010
    456  619e							;and #1
    457  619e							;.self
    458  619e							;ora #$ff ;self-mod!
    459  619e							;sta $d010
    460  619e		       8d db 31 	      sta	IN_XPOS_D010
    461  61a1
    462  61a1							;--------------------------------------
    463  61a1				   MYUDP_PROCESS_x
    464  61a1		       a9 01		      lda	#$01
    465  61a3		       8d 59 5e 	      sta	PACKET_RECEIVED
    466  61a6		       60		      rts
    467  61a7
    468  61a7
    469  61a7							; -------------------------------------------------------------------------
    470  61a7							; Do Checksum here
    471  61a7				   CHECKSUM
    472  61a7							; lda INPACKET+????   ; A now holds the checksum we received
    473  61a7							; sta RCV_CSUM
    474  61a7
    475  61a7							;Point x:a to start of received packet
    476  61a7							;and calculate our own checksum
    477  61a7		       a2 86		      ldx	#<(INPACKET+$2A)
    478  61a9		       a9 8e		      lda	#>(INPACKET+$2A)
    479  61ab		       88		      dey		; So we aren't including the checksum byte itself
    480  61ac							; jsr DATACHECKSUM
    481  61ac
    482  61ac		       ad 78 5d 	      lda	CSUM
    483  61af							;sta CSUM_SAVE
    484  61af
    485  61af		       ad d3 5f 	      lda	RCV_CSUM
    486  61b2		       cd 78 5d 	      cmp	CSUM
    487  61b5							; Zero bit now contains whether or not checksum matches, use bne/beq
    488  61b5		       60		      rts
------- FILE racer-main.asm
------- FILE SIXNET.ASM LEVEL 2 PASS 2
      0  61b6					      include	"SIXNET.ASM"	; Must always be last so buffer is at end!
      1  61b6							;Source by Six of Style (Oliver VieBrooks)		 _,.-------.,_
      2  61b6
      3  61b6				   net_init
      4  61b6		       20 0d 6a 	      jsr	CARD_DETECT
      5  61b9		       b0 5b		      bcs	detect_ERROR
      6  61bb		       c9 01		      cmp	#$01
      7  61bd		       d0 17		      bne	f_RR
      0  61bf					      PRINT	CG_GRN,"ETH64 DETECTED",CRLF
      1  61bf		       20 60 63 	      jsr	prns
      2  61c2		       1e 45 54 48*	      dc.b	CG_GRN,"ETH64 DETECTED",CRLF,0
      9  61d3		       4c fa 61 	      jmp	init
      0  61d6				   f_RR       PRINT	"RR-NET COMPATIBLE CARD DETECTED",CRLF
      1  61d6		       20 60 63 	      jsr	prns
      2  61d9		       52 52 2d 4e*	      dc.b	"RR-NET COMPATIBLE CARD DETECTED",CRLF,0
     11  61fa		       20 3f 6a    init       jsr	CARD_INIT
     12  61fd		       b0 34		      bcs	init_ERROR
      0  61ff					      PRINT	"CARD INITIALIZED",CRLF
      1  61ff		       20 60 63 	      jsr	prns
      2  6202		       43 41 52 44*	      dc.b	"CARD INITIALIZED",CRLF,0
     14  6214		       18		      clc
     15  6215		       60		      rts
     16  6216
     17  6216				   detect_ERROR
      0  6216					      PRINT	CG_RED, "NO CARD WAS DETECTED!", CRLF
      1  6216		       20 60 63 	      jsr	prns
      2  6219		       1c 4e 4f 20*	      dc.b	CG_RED, "NO CARD WAS DETECTED!", CRLF,0
     19  6231		       38		      sec
     20  6232		       60		      rts
     21  6233				   init_ERROR
      0  6233					      PRINT	CG_RED, "ERROR DURING INITIALIZATION!", CRLF
      1  6233		       20 60 63 	      jsr	prns
      2  6236		       1c 45 52 52*	      dc.b	CG_RED, "ERROR DURING INITIALIZATION!", CRLF,0
     23  6255		       38		      sec
     24  6256		       60		      rts
     25  6257
     26  6257				   get_macs		;returns carry clear if success, set if error
     27  6257							;get MAC for gateway
     28  6257		       a9 41		      lda	#<CARD_GATE
     29  6259		       a2 5e		      ldx	#>CARD_GATE
     30  625b		       20 f6 6c 	      jsr	GET_ARP
     31  625e		       b0 0f		      bcs	getmacs_ERR
     32  6260							;copy gateway mac
     33  6260		       a2 00		      ldx	#$00
     34  6262				   gm_0
     35  6262		       bd 6a 6b 	      lda	ARP_MAC,x
     36  6265		       9d 45 5e 	      sta	CARD_GATE_MAC,x
     37  6268		       e8		      inx
     38  6269		       e0 06		      cpx	#$06
     39  626b		       d0 f5		      bne	gm_0
     40  626d		       18		      clc
     41  626e		       60		      rts
     42  626f				   getmacs_ERR
     43  626f		       38		      sec
     44  6270		       60		      rts
     45  6271
     46  6271				   initTOD
     47  6271		       ad 0f dc 	      lda	$dc0f
     48  6274		       29 7f		      and	#$7f
     49  6276		       8d 0f dc 	      sta	$dc0f
     50  6279		       a9 00		      lda	#$00
     51  627b		       8d 08 dc 	      sta	$dc08
     52  627e		       60		      rts
     53  627f
     54  627f				   irq_init_old
     55  627f		       78		      sei
     56  6280		       a9 01		      lda	#$01
     57  6282		       8d 19 d0 	      sta	$d019
     58  6285		       8d 1a d0 	      sta	$d01a
     59  6288		       a9 1b		      lda	#$1b
     60  628a		       8d 11 d0 	      sta	$d011
     61  628d		       a9 7f		      lda	#$7f
     62  628f		       8d 0d dc 	      sta	$dc0d
     63  6292		       a9 31		      lda	#$31
     64  6294		       8d 12 d0 	      sta	$d012
     65  6297		       a9 ec		      lda	#<IRQ
     66  6299		       8d 14 03 	      sta	$0314
     67  629c		       a9 31		      lda	#>IRQ
     68  629e		       8d 15 03 	      sta	$0315
     69  62a1		       58		      cli
     70  62a2		       60		      rts
     71  62a3
     72  62a3							;===========================
     73  62a3							; Several changes by (LB)
     74  62a3							;===========================
     75  62a3
     76  62a3				   NETIRQ
     77  62a3							;This is now called from elsewhere, and IRQ is acked and so on there
     78  62a3
     79  62a3		       20 52 6a 	      jsr	CARD_POLL
     80  62a6		       f0 03		      beq	IRQx
     81  62a8
     82  62a8		       20 ac 62 	      jsr	IRQ_PACKET
     83  62ab				   IRQx
     84  62ab		       60		      rts
     85  62ac
     86  62ac							;==================
     87  62ac
     88  62ac				   IRQ_PACKET
     89  62ac		       20 65 6a 	      jsr	CARD_READ
     90  62af		       20 ba 6a 	      jsr	MAC_PROCESS
     91  62b2		       60		      rts
     92  62b3
     93  62b3
     94  62b3				   killirq
     95  62b3		       78		      sei
     96  62b4		       ee 19 d0 	      inc	$d019	;ack any pending vic irq
     97  62b7		       20 81 ff 	      jsr	$ff81
     98  62ba		       a9 31		      lda	#$31
     99  62bc		       8d 14 03 	      sta	$0314
    100  62bf		       a9 ea		      lda	#$ea
    101  62c1		       8d 15 03 	      sta	$0315
    102  62c4		       58		      cli
      0  62c5					      PRINT	"NETIRQ KILLED", CRLF
      1  62c5		       20 60 63 	      jsr	prns
      2  62c8		       4e 45 54 49*	      dc.b	"NETIRQ KILLED", CRLF,0
    104  62d7		       60		      rts
    105  62d8							;=============================================================================
    106  62d8							;MAIN MENU - Removed by (LB)
    107  62d8							;=============================================================================
    108  62d8
    109  62d8							;=============================================================================
    110  62d8							;VARIABLES AND DATA
    111  62d8
    112  62d8		       00	   pingcount  dc.b	$00
    113  62d9		       00	   TIMEOUT    dc.b	$00
    114  62da		       00	   TICKER     dc.b	$00
    115  62db							;=============================================================================
    116  62db							;INCLUDES
------- FILE checksum.asm LEVEL 3 PASS 2
      0  62db					      include	"checksum.asm"
      1  62db
      2  62db
      3  62db
      4  62db
      5  62db		       00 00	   MakeChecksumZp_Len dc.w	$0000
      6  62dd		       00 00	   MakeChecksumZp_Sum dc.w	$0000
      7  62df
      8  62df				   MakeChecksum
      9  62df							;clear sum
     10  62df		       a0 00		      ldy	#0
     11  62e1		       8c dd 62 	      sty	MakeChecksumZp_Sum
     12  62e4		       8c de 62 	      sty	MakeChecksumZp_Sum+1
     13  62e7
     14  62e7				   MakeChecksum_Page
     15  62e7							;less than a page to go?
     16  62e7		       ad dc 62 	      lda	MakeChecksumZp_Len+1
     17  62ea		       f0 0c		      beq	MakeChecksum_Rest
     18  62ec
     19  62ec		       a2 00		      ldx	#0	;do full page
     20  62ee		       20 0a 63 	      jsr	MakeChksum	;checksum current page
     21  62f1
     22  62f1		       e6 6b		      inc	MakeChecksumZp_Ptr+1	;next page
     23  62f3		       ce dc 62 	      dec	MakeChecksumZp_Len+1	;one less page to do
     24  62f6		       d0 ef		      bne	MakeChecksum_Page	;If it's not the last page, do it again
     25  62f8
     26  62f8				   MakeChecksum_Rest		;checksum remaining <page bytes
     27  62f8		       ae db 62 	      ldx	MakeChecksumZp_Len
     28  62fb		       20 0a 63 	      jsr	MakeChksum
     29  62fe
     30  62fe							;put sum in x:a, eor'ed by #$ffff
     31  62fe		       ad de 62 	      lda	MakeChecksumZp_Sum+1
     32  6301		       49 ff		      eor	#$ff
     33  6303		       aa		      tax
     34  6304		       ad dd 62 	      lda	MakeChecksumZp_Sum
     35  6307		       49 ff		      eor	#$ff
     36  6309		       60		      rts
     37  630a
     38  630a
     39  630a				   MakeChksum
     40  630a		       18		      clc
     41  630b				   MakeChksum0
     42  630b		       b1 6a		      lda	(MakeChecksumZp_Ptr),y
     43  630d		       6d dd 62 	      adc	MakeChecksumZp_Sum
     44  6310		       8d dd 62 	      sta	MakeChecksumZp_Sum
     45  6313		       c8		      iny
     46  6314		       ca		      dex
     47  6315		       f0 16		      beq	MakeChksum2
     48  6317
     49  6317		       b1 6a		      lda	(MakeChecksumZp_Ptr),y
     50  6319		       6d de 62 	      adc	MakeChecksumZp_Sum+1
     51  631c		       8d de 62 	      sta	MakeChecksumZp_Sum+1
     52  631f		       c8		      iny
     53  6320		       ca		      dex
     54  6321		       d0 e8		      bne	MakeChksum0
     55  6323
     56  6323				   MakeChksum1
     57  6323		       a9 00		      lda	#0
     58  6325		       6d dd 62 	      adc	MakeChecksumZp_Sum
     59  6328		       8d dd 62 	      sta	MakeChecksumZp_Sum
     60  632b		       90 0a		      bcc	MakeChksum3
     61  632d				   MakeChksum2
     62  632d		       a9 00		      lda	#0
     63  632f		       6d de 62 	      adc	MakeChecksumZp_Sum+1
     64  6332		       8d de 62 	      sta	MakeChecksumZp_Sum+1
     65  6335		       b0 ec		      bcs	MakeChksum1
     66  6337
     67  6337				   MakeChksum3
     68  6337		       60		      rts
     69  6338
------- FILE SIXNET.ASM
------- FILE utils.asm LEVEL 3 PASS 2
      0  6338					      include	"utils.asm"
      1  6338							;Source by Six of Style (Oliver VieBrooks)
      2  6338							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6338							;
      4  6338							;Last Updated 8/24/2005
      5  6338
      6  6338
      7  6338				   getanykey
      0  6338					      PRINT	CRLF,"PRESS ANY KEY TO CONTINUE",CRLF	;(LB)
      1  6338		       20 60 63 	      jsr	prns
      2  633b		       0d 50 52 45*	      dc.b	CRLF,"PRESS ANY KEY TO CONTINUE",CRLF,0
      9  6357				   gak0
     10  6357		       20 e4 ff 	      jsr	GETIN
     11  635a		       f0 fb		      beq	gak0
     12  635c		       60		      rts
     13  635d
     14  635d		       00	   px	      dc.b	$00
     15  635e		       00	   py	      dc.b	$00
     16  635f		       00	   pa	      dc.b	$00
     17  6360
     18  6360				   prns
     19  6360		       8d 5f 63 	      sta	pa
     20  6363		       8e 5d 63 	      stx	px
     21  6366		       8c 5e 63 	      sty	py
     22  6369
     23  6369							;jsr CLRCHN (LB) was causing problems with IDE64, also see iprns below
     24  6369		       68		      pla
     25  636a		       8d 7a 63 	      sta	addr$+1
     26  636d		       68		      pla
     27  636e		       8d 7b 63 	      sta	addr$+2
     28  6371		       ee 7a 63    loop$      inc	addr$+1
     29  6374		       d0 03		      bne	addr$
     30  6376		       ee 7b 63 	      inc	addr$+2
     31  6379		       ad aa aa    addr$      lda	$aaaa
     32  637c		       f0 06		      beq	out$
     33  637e		       20 d2 ff 	      jsr	CHROUT
     34  6381		       4c 71 63 	      jmp	loop$
     35  6384		       ad 7b 63    out$       lda	addr$+2
     36  6387		       48		      pha
     37  6388		       ad 7a 63 	      lda	addr$+1
     38  638b		       48		      pha
     39  638c
     40  638c		       ad 5f 63 	      lda	pa
     41  638f		       ae 5d 63 	      ldx	px
     42  6392		       ac 5e 63 	      ldy	py
     43  6395
     44  6395		       60		      rts
     45  6396
     46  6396							;print null terminated string found at x:a
     47  6396				   pnts
     48  6396		       8d 9f 63 	      sta	pnts_0+1
     49  6399		       8e a0 63 	      stx	pnts_0+2
     50  639c							;jsr CLRCHN   (LB) was causing problems on IDE64, also see iprns below
     51  639c		       a2 00		      ldx	#$00
     52  639e		       bd ff ff    pnts_0     lda	$ffff,x
     53  63a1		       f0 06		      beq	pntsx
     54  63a3		       20 d2 ff 	      jsr	CHROUT
     55  63a6		       4c 9e 63 	      jmp	pnts_0
     56  63a9				   pntsx
     57  63a9		       60		      rts
     58  63aa
     59  63aa							;Duplicate PRNS used from IRQ to avoid crossover
     60  63aa		       00	   ipx	      dc.b	$00
     61  63ab		       00	   ipy	      dc.b	$00
     62  63ac		       00	   ipa	      dc.b	$00
     63  63ad				   iprns
     64  63ad		       8d ac 63 	      sta	ipa
     65  63b0		       8e aa 63 	      stx	ipx
     66  63b3		       8c ab 63 	      sty	ipy
     67  63b6
     68  63b6							;jsr CLRCHN
     69  63b6		       68		      pla
     70  63b7		       8d c7 63 	      sta	iaddr$+1
     71  63ba		       68		      pla
     72  63bb		       8d c8 63 	      sta	iaddr$+2
     73  63be		       ee c7 63    iloop$     inc	iaddr$+1
     74  63c1		       d0 03		      bne	iaddr$
     75  63c3		       ee c8 63 	      inc	iaddr$+2
     76  63c6		       ad aa aa    iaddr$     lda	$aaaa
     77  63c9		       f0 06		      beq	iout$
     78  63cb		       20 d2 ff 	      jsr	CHROUT
     79  63ce		       4c be 63 	      jmp	iloop$
     80  63d1		       ad c8 63    iout$      lda	iaddr$+2
     81  63d4		       48		      pha
     82  63d5		       ad c7 63 	      lda	iaddr$+1
     83  63d8		       48		      pha
     84  63d9
     85  63d9		       ad ac 63 	      lda	ipa
     86  63dc		       ae aa 63 	      ldx	ipx
     87  63df		       ac ab 63 	      ldy	ipy
     88  63e2
     89  63e2		       60		      rts
     90  63e3
     91  63e3		       00 00	   as0	      dc.b	$00,$00
     92  63e5		       00 00	   as1	      dc.b	$00,$00
     93  63e7		       00 00	   res	      dc.b	$00,$00
     94  63e9
     95  63e9				   add16		;adds two 16-bit numbers (as0 + as1), returns 16-bit result in x:a
     96  63e9		       18		      clc
     97  63ea		       ad e3 63 	      lda	as0
     98  63ed		       6d e5 63 	      adc	as1
     99  63f0		       48		      pha
    100  63f1		       ad e4 63 	      lda	as0+$01
    101  63f4		       6d e6 63 	      adc	as1+$01
    102  63f7		       aa		      tax
    103  63f8		       68		      pla
    104  63f9		       60		      rts
    105  63fa
    106  63fa				   sub16		;subtracts two 16-bit numbers (as0-as1), returns 16-bit result in x:a
    107  63fa		       38		      sec
    108  63fb		       ad e3 63 	      lda	as0
    109  63fe		       ed e5 63 	      sbc	as1
    110  6401		       48		      pha
    111  6402		       ad e4 63 	      lda	as0+$01
    112  6405		       ed e6 63 	      sbc	as1+$01
    113  6408		       aa		      tax
    114  6409		       68		      pla
    115  640a		       60		      rts
    116  640b
    117  640b				   copybytes		; takes y bytes at x:a and transfers it to address in as0 (lo:hi)
    118  640b		       8e 24 64 	      stx	copybytes1+$02
    119  640e		       8d 23 64 	      sta	copybytes1+$01
    120  6411		       8c 2b 64 	      sty	copybytes2+$01
    121  6414		       ad e3 63 	      lda	as0
    122  6417		       8d 26 64 	      sta	as2+$01
    123  641a		       ad e4 63 	      lda	as0+$01
    124  641d		       8d 27 64 	      sta	as2+$02
    125  6420		       a2 00		      ldx	#$00
    126  6422				   copybytes1
    127  6422		       bd ff ff 	      lda	$ffff,x
    128  6425		       9d ff ff    as2	      sta	$ffff,x
    129  6428		       c8		      iny
    130  6429		       e8		      inx
    131  642a				   copybytes2
    132  642a		       e0 ff		      cpx	#$ff
    133  642c		       d0 f4		      bne	copybytes1
    134  642e		       60		      rts
    135  642f
    136  642f		       00 00	   CPY_LEN    dc.b	$00,$00
    137  6431				   copyblock		;src=CPY_SRC, dst=CPY_DST, len in x:a
    138  6431		       8e 30 64 	      stx	CPY_LEN+1
    139  6434		       8d 2f 64 	      sta	CPY_LEN
    140  6437
    141  6437		       a0 00		      ldy	#$00
    142  6439		       ae 30 64 	      ldx	CPY_LEN+1
    143  643c		       f0 0e		      beq	CPY_FRAG
    144  643e				   CPY_PAGE
    145  643e		       b1 63		      lda	(CPY_SRC),y
    146  6440		       91 65		      sta	(CPY_DST),y
    147  6442		       c8		      iny
    148  6443		       d0 f9		      bne	CPY_PAGE
    149  6445		       e6 64		      inc	CPY_SRC+1
    150  6447		       e6 66		      inc	CPY_DST+1
    151  6449		       ca		      dex
    152  644a		       d0 f2		      bne	CPY_PAGE
    153  644c				   CPY_FRAG
    154  644c		       cc 2f 64 	      cpy	CPY_LEN+0
    155  644f		       f0 07		      beq	CPY_DONE
    156  6451		       b1 63		      lda	(CPY_SRC),Y
    157  6453		       91 65		      sta	(CPY_DST),Y
    158  6455		       c8		      iny
    159  6456		       d0 f4		      bne	CPY_FRAG
    160  6458				   CPY_DONE
    161  6458		       60		      rts
    162  6459
    163  6459							;Input a string and store it in x:a, terminated with a null byte.
    164  6459							;max # of chars in y returns num of chars entered in y, carry set if run/stop
    165  6459		       00	   ICOUNT     dc.b	$00
    166  645a				   INPUT
    167  645a		       86 68		      stx	INPUT_PTR+1
    168  645c		       85 67		      sta	INPUT_PTR
    169  645e		       8c 83 64 	      sty	INPUT_1+1
    170  6461		       a9 00		      lda	#$00
    171  6463		       85 69		      sta	INPUT_Y
    172  6465				   INPUT_G
    173  6465		       20 e1 ff 	      jsr	STOP
    174  6468		       f0 22		      beq	INPUT_3
    175  646a		       20 e4 ff 	      jsr	GETIN
    176  646d		       f0 f6		      beq	INPUT_G
    177  646f		       a4 69		      ldy	INPUT_Y
    178  6471
    179  6471		       c9 a0		      cmp	#160
    180  6473		       b0 f0		      bcs	INPUT_G
    181  6475		       c9 0d		      cmp	#$0d
    182  6477		       f0 0d		      beq	INPUT_2
    183  6479
    184  6479		       91 67	   INPUT_0    sta	(INPUT_PTR),y
    185  647b		       20 d2 ff 	      jsr	$ffd2
    186  647e
    187  647e		       e6 69		      inc	INPUT_Y
    188  6480		       a5 69		      lda	INPUT_Y
    189  6482		       c9 ff	   INPUT_1    cmp	#$ff
    190  6484		       d0 df		      bne	INPUT_G
    191  6486				   INPUT_2
    192  6486		       a9 00		      lda	#$00
    193  6488		       91 67		      sta	(INPUT_PTR),y
    194  648a		       18		      clc
    195  648b		       60		      rts
    196  648c				   INPUT_3
    197  648c		       38		      sec
    198  648d		       60		      rts
    199  648e
    200  648e
    201  648e							; print hex  char $ of number in a
    202  648e		       00 00	   hexx       dc.b	$00,$00
    203  6490				   hexstr
    204  6490		       8e 8e 64 	      stx	hexx
    205  6493		       48		      pha
    206  6494		       29 f0		      and	#$f0
    207  6496		       18		      clc
    208  6497		       4a		      lsr
    209  6498		       4a		      lsr
    210  6499		       4a		      lsr
    211  649a		       4a		      lsr
    212  649b		       aa		      tax
    213  649c		       bd 2c 67 	      lda	hexstring,x
    214  649f		       20 d2 ff 	      jsr	$ffd2
    215  64a2
    216  64a2		       68		      pla
    217  64a3		       29 0f		      and	#$0f
    218  64a5		       aa		      tax
    219  64a6		       bd 2c 67 	      lda	hexstring,x
    220  64a9		       20 d2 ff 	      jsr	$ffd2
    221  64ac		       ae 8e 64 	      ldx	hexx
    222  64af		       60		      rts
    223  64b0
    224  64b0				   acc
    225  64b0		       00 00		      dc.b	$00,$00
    226  64b2				   aux
    227  64b2		       00 00		      dc.b	$00,$00
    228  64b4				   ext
    229  64b4		       00 00		      dc.b	$00,$00
    230  64b6				   decstr
    231  64b6
    232  64b6		       8d b0 64 	      STA	acc
    233  64b9		       8e b1 64 	      STX	acc+1
    234  64bc		       8c b2 64 	      STY	aux	;Base
    235  64bf		       a2 00		      LDX	#00
    236  64c1		       8e b3 64 	      STX	aux+1
    237  64c4				   decstrLOOP
    238  64c4		       20 e4 64 	      JSR	DIV16
    239  64c7		       e8		      INX
    240  64c8		       ad b4 64 	      LDA	ext
    241  64cb		       48		      PHA
    242  64cc		       ad b0 64 	      LDA	acc
    243  64cf		       0d b1 64 	      ORA	acc+1
    244  64d2		       d0 f0		      BNE	decstrLOOP	;Divide until result=0
    245  64d4		       68	   decstrPOOP PLA
    246  64d5		       09 30		      ORA	#$30	;Convert to chr$
    247  64d7		       c9 3a		      CMP	#$3A
    248  64d9		       90 02		      BCC	decstrPLOP
    249  64db		       69 06		      ADC	#$06	;$3A->A $3B->B etc.
    250  64dd		       20 d2 ff    decstrPLOP JSR	$FFD2
    251  64e0		       ca		      DEX
    252  64e1		       d0 f1		      BNE	decstrPOOP
    253  64e3		       60		      RTS
    254  64e4
    255  64e4				   DIV16
    256  64e4		       a9 00		      LDA	#0
    257  64e6		       8d b5 64 	      STA	ext+1
    258  64e9		       a0 10		      LDY	#$10
    259  64eb				   div16LOOP
    260  64eb		       0e b0 64 	      ASL	acc
    261  64ee		       2e b1 64 	      ROL	acc+1
    262  64f1		       2a		      ROL
    263  64f2		       2e b5 64 	      ROL	ext+1
    264  64f5		       48		      PHA
    265  64f6		       cd b2 64 	      CMP	aux
    266  64f9		       ad b5 64 	      LDA	ext+1
    267  64fc		       ed b3 64 	      SBC	aux+1
    268  64ff		       90 0b		      BCC	div16DIV2
    269  6501		       8d b5 64 	      STA	ext+1
    270  6504		       68		      PLA
    271  6505		       ed b2 64 	      SBC	aux
    272  6508		       48		      PHA
    273  6509		       ee b0 64 	      INC	acc
    274  650c		       68	   div16DIV2  PLA
    275  650d		       88		      DEY
    276  650e		       d0 db		      BNE	div16LOOP
    277  6510		       8d b4 64 	      STA	ext
    278  6513		       60		      RTS
    279  6514
    280  6514							;
    281  6514							;Prints the mac address indicated by the six bytes at (x:a)
    282  6514							;destroys a,x, preserves y
    283  6514							;
    284  6514				   printmac
    285  6514		       8c 37 65 	      sty	macprinty
    286  6517		       8e 21 65 	      stx	macprl+$02
    287  651a		       8d 20 65 	      sta	macprl+$01
    288  651d		       a0 00		      ldy	#$00
    289  651f				   macprl
    290  651f		       b9 ff ff 	      lda	$FFFF,y
    291  6522		       20 90 64 	      jsr	hexstr
    292  6525		       c0 05		      cpy	#$05
    293  6527		       f0 05		      beq	macpr2
    294  6529		       20 60 63 	      jsr	prns
    295  652c		       3a 00		      dc.b	":",0
    296  652e		       c8	   macpr2     iny
    297  652f		       c0 06		      cpy	#$06
    298  6531		       d0 ec		      bne	macprl
    299  6533		       ac 37 65 	      ldy	macprinty
    300  6536		       60		      rts
    301  6537		       00	   macprinty  dc.b	$00
    302  6538
    303  6538		       00	   printipy   dc.b	$00
    304  6539				   printip		;Address in x:a, preserves y
    305  6539		       8c 38 65 	      sty	printipy
    306  653c		       8d 47 65 	      sta	pipadr+$01
    307  653f		       8e 48 65 	      stx	pipadr+$02
    308  6542		       a0 00		      ldy	#$00
    309  6544				   printiploop
    310  6544		       98		      tya
    311  6545		       48		      pha
    312  6546
    313  6546		       b9 ff ff    pipadr     lda	$FFFF,y
    314  6549		       a2 00		      ldx	#$00
    315  654b		       a0 0a		      ldy	#$0a
    316  654d		       20 b6 64 	      jsr	decstr
    317  6550
    318  6550		       68		      pla
    319  6551		       a8		      tay
    320  6552		       48		      pha
    321  6553
    322  6553		       c0 03		      cpy	#$03
    323  6555		       f0 05		      beq	printiploop2
    324  6557
    325  6557		       20 60 63 	      jsr	prns
    326  655a		       2e 00		      dc.b	".",0
    327  655c
    328  655c				   printiploop2
    329  655c		       68		      pla
    330  655d		       a8		      tay
    331  655e		       c8		      iny
    332  655f		       c0 04		      cpy	#$04
    333  6561		       d0 e1		      bne	printiploop
    334  6563
    335  6563		       ac 38 65 	      ldy	printipy
    336  6566		       60		      rts
    337  6567
    338  6567							;Thank you, Steve Judd
    339  6567				   printnum
    340  6567		       8d b0 64 	      sta	acc
    341  656a		       8e b1 64 	      stx	acc+1
    342  656d		       8c b2 64 	      sty	aux
    343  6570		       a2 00		      ldx	#$00
    344  6572		       8e b3 64 	      stx	aux+1
    345  6575		       20 e4 64    pn_l       jsr	DIV16
    346  6578		       e8		      inx
    347  6579		       ad b4 64 	      lda	ext
    348  657c		       48		      pha
    349  657d		       ad b0 64 	      lda	acc
    350  6580		       0d b1 64 	      ora	acc+1
    351  6583		       d0 f0		      bne	pn_l
    352  6585		       68	   pn_l2      pla
    353  6586		       09 30		      ora	#$30
    354  6588		       c9 3a		      cmp	#$3a
    355  658a		       90 02		      bcc	pn_l3
    356  658c		       69 06		      adc	#$06
    357  658e		       20 d2 ff    pn_l3      jsr	CHROUT
    358  6591		       ca		      dex
    359  6592		       d0 f1		      bne	pn_l2
    360  6594		       60		      rts
    361  6595
    362  6595				   yesno		;returns 0 in a for no, 1 in a for yes, 2 for "quit"
      0  6595					      PRINT	"(y/n/q)"
      1  6595		       20 60 63 	      jsr	prns
      2  6598		       28 79 2f 6e*	      dc.b	"(y/n/q)",0
    364  65a0		       20 e4 ff    yn1	      jsr	GETIN
    365  65a3		       f0 fb		      beq	yn1
    366  65a5		       c9 59		      cmp	#89	;y
    367  65a7		       f0 17		      beq	yesnoyes
    368  65a9		       c9 d9		      cmp	#217	;Y
    369  65ab		       f0 13		      beq	yesnoyes
    370  65ad		       c9 4e		      cmp	#78	;n
    371  65af		       f0 12		      beq	yesnono
    372  65b1		       c9 ce		      cmp	#206	;N
    373  65b3		       f0 0e		      beq	yesnono
    374  65b5		       c9 51		      cmp	#81	;q
    375  65b7		       f0 0d		      beq	yesnoquit
    376  65b9		       c9 d1		      cmp	#209	;Q
    377  65bb		       f0 09		      beq	yesnoquit
    378  65bd		       4c a0 65 	      jmp	yn1
    379  65c0				   yesnoyes
    380  65c0		       a9 01		      lda	#$01
    381  65c2		       60		      rts
    382  65c3				   yesnono
    383  65c3		       a9 00		      lda	#$00
    384  65c5		       60		      rts
    385  65c6				   yesnoquit
    386  65c6		       a9 02		      lda	#$02
    387  65c8		       60		      rts
    388  65c9
    389  65c9		       00 00 00 00*gotmac     dc.b	$00,$00,$00,$00,$00,$00
    390  65cf				   getmac
      0  65cf					      PRINT	13,"mac: "
      1  65cf		       20 60 63 	      jsr	prns
      2  65d2		       0d 6d 61 63*	      dc.b	13,"mac: ",0
    392  65d9		       20 18 66 	      jsr	gethex
    393  65dc		       8d c9 65 	      sta	gotmac
      0  65df					      PRINT	":"
      1  65df		       20 60 63 	      jsr	prns
      2  65e2		       3a 00		      dc.b	":",0
    395  65e4		       20 18 66 	      jsr	gethex
    396  65e7		       8d ca 65 	      sta	gotmac+1
      0  65ea					      PRINT	":"
      1  65ea		       20 60 63 	      jsr	prns
      2  65ed		       3a 00		      dc.b	":",0
    398  65ef		       20 18 66 	      jsr	gethex
    399  65f2		       8d cb 65 	      sta	gotmac+2
      0  65f5					      PRINT	":"
      1  65f5		       20 60 63 	      jsr	prns
      2  65f8		       3a 00		      dc.b	":",0
    401  65fa		       20 18 66 	      jsr	gethex
    402  65fd		       8d cc 65 	      sta	gotmac+3
      0  6600					      PRINT	":"
      1  6600		       20 60 63 	      jsr	prns
      2  6603		       3a 00		      dc.b	":",0
    404  6605		       20 18 66 	      jsr	gethex
    405  6608		       8d cd 65 	      sta	gotmac+4
      0  660b					      PRINT	":"
      1  660b		       20 60 63 	      jsr	prns
      2  660e		       3a 00		      dc.b	":",0
    407  6610		       20 18 66 	      jsr	gethex
    408  6613		       8d ce 65 	      sta	gotmac+5
    409  6616		       60		      rts
    410  6617
    411  6617		       00	   ghr	      dc.b	$00
    412  6618				   gethex
    413  6618		       20 d7 66 	      jsr	gethexdig
    414  661b		       8a		      txa
    415  661c		       0a		      asl
    416  661d		       0a		      asl
    417  661e		       0a		      asl
    418  661f		       0a		      asl
    419  6620		       8d 17 66 	      sta	ghr
    420  6623		       20 d7 66 	      jsr	gethexdig
    421  6626		       8a		      txa
    422  6627		       0d 17 66 	      ora	ghr
    423  662a		       60		      rts
    424  662b
    425  662b
    426  662b							; Replaced with better version
    427  662b							;gotip
    428  662b							;	dc.b $00,$00,$00,$00
    429  662b
    430  662b							;getip
    431  662b							;	PRINT 13,"IP[0]: "
    432  662b							;	jsr getnum
    433  662b							;	sta gotip
    434  662b							;	PRINT 13,"IP[1]: "
    435  662b							;	jsr getnum
    436  662b							;	sta gotip+$01
    437  662b							;	PRINT 13,"IP[2]: "
    438  662b							;	jsr getnum
    439  662b							;	sta gotip+$02
    440  662b							;	PRINT 13,"IP[3]: "
    441  662b							;	jsr getnum
    442  662b							;	sta gotip+$03
    443  662b							;	rts
    444  662b
    445  662b		       00	   gny	      dc.b	$00
    446  662c				   getnum		;max 3 digits
    447  662c		       a9 00		      lda	#$00
    448  662e		       8d b1 66 	      sta	gns
    449  6631		       8d b2 66 	      sta	gns+$01
    450  6634		       8d b3 66 	      sta	gns+$02
    451  6637		       a0 00		      ldy	#$00
    452  6639		       8c 2b 66    gn0	      sty	gny
    453  663c		       20 b6 66 	      jsr	getdigit	;returns dec value in a
    454  663f		       ac 2b 66 	      ldy	gny
    455  6642		       c9 0d		      cmp	#$0d	;abort on return
    456  6644		       f0 0b		      beq	gn1
    457  6646		       99 b1 66 	      sta	gns,y
    458  6649		       c8		      iny
    459  664a		       c0 03		      cpy	#$03
    460  664c		       f0 2b		      beq	gn3
    461  664e		       4c 39 66 	      jmp	gn0
    462  6651
    463  6651				   gn1
    464  6651		       ad 2b 66 	      lda	gny
    465  6654		       f0 5a		      beq	gnx
    466  6656
    467  6656		       ad 2b 66 	      lda	gny
    468  6659		       c9 01		      cmp	#$01	;1 digit entered
    469  665b		       d0 04		      bne	gn2
    470  665d		       ad b1 66 	      lda	gns
    471  6660		       60		      rts
    472  6661
    473  6661				   gn2
    474  6661		       ad b1 66 	      lda	gns	;mul gns+1 * 10 and store in gnr+1
    475  6664		       0a		      asl		;*2
    476  6665		       8d b4 66 	      sta	gnr
    477  6668		       0a		      asl		;*4	    ;again multiply by 2 (*4)
    478  6669		       0a		      asl		;*8	    ;again multiply by 2 (*8)
    479  666a		       18		      clc
    480  666b		       6d b4 66 	      adc	gnr
    481  666e		       8d b4 66 	      sta	gnr
    482  6671
    483  6671		       ad b4 66 	      lda	gnr
    484  6674		       18		      clc
    485  6675		       6d b2 66 	      adc	gns+1
    486  6678		       60		      rts
    487  6679
    488  6679				   gn3
    489  6679		       ad b1 66 	      lda	gns	;mul gns*100 and store in gnr
    490  667c		       0a		      asl		;*2 (*4 + *32 + *64)
    491  667d		       0a		      asl		;*4
    492  667e		       8d b4 66 	      sta	gnr
    493  6681		       0a		      asl		;*8
    494  6682		       0a		      asl		;*16
    495  6683		       0a		      asl		;*32
    496  6684		       48		      pha
    497  6685		       18		      clc
    498  6686		       6d b4 66 	      adc	gnr
    499  6689		       8d b4 66 	      sta	gnr
    500  668c		       68		      pla
    501  668d		       0a		      asl		;*64
    502  668e		       18		      clc
    503  668f		       6d b4 66 	      adc	gnr
    504  6692		       8d b4 66 	      sta	gnr
    505  6695
    506  6695		       ad b2 66 	      lda	gns+1	;mul gns+1 * 10 and store in gnr+1
    507  6698		       0a		      asl		;*2
    508  6699		       8d b5 66 	      sta	gnr+1
    509  669c		       0a		      asl		;*4	    ;again multiply by 2 (*4)
    510  669d		       0a		      asl		;*8	    ;again multiply by 2 (*8)
    511  669e		       18		      clc
    512  669f		       6d b5 66 	      adc	gnr+1
    513  66a2		       8d b5 66 	      sta	gnr+1
    514  66a5
    515  66a5		       ad b4 66 	      lda	gnr
    516  66a8		       18		      clc
    517  66a9		       6d b5 66 	      adc	gnr+1
    518  66ac		       18		      clc
    519  66ad		       6d b3 66 	      adc	gns+2
    520  66b0				   gnx
    521  66b0		       60		      rts
    522  66b1
    523  66b1
    524  66b1
    525  66b1		       00 00 00    gns	      dc.b	$00,$00,$00
    526  66b4		       00 00	   gnr	      dc.b	$00,$00
    527  66b6
    528  66b6				   getdigit		;returns digit in a,value in x
    529  66b6		       20 e4 ff 	      jsr	GETIN
    530  66b9		       f0 fb		      beq	getdigit
    531  66bb		       c9 0d		      cmp	#$0d
    532  66bd		       f0 17		      beq	gd2
    533  66bf		       a2 00		      ldx	#$00
    534  66c1				   gd0
    535  66c1		       dd 22 67 	      cmp	numstr,x
    536  66c4		       f0 08		      beq	gd1
    537  66c6		       e8		      inx
    538  66c7		       e0 0b		      cpx	#$0b
    539  66c9		       f0 eb		      beq	getdigit
    540  66cb		       4c c1 66 	      jmp	gd0
    541  66ce				   gd1
    542  66ce		       48		      pha
    543  66cf		       20 d2 ff 	      jsr	$ffd2
    544  66d2		       68		      pla
    545  66d3		       38		      sec
    546  66d4		       e9 30		      sbc	#$30
    547  66d6				   gd2
    548  66d6		       60		      rts
    549  66d7
    550  66d7				   gethexdig		;returns hex digit in a,value in x
    551  66d7		       20 e4 ff 	      jsr	GETIN
    552  66da		       f0 fb		      beq	gethexdig
    553  66dc		       c9 0d		      cmp	#$0d
    554  66de		       f0 17		      beq	ghd2
    555  66e0		       a2 00		      ldx	#$00
    556  66e2				   ghd0
    557  66e2		       dd 2c 67 	      cmp	hexstring,x
    558  66e5		       f0 08		      beq	ghd1
    559  66e7		       e8		      inx
    560  66e8		       e0 10		      cpx	#$10
    561  66ea		       f0 eb		      beq	gethexdig
    562  66ec		       4c e2 66 	      jmp	ghd0
    563  66ef				   ghd1
    564  66ef		       48		      pha
    565  66f0		       20 d2 ff 	      jsr	$ffd2
    566  66f3		       68		      pla
    567  66f4		       38		      sec
    568  66f5		       e9 30		      sbc	#$30
    569  66f7				   ghd2
    570  66f7		       60		      rts
    571  66f8
    572  66f8		       00 00 00 00 ipm	      dc.b	$00,$00,$00,$00
    573  66fc
    574  66fc		       00	   IPMTemp    dc.b	$00
    575  66fd
    576  66fd							;IF CARD_IP AND CARD_MASK = DEST_IP AND CARD_MASK THEN LOCAL
    577  66fd				   IPMASK		; expects pointer to IP in x:a,
    578  66fd							; returns carry clear if local,
    579  66fd							; carry set if not.
    580  66fd		       8d 06 67 	      sta	IPM0+1
    581  6700		       8e 07 67 	      stx	IPM0+2
    582  6703
    583  6703		       a0 00		      ldy	#$00
    584  6705				   IPM0
    585  6705		       b9 ff ff 	      lda	$FFFF,y
    586  6708		       39 3d 5e 	      and	CARD_MASK,y
    587  670b							;	sta $0500,y
    588  670b
    589  670b		       8d fc 66 	      sta	IPMTemp
    590  670e
    591  670e		       b9 39 5e 	      lda	CARD_IP,y
    592  6711		       39 3d 5e 	      and	CARD_MASK,y
    593  6714
    594  6714		       cd fc 66 	      cmp	IPMTemp
    595  6717		       d0 07		      bne	IPM_NL
    596  6719		       c8		      iny
    597  671a		       c0 04		      cpy	#$04
    598  671c		       d0 e7		      bne	IPM0
    599  671e
    600  671e		       18		      clc
    601  671f		       60		      rts
    602  6720				   IPM_NL
    603  6720		       38		      sec
    604  6721		       60		      rts
    605  6722
    606  6722		       30 31 32 33*numstr     dc.b	"0123456789"
    607  672c
    608  672c				   hexstring
    609  672c		       30 31 32 33*	      dc.b	"0123456789ABCDEF"
    610  673c
    611  673c				   pet2asc		;petscii char in a returns ascii char in a
    612  673c							;if a > 64 AND a <91 THEN a = a + 32
    613  673c							;if a > 96 AND a <123 THEN a = a - 32
    614  673c		       c9 61		      cmp	#97
      0  673e					      blt	pet2asc0
      1  673e		       90 08		      bcc	pet2asc0
    616  6740							;it's greater than 96
    617  6740		       c9 7b		      cmp	#123
      0  6742					      bge	pet2ascx
      1  6742		       b0 0f		      bcs	pet2ascx
    619  6744		       38		      sec
    620  6745		       e9 20		      sbc	#$20
    621  6747		       60		      rts
    622  6748				   pet2asc0
    623  6748		       c9 41		      cmp	#65
      0  674a					      blt	pet2ascx
      1  674a		       90 07		      bcc	pet2ascx
    625  674c		       c9 5b		      cmp	#91
      0  674e					      bge	pet2ascx
      1  674e		       b0 03		      bcs	pet2ascx
    627  6750		       18		      clc
    628  6751		       69 20		      adc	#$20
    629  6753				   pet2ascx
    630  6753		       60		      rts
    631  6754
------- FILE SIXNET.ASM
    119  6754
------- FILE ETH64.ASM LEVEL 3 PASS 2
      0  6754					      include	"ETH64.ASM"
      1  6754							;Source by Six of Style (Oliver VieBrooks)
      2  6754							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6754							;
      4  6754							;Last Updated 8/24/2005
      5  6754							;
      6  6754							;=============================================================================
      7  6754							;ETH64 CONSTANTS
      8  6754		       de 10	   ETH64_BASE =	$de10	;ETH64 Base Address
      9  6754		       de 1e	   ETH64_BANK =	ETH64_BASE+$0e	;Bank select register		   R/W (2B)
     10  6754
     11  6754							;Register bank 0
     12  6754		       de 10	   ETH64_TCR  =	ETH64_BASE	;Transmition control register	   R/W (2B)
     13  6754		       de 12	   ETH64_EPHSR =	ETH64_BASE+$02	;EPH status register		   R/O (2B)
     14  6754		       de 14	   ETH64_RCR  =	ETH64_BASE+4	;Receive control register	   R/W (2B)
     15  6754		       de 16	   ETH64_ECR  =	ETH64_BASE+6	;Counter register		   R/O (2B)
     16  6754		       de 18	   ETH64_MIR  =	ETH64_BASE+8	;Memory information register	   R/O (2B)
     17  6754		       de 1a	   ETH64_MCR  =	ETH64_BASE+$0a	;Memory Config. reg.	 +0 R/W +1 R/O (2B)
     18  6754
     19  6754							;Register bank 1
     20  6754		       de 10	   ETH64_CR   =	ETH64_BASE	;Configuration register	   R/W (2B)
     21  6754		       de 12	   ETH64_BAR  =	ETH64_BASE+2	;Base address register 	   R/W (2B)
     22  6754		       de 14	   ETH64_IAR  =	ETH64_BASE+4	;Individual address register	   R/W (6B)
     23  6754		       de 1a	   ETH64_GPR  =	ETH64_BASE+$0a	;General address register	   R/W (2B)
     24  6754		       de 1c	   ETH64_CTR  =	ETH64_BASE+$0c	;Control register		   R/W (2B)
     25  6754
     26  6754							;Register bank 2
     27  6754		       de 10	   ETH64_MMUCR =	ETH64_BASE	;MMU command register		   W/O (1B)
     28  6754		       de 11	   ETH64_AUTOTX =	ETH64_BASE+1	;AUTO TX start register	   R/W (1B)
     29  6754		       de 12	   ETH64_PNR  =	ETH64_BASE+2	;Packet number register	   R/W (1B)
     30  6754		       de 13	   ETH64_ARR  =	ETH64_BASE+3	;Allocation result register	   R/O (1B)
     31  6754		       de 14	   ETH64_FIFO =	ETH64_BASE+4	;FIFO ports register		   R/O (2B)
     32  6754		       de 16	   ETH64_PTR  =	ETH64_BASE+6	;Pointer register		   R/W (2B)
     33  6754		       de 18	   ETH64_DATA =	ETH64_BASE+8	;Data register 		   R/W (4B)
     34  6754		       de 1c	   ETH64_IST  =	ETH64_BASE+$0c	;Interrupt status register	   R/O (1B)
     35  6754		       de 1c	   ETH64_ACK  =	ETH64_BASE+$0c	;Interrupt acknowledge register   W/O (1B)
     36  6754		       de 1d	   ETH64_MSK  =	ETH64_BASE+$0d	;Interrupt mask register	   R/W (1B)
     37  6754
     38  6754							;Register bank 3
     39  6754		       de 10	   ETH64_MT   =	ETH64_BASE	;Multicast table		   R/W (8B)
     40  6754		       de 18	   ETH64_MGMT =	ETH64_BASE+8	;Management interface		   R/W (2B)
     41  6754		       de 1a	   ETH64_REV  =	ETH64_BASE+$0a	;Revision register		   R/W (2B)
     42  6754		       de 1c	   ETH64_ERCV =	ETH64_BASE+$0c	;Early RCV register		   R/W (2B)
     43  6754
     44  6754							;=============================================================================
     45  6754							;ETH64 SEND PACKET
     46  6754				   ETH64_SEND
     47  6754							;bank 2
     48  6754		       a9 02		      lda	#$02
     49  6756		       8d 1e de 	      sta	ETH64_BANK
     50  6759							;only allocate one block
     51  6759		       a9 00		      lda	#$00
     52  675b		       09 20		      ora	#%00100000	;Command 0010: Allocate Memory for TX
     53  675d		       8d 10 de 	      sta	ETH64_MMUCR
     54  6760
     55  6760							;Wait for up to 200us
     56  6760		       a2 08		      ldx	#8
     57  6762				   lan91c96_send3
     58  6762		       ad 1c de 	      lda	ETH64_IST
     59  6765		       29 08		      and	#%00001000	;Check ALLOC_INT on status register
     60  6767		       d0 04		      bne	lan91c96_send4
     61  6769		       ca		      dex
     62  676a		       d0 f6		      bne	lan91c96_send3
     63  676c		       60		      rts		;Choked, return (error?)
     64  676d
     65  676d				   lan91c96_send4
     66  676d							;Acknowledge int.
     67  676d		       a9 08		      lda	#%00001000
     68  676f		       8d 1c de 	      sta	ETH64_ACK
     69  6772
     70  6772		       ad 13 de 	      lda	ETH64_ARR	;Get address from Allocation Result Register
     71  6775		       8d 12 de 	      sta	ETH64_PNR	;And use it to set our packet address
     72  6778
     73  6778		       a9 00		      lda	#0
     74  677a		       8d 16 de 	      sta	ETH64_PTR
     75  677d		       a9 40		      lda	#%01000000	;AUTO INCR.
     76  677f		       8d 17 de 	      sta	ETH64_PTR+1
     77  6782
     78  6782		       a9 00		      lda	#0	;Status written by CSMA
     79  6784		       8d 18 de 	      sta	ETH64_DATA
     80  6787		       8d 18 de 	      sta	ETH64_DATA
     81  678a							;Packet size is $2a + overhead (6 bytes) = $30
     82  678a		       a9 2f		      lda	#$2f	;packet length lo-byte
     83  678c		       8d 18 de 	      sta	ETH64_DATA
     84  678f		       a9 00		      lda	#$00	;packet length hi-byte
     85  6791		       8d 18 de 	      sta	ETH64_DATA
     86  6794
     87  6794							;Write actual packet to Transmit
     88  6794		       a2 00		      ldx	#$00
     89  6796				   lan91c96_sendloop
     90  6796		       bd 5c 92 	      lda	OUTPACKET,x
     91  6799		       8d 18 de 	      sta	ETH64_DATA
     92  679c		       e8		      inx
     93  679d		       e0 2a		      cpx	#$2a
     94  679f		       d0 f5		      bne	lan91c96_sendloop
     95  67a1		       a9 20		      lda	#%00100000
     96  67a3		       8d 18 de 	      sta	ETH64_DATA	;Control byte
     97  67a6		       a9 c0		      lda	#%11000000	;ENQUEUE PACKET - transmit packet
     98  67a8		       8d 10 de 	      sta	ETH64_MMUCR
     99  67ab		       60		      rts
    100  67ac
    101  67ac
    102  67ac				   ETH64_READ
    103  67ac		       ee 5a 8e 	      inc	RXCOUNT
    104  67af		       d0 03		      bne	ETH64_Read1
    105  67b1		       ee 5b 8e 	      inc	RXCOUNT+$01
    106  67b4				   ETH64_Read1
    107  67b4		       a9 00		      lda	#0
    108  67b6		       8d 16 de 	      sta	ETH64_PTR
    109  67b9		       a9 e0		      lda	#%11100000	;RCV,AUTO INCR.,READ
    110  67bb		       8d 17 de 	      sta	ETH64_PTR+1
    111  67be		       ad 18 de 	      lda	ETH64_DATA	;Status word
    112  67c1		       ad 18 de 	      lda	ETH64_DATA
    113  67c4		       8d 56 8e 	      sta	IN_PACKET_STATUS	;High byte only
    114  67c7		       ad 18 de 	      lda	ETH64_DATA	;Total number of bytes
    115  67ca
    116  67ca		       8d 52 8e 	      sta	IN_PACKET_LENGTH
    117  67cd		       ad 18 de 	      lda	ETH64_DATA
    118  67d0		       8d 53 8e 	      sta	IN_PACKET_LENGTH+1
    119  67d3							; Last word contain 'last data byte' and $60
    120  67d3							; or 'fill byte' and $40
    121  67d3		       18		      clc
    122  67d4		       ad 53 8e 	      lda	IN_PACKET_LENGTH+1
    123  67d7		       e9 06		      sbc	#$06
    124  67d9		       90 03		      bcc	ETH64_Read2
    125  67db		       ce 52 8e 	      dec	IN_PACKET_LENGTH
    126  67de				   ETH64_Read2
    127  67de							;The packet contains 3 extra words
    128  67de							;packet_length -= 6
    129  67de		       ad 56 8e 	      lda	IN_PACKET_STATUS
    130  67e1		       29 10		      and	#$10
    131  67e3		       f0 08		      beq	ETH64_Read3
    132  67e5		       ee 53 8e 	      inc	IN_PACKET_LENGTH+1
    133  67e8		       d0 03		      bne	ETH64_Read3
    134  67ea		       ee 52 8e 	      inc	IN_PACKET_LENGTH
    135  67ed				   ETH64_Read3
    136  67ed							;Set zero-page pointer to our incoming packet area.
    137  67ed		       a9 5c		      lda	#<INPACKET
    138  67ef		       85 57		      sta	RECV_PTR
    139  67f1		       a9 8e		      lda	#>INPACKET
    140  67f3		       85 58		      sta	RECV_PTR+$01
    141  67f5							;Read in packet to our incoming packet buffer
    142  67f5		       a0 00		      ldy	#$00
    143  67f7		       ae 53 8e 	      ldx	IN_PACKET_LENGTH+$01
    144  67fa		       f0 0d		      beq	ETH64_Read4	;packet_length < 256
    145  67fc				   R5
    146  67fc		       ad 18 de 	      lda	ETH64_DATA
    147  67ff		       91 57		      sta	(RECV_PTR),y
    148  6801		       c8		      iny
    149  6802		       d0 f8		      bne	R5
    150  6804		       e6 58		      inc	RECV_PTR+1
    151  6806		       ca		      dex
    152  6807		       d0 f3		      bne	R5
    153  6809				   ETH64_Read4
    154  6809		       ad 18 de 	      lda	ETH64_DATA
    155  680c		       91 57		      sta	(RECV_PTR),y
    156  680e		       c8		      iny
    157  680f		       cc 52 8e 	      cpy	IN_PACKET_LENGTH
    158  6812		       d0 f5		      bne	ETH64_Read4
    159  6814							;Remove and release RX packet from FIFO
    160  6814		       a9 80		      lda	#%10000000
    161  6816		       8d 10 de 	      sta	ETH64_MMUCR
    162  6819		       60		      rts
    163  681a
    164  681a							;=============================================================================
    165  681a							;ETH64 POLL FOR PACKET
    166  681a
    167  681a				   ETH64_POLL
    168  681a							;Select Bank 2
    169  681a		       a9 02		      lda	#$02
    170  681c		       8d 1e de 	      sta	ETH64_BANK
    171  681f		       ad 1c de 	      lda	ETH64_IST
    172  6822		       8d 00 04 	      sta	$0400
    173  6825		       29 01		      and	#%00000001	;RCV INT
    174  6827		       d0 04		      bne	ETH64_P0
    175  6829							;No packet available
    176  6829		       a9 00		      lda	#$00
    177  682b		       18		      clc
    178  682c		       60		      rts
    179  682d				   ETH64_P0		;packet
    180  682d		       a9 01		      lda	#$01
    181  682f		       18		      clc
    182  6830		       60		      rts
    183  6831
    184  6831
    185  6831
    186  6831				   ETH64_INIT
    187  6831							;Select Bank 0
    188  6831		       a9 00		      lda	#$00
    189  6833		       8d 1e de 	      sta	ETH64_BANK
    190  6836							; Reset ETH card
    191  6836		       a9 80		      lda	#%10000000	;Software reset
    192  6838		       8d 15 de 	      sta	ETH64_RCR+1
    193  683b		       a9 00		      lda	#0
    194  683d		       8d 14 de 	      sta	ETH64_RCR
    195  6840		       8d 15 de 	      sta	ETH64_RCR+1
    196  6843							; delay
    197  6843		       a2 00		      ldx	#0
    198  6845				   ETH64_init2
    199  6845		       c1 ff		      cmp	($ff,x)	;6 cycles
    200  6847		       c1 ff		      cmp	($ff,x)	;6 cycles
    201  6849		       ca		      dex		;2 cycles
    202  684a		       d0 f9		      bne	ETH64_init2	;3 cycles
    203  684c							;17*256=4352 => 4,4 ms
    204  684c							; Enable transmit and receive
    205  684c		       a9 81		      lda	#%10000001	;Enable transmit TXENA, PAD_EN
    206  684e		       8d 10 de 	      sta	ETH64_TCR
    207  6851		       a9 02		      lda	#%00000010	;promisc mode
    208  6853		       8d 14 de 	      sta	ETH64_RCR
    209  6856		       a9 03		      lda	#%00000011	;Enable receive, strip CRC ???
    210  6858		       8d 15 de 	      sta	ETH64_RCR+1
    211  685b		       ad 11 de 	      lda	ETH64_CR+1
    212  685e		       09 10		      ora	#%00010000	;No wait (IOCHRDY)
    213  6860		       8d 11 de 	      sta	ETH64_CR+1
    214  6863		       a9 09		      lda	#%00001001	;Auto release
    215  6865		       8d 1d de 	      sta	ETH64_CTR+1
    216  6868							;Select Bank 1
    217  6868		       a9 01		      lda	#$01
    218  686a		       8d 1e de 	      sta	ETH64_BANK
    219  686d							; Set MAC address
    220  686d		       ad 33 5e 	      lda	CARD_MAC
    221  6870		       8d 14 de 	      sta	ETH64_IAR
    222  6873		       ad 34 5e 	      lda	CARD_MAC+1
    223  6876		       8d 15 de 	      sta	ETH64_IAR+1
    224  6879		       ad 35 5e 	      lda	CARD_MAC+2
    225  687c		       8d 16 de 	      sta	ETH64_IAR+2
    226  687f		       ad 36 5e 	      lda	CARD_MAC+3
    227  6882		       8d 17 de 	      sta	ETH64_IAR+3
    228  6885		       ad 37 5e 	      lda	CARD_MAC+4
    229  6888		       8d 18 de 	      sta	ETH64_IAR+4
    230  688b		       ad 38 5e 	      lda	CARD_MAC+5
    231  688e		       8d 19 de 	      sta	ETH64_IAR+5
    232  6891							;Set ETH64 Interrupt Mask
    233  6891		       a9 0f		      lda	#%00001111	;RCV INT, ALLOC INT, TX INT, TX EMPTY
    234  6893		       8d 1d de 	      sta	ETH64_MSK
    235  6896		       18		      clc
    236  6897		       60		      rts
------- FILE SIXNET.ASM
------- FILE RRNET.ASM LEVEL 3 PASS 2
      0  6898					      include	"RRNET.ASM"
      1  6898
      2  6898							;RR-Net Card Driver
      3  6898							;Part of SixNet
      4  6898							;Inspired by the work of Doc Bacardi
      5  6898							;
      6  6898							;LAST MODIFIED: 08/28/2005
      7  6898
      8  6898							;=============================================================================
      9  6898							;RRNET CONSTANTS
     10  6898		       de 02	   RRNET_PAGE =	$de02
     11  6898		       de 04	   RRNET_DAT0 =	$de04
     12  6898		       de 06	   RRNET_DAT1 =	$de06
     13  6898		       de 08	   RRNET_RXTX0 =	$de08
     14  6898		       de 0a	   RRNET_RXTX1 =	$de0a
     15  6898		       de 0c	   RRNET_TXCMD =	$de0c
     16  6898		       de 0e	   RRNET_TXLEN =	$de0e
     17  6898
     18  6898		       63 0e	   RRNET_MAGIC =	$630e	;Magic word to detect RRNET
     19  6898		       00 55	   RRNET_RESET =	$0055	;Word used to reset RRNET
     20  6898		       0d 05	   RRNET_PROMISC =	$0d05	;Accept broadcast and directed packets
     21  6898		       00 d3	   RRNET_RXTXEN =	$00d3	; Enable transmit, receive
     22  6898
     23  6898							;Packet Page Register Pointer Constants
     24  6898		       00 00	   RRNET_PID  =	$00	;$0000
     25  6898		       00 01	   RRREG_RXCFG =	$01	;$0102
     26  6898		       00 02	   RRREG_RXCTL =	$02	;$0104
     27  6898		       00 03	   RRREG_TXCFG =	$03	;$0106
     28  6898		       00 04	   RRREG_TXCMD =	$04	;$0108
     29  6898		       00 05	   RRREG_BUFCFG =	$05	;$010a
     30  6898
     31  6898		       00 06	   RRREG_LINECTL =	$06	;$0112
     32  6898		       00 07	   RRREG_SELFCTL =	$07	;$0114
     33  6898		       00 08	   RRREG_BUSCTL =	$08	;$0116
     34  6898		       00 09	   RRREG_TESTCTL =	$09	;$0118
     35  6898
     36  6898		       00 0a	   RRREG_RXEVENT =	$0a	;$0124
     37  6898		       00 0b	   RRREG_TXEVENT =	$0b	;$0128
     38  6898		       00 0c	   RRREG_BUFEVENT =	$0c
     39  6898
     40  6898		       00 0d	   RRREG_RXMISS =	$0d
     41  6898		       00 0e	   RRREG_TXCOL =	$0e
     42  6898
     43  6898		       00 0f	   RRREG_LINEST =	$0f
     44  6898		       00 10	   RRREG_SELFST =	$10
     45  6898		       00 11	   RRREG_BUSST =	$11
     46  6898
     47  6898		       00 12	   RRREG_IA0  =	$12	;MAC Address, bytes 0-1
     48  6898		       00 13	   RRREG_IA1  =	$13	;MAC Address, bytes 2-3
     49  6898		       00 14	   RRREG_IA2  =	$14	;MAC Address, bytes 4-5
     50  6898
     51  6898		       00 c9	   RROP_BUFREQ =	$00c9
     52  6898
     53  6898							;Packet Page Register Address Hi/Lo Tables
     54  6898				   RRREG_LO
     55  6898		       00 02 04 06*	      dc.b	$00,$02,$04,$06,$08,$0a,$12,$14
     56  68a0		       16 18 24 28*	      dc.b	$16,$18,$24,$28,$2c,$30,$32,$34
     57  68a8		       36 38 58 5a*	      dc.b	$36,$38,$58,$5a,$5c
     58  68ad
     59  68ad				   RRREG_HI
     60  68ad		       00 01 01 01*	      dc.b	$00,$01,$01,$01,$01,$01,$01,$01
     61  68b5		       01 01 01 01*	      dc.b	$01,$01,$01,$01,$01,$01,$01,$01
     62  68bd		       01 01 01 01*	      dc.b	$01,$01,$01,$01,$01
     63  68c2
     64  68c2							;=============================================================================
     65  68c2							;RRNET SEND
     66  68c2				   RRNET_SEND
     67  68c2							;	PRINT 13,"SENDING PACKET",13
     68  68c2							;Send Data Start Address
     69  68c2		       a9 5c		      lda	#<OUTPACKET
     70  68c4		       85 59		      sta	XMIT_PTR
     71  68c6		       a9 92		      lda	#>OUTPACKET
     72  68c8		       85 5a		      sta	XMIT_PTR+$01
     73  68ca
     74  68ca							;Allocate Buffer
     75  68ca		       a9 c9		      lda	#<RROP_BUFREQ
     76  68cc		       8d 0c de 	      sta	RRNET_TXCMD
     77  68cf		       a9 00		      lda	#>RROP_BUFREQ
     78  68d1		       8d 0d de 	      sta	RRNET_TXCMD+$01
     79  68d4
     80  68d4							;Set Transmit Length
     81  68d4		       ad 54 8e 	      lda	OUT_PACKET_LENGTH
     82  68d7		       8d 0e de 	      sta	RRNET_TXLEN
     83  68da		       85 5d		      sta	XMIT_LEN
     84  68dc
     85  68dc		       ad 55 8e 	      lda	OUT_PACKET_LENGTH+1
     86  68df		       8d 0f de 	      sta	RRNET_TXLEN+1
     87  68e2		       85 5e		      sta	XMIT_LEN+1
     88  68e4
     89  68e4							;Select Bus Status Register
     90  68e4		       a0 11		      ldy	#RRREG_BUSST
     91  68e6		       20 63 69 	      jsr	RRNET_SETPAGE
     92  68e9
     93  68e9				   RRNET_SWAIT		;wait for BSR READY (bit 8 set)
     94  68e9		       ad 05 de 	      lda	RRNET_DAT0+$01
     95  68ec		       ae 04 de 	      ldx	RRNET_DAT0
     96  68ef		       4a		      lsr
     97  68f0		       90 f7		      bcc	RRNET_SWAIT
     98  68f2							; Send Packet
     99  68f2		       20 d9 69 	      jsr	RRNET_XMIT
    100  68f5		       60		      rts
    101  68f6
    102  68f6							;=============================================================================
    103  68f6							;Process incoming packet
    104  68f6				   RRNET_READ
    105  68f6							; skip status
    106  68f6		       ad 09 de 	      lda	RRNET_RXTX0+$01
    107  68f9		       ad 08 de 	      lda	RRNET_RXTX0
    108  68fc							;set incoming packet buffer
    109  68fc		       a9 5c		      lda	#<INPACKET
    110  68fe		       a2 8e		      ldx	#>INPACKET
    111  6900		       85 57		      sta	RECV_PTR
    112  6902		       86 58		      stx	RECV_PTR+$01
    113  6904							;Read packet to buffer
    114  6904		       20 98 69 	      jsr	RRNET_RECV
    115  6907							;set inpacket length
    116  6907		       a5 5b		      lda	RECV_LEN
    117  6909		       8d 52 8e 	      sta	IN_PACKET_LENGTH
    118  690c		       a5 5c		      lda	RECV_LEN+$01
    119  690e		       8d 53 8e 	      sta	IN_PACKET_LENGTH+$01
    120  6911		       60		      rts
    121  6912
    122  6912							;=============================================================================
    123  6912							;Check RRNET for incoming packet
    124  6912				   RRNET_POLL
    125  6912							; select the receive event register
    126  6912		       a0 0a		      ldy	#RRREG_RXEVENT
    127  6914		       20 63 69 	      jsr	RRNET_SETPAGE
    128  6917
    129  6917							; Check for valid packet (bit 8)
    130  6917		       ad 05 de 	      lda	RRNET_DAT0+1
    131  691a		       4a		      lsr
    132  691b		       90 04		      bcc	RRNET_P2
    133  691d							;Packet received
    134  691d		       a9 01		      lda	#$01
    135  691f		       18		      clc
    136  6920		       60		      rts
    137  6921				   RRNET_P2		;No packet
    138  6921		       a9 00		      lda	#$00
    139  6923		       18		      clc
    140  6924		       60		      rts
    141  6925
    142  6925
    143  6925							;=============================================================================
    144  6925							;Initialize RRNET
    145  6925				   RRNET_INIT
    146  6925							;reset chip to assure the default values in all regs
    147  6925		       a0 07		      ldy	#RRREG_SELFCTL
    148  6927		       a9 55		      lda	#<RRNET_RESET
    149  6929		       a2 00		      ldx	#>RRNET_RESET
    150  692b		       20 83 69 	      jsr	RRNET_WRITEPAGE
    151  692e
    152  692e							;accept individual and broadcast packets
    153  692e		       a0 02		      ldy	#RRREG_RXCTL
    154  6930		       a9 05		      lda	#<RRNET_PROMISC
    155  6932		       a2 0d		      ldx	#>RRNET_PROMISC
    156  6934		       20 83 69 	      jsr	RRNET_WRITEPAGE
    157  6937
    158  6937							;set the mac address
    159  6937		       a0 12		      ldy	#RRREG_IA0
    160  6939		       ad 33 5e 	      lda	CARD_MAC
    161  693c		       ae 34 5e 	      ldx	CARD_MAC+$01
    162  693f		       20 83 69 	      jsr	RRNET_WRITEPAGE
    163  6942
    164  6942		       a0 13		      ldy	#RRREG_IA1
    165  6944		       ad 35 5e 	      lda	CARD_MAC+$02
    166  6947		       ae 36 5e 	      ldx	CARD_MAC+$03
    167  694a		       20 83 69 	      jsr	RRNET_WRITEPAGE
    168  694d
    169  694d		       a0 14		      ldy	#RRREG_IA2
    170  694f		       ad 37 5e 	      lda	CARD_MAC+$04
    171  6952		       ae 38 5e 	      ldx	CARD_MAC+$05
    172  6955		       20 83 69 	      jsr	RRNET_WRITEPAGE
    173  6958
    174  6958		       a0 06		      ldy	#RRREG_LINECTL
    175  695a		       a9 d3		      lda	#<RRNET_RXTXEN
    176  695c		       a2 00		      ldx	#>RRNET_RXTXEN
    177  695e		       20 83 69 	      jsr	RRNET_WRITEPAGE
    178  6961		       18		      clc
    179  6962		       60		      rts
    180  6963
    181  6963							;=============================================================================
    182  6963							; Set Packet Page to RRNET Register (y) into (x:a)
    183  6963				   RRNET_SETPAGE
    184  6963		       b9 98 68 	      lda	RRREG_LO,y
    185  6966		       8d 02 de 	      sta	RRNET_PAGE
    186  6969		       b9 ad 68 	      lda	RRREG_HI,y
    187  696c		       8d 03 de 	      sta	RRNET_PAGE+$01
    188  696f		       60		      rts
    189  6970
    190  6970							;=============================================================================
    191  6970							; read RRNET Register (y) into (x:a)
    192  6970				   RRNET_READPAGE
    193  6970		       b9 98 68 	      lda	RRREG_LO,y
    194  6973		       8d 02 de 	      sta	RRNET_PAGE
    195  6976		       b9 ad 68 	      lda	RRREG_HI,y
    196  6979		       8d 03 de 	      sta	RRNET_PAGE+$01
    197  697c		       ad 04 de 	      lda	RRNET_DAT0
    198  697f		       ae 05 de 	      ldx	RRNET_DAT0+$01
    199  6982		       60		      rts
    200  6983
    201  6983							;=============================================================================
    202  6983							;write (x:a) to RRNET Register (y)
    203  6983				   RRNET_WRITEPAGE
    204  6983		       48		      pha
    205  6984		       b9 98 68 	      lda	RRREG_LO,y
    206  6987		       8d 02 de 	      sta	RRNET_PAGE
    207  698a		       b9 ad 68 	      lda	RRREG_HI,y
    208  698d		       8d 03 de 	      sta	RRNET_PAGE+$01
    209  6990		       68		      pla
    210  6991		       8d 04 de 	      sta	RRNET_DAT0
    211  6994		       8e 05 de 	      stx	RRNET_DAT0+$01
    212  6997		       60		      rts
    213  6998
    214  6998							;=============================================================================
    215  6998							;RECEIVE PACKET
    216  6998							;read packet into buffer in (RECV_PTR), return packet len in (RECV_LEN)
    217  6998				   RRNET_RECV
    218  6998							;get incoming packet length
    219  6998		       ad 09 de 	      lda	RRNET_RXTX0+$01
    220  699b		       85 5c		      sta	RECV_LEN+$01
    221  699d		       ad 08 de 	      lda	RRNET_RXTX0
    222  69a0		       85 5b		      sta	RECV_LEN
    223  69a2
    224  69a2		       a0 00		      ldy	#$00
    225  69a4		       a6 5c		      ldx	RECV_LEN+$01
    226  69a6
    227  69a6		       f0 17		      beq	RRNET_RL1	;packet_length < 256
    228  69a8				   RRNET_RL0
    229  69a8		       ad 08 de 	      lda	RRNET_RXTX0
    230  69ab		       91 57		      sta	(RECV_PTR),y
    231  69ad		       c8		      iny
    232  69ae		       d0 02		      bne	RRNET_R0
    233  69b0		       e6 58		      inc	RECV_PTR+$01
    234  69b2				   RRNET_R0
    235  69b2		       ad 09 de 	      lda	RRNET_RXTX0+$01
    236  69b5		       91 57		      sta	(RECV_PTR),y
    237  69b7		       c8		      iny
    238  69b8		       d0 ee		      bne	RRNET_RL0
    239  69ba		       e6 58		      inc	RECV_PTR+$01
    240  69bc		       ca		      dex
    241  69bd		       d0 e9		      bne	RRNET_RL0
    242  69bf
    243  69bf				   RRNET_RL1
    244  69bf		       ad 08 de 	      lda	RRNET_RXTX0
    245  69c2		       91 57		      sta	(RECV_PTR),y
    246  69c4		       c8		      iny
    247  69c5		       c4 5b		      cpy	RECV_LEN
    248  69c7		       f0 0a		      beq	RRNET_READX
    249  69c9
    250  69c9		       ad 09 de 	      lda	RRNET_RXTX0+$01
    251  69cc		       91 57		      sta	(RECV_PTR),y
    252  69ce		       c8		      iny
    253  69cf		       c4 5b		      cpy	RECV_LEN
    254  69d1		       d0 ec		      bne	RRNET_RL1
    255  69d3
    256  69d3				   RRNET_READX
    257  69d3		       18		      clc
    258  69d4		       a5 5b		      lda	RECV_LEN
    259  69d6		       a6 5c		      ldx	RECV_LEN+$01
    260  69d8		       60		      rts
    261  69d9
    262  69d9							;=============================================================================
    263  69d9							;TRANSMIT PACKET
    264  69d9							;transmit packet at (XMIT_PTR), (XMIT_LEN) bytes long
    265  69d9				   RRNET_XMIT
    266  69d9							;If this packet is less than $100 bytes...
    267  69d9		       a5 5e		      lda	XMIT_LEN+$01
    268  69db		       f0 16		      beq	RRNET_X1
    269  69dd
    270  69dd				   RRNET_X0
    271  69dd		       a0 00		      ldy	#$00
    272  69df				   RRNET_XL0
    273  69df		       b1 59		      lda	(XMIT_PTR),y
    274  69e1		       8d 08 de 	      sta	RRNET_RXTX0
    275  69e4		       c8		      iny
    276  69e5		       b1 59		      lda	(XMIT_PTR),y
    277  69e7		       8d 09 de 	      sta	RRNET_RXTX0+$01
    278  69ea		       c8		      iny
    279  69eb		       d0 f2		      bne	RRNET_XL0
    280  69ed
    281  69ed							;increment high byte of ptr
    282  69ed		       e6 5a		      inc	XMIT_PTR+$01
    283  69ef							;decrement high byte of length
    284  69ef		       c6 5e		      dec	XMIT_LEN+$01
    285  69f1		       d0 ea		      bne	RRNET_X0
    286  69f3
    287  69f3				   RRNET_X1		;last <$100 bytes
    288  69f3		       a5 5d		      lda	XMIT_LEN	;are there any bytes left to send?
    289  69f5		       f0 15		      beq	RRNET_XX
    290  69f7
    291  69f7		       aa		      tax		;XMIT_LEN in x
    292  69f8		       a0 00		      ldy	#$00
    293  69fa
    294  69fa				   RRNET_XL1
    295  69fa		       b1 59		      lda	(XMIT_PTR),y
    296  69fc		       8d 08 de 	      sta	RRNET_RXTX0
    297  69ff		       c8		      iny
    298  6a00		       b1 59		      lda	(XMIT_PTR),y
    299  6a02		       8d 09 de 	      sta	RRNET_RXTX0+$01
    300  6a05		       c8		      iny
    301  6a06		       ca		      dex		;only XMIT_LEN bytes
    302  6a07		       f0 03		      beq	RRNET_XX
    303  6a09		       ca		      dex
    304  6a0a		       d0 ee		      bne	RRNET_XL1
    305  6a0c				   RRNET_XX
    306  6a0c		       60		      rts
    307  6a0d
------- FILE SIXNET.ASM
------- FILE CARD.ASM LEVEL 3 PASS 2
      0  6a0d					      include	"CARD.ASM"
      1  6a0d							;CARD LAYER===================================================================
      2  6a0d							;							 _,.-------.,_
      3  6a0d							;						     ,;~'	      '~;,
      4  6a0d							;						   ,;			  ;,
      5  6a0d							;						  ;			    ;
      6  6a0d							;						 ,'	   Style2006	    ',
      7  6a0d							;						,;			     ;,
      8  6a0d							;						; ;	 .	     .	    ; ;
      9  6a0d							;						| ;   ______	   ______   ; |
     10  6a0d							;						|  `/~"     ~" . "~	"~\'  |
     11  6a0d							;						|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     12  6a0d							; Last Edits 1/26/2006 			 |   |	      }:{	 |   |
     13  6a0d							; Six of Style 				 |   !	     / | \	 !   |
     14  6a0d							;						 .~  (__,.--" .^. "--.,__)  ~.
     15  6a0d							;						 |     ---;' / | \ `;---     |
     16  6a0d							;						  \__.	     \/^\/	 .__/
     17  6a0d							;						   V| \ 		/ |V
     18  6a0d							;						    | |T~\___!___!___/~T| |
     19  6a0d							;						    | |`IIII_I_I_I_IIII'| |
     20  6a0d							;						    |  \,III I I I III,/  |
     21  6a0d							;						     \	 `~~~~~~~~~~'	 /
     22  6a0d							;						       \   .	   .   /
     23  6a0d							;							 \.    ^    ./
     24  6a0d							;							   ^~~~^~~~^
     25  6a0d							;
     26  6a0d		       00 00	   CARD_STATUS_IDLE =	0	;
     27  6a0d		       00 01	   CARD_STATUS_READING =	1	;
     28  6a0d		       00 02	   CARD_STATUS_WRITING =	2	;
     29  6a0d
     30  6a0d
     31  6a0d							;DETECT CARD==================================================================
     32  6a0d							;Detects net card installed, sets card type, sets carry on error, clears on
     33  6a0d							;good
     34  6a0d				   CARD_DETECT
     35  6a0d							;Check for ETH64
     36  6a0d		       18		      clc
     37  6a0e		       ad 1f de 	      lda	ETH64_BANK+1
     38  6a11		       c9 33		      cmp	#$33
     39  6a13		       f0 23		      beq	ETH_64_FOUND
     40  6a15
     41  6a15							;Check for RRNET
     42  6a15							;switch on accessory connector
     43  6a15		       ad 01 de 	      lda	$de01
     44  6a18		       29 b8		      and	#%10111000
     45  6a1a		       09 01		      ora	#%00000001
     46  6a1c		       8d 01 de 	      sta	$de01
     47  6a1f							;check for the first 2 magic bytes
     48  6a1f		       a0 00		      ldy	#0
     49  6a21		       20 70 69 	      jsr	RRNET_READPAGE
     50  6a24		       c9 0e		      cmp	#<RRNET_MAGIC
     51  6a26		       d0 09		      bne	NO_CARD_FOUND
     52  6a28		       e0 63		      cpx	#>RRNET_MAGIC
     53  6a2a							;RR-Net found
     54  6a2a		       a9 02		      lda	#$02
     55  6a2c		       8d 8c 6a 	      sta	CARD_TYPE
     56  6a2f		       18		      clc
     57  6a30		       60		      rts
     58  6a31				   NO_CARD_FOUND
     59  6a31		       a9 00		      lda	#$00
     60  6a33		       8d 8c 6a 	      sta	CARD_TYPE
     61  6a36		       38		      sec
     62  6a37		       60		      rts
     63  6a38				   ETH_64_FOUND
     64  6a38		       a9 01		      lda	#$01
     65  6a3a		       8d 8c 6a 	      sta	CARD_TYPE
     66  6a3d		       18		      clc
     67  6a3e		       60		      rts
     68  6a3f
     69  6a3f							;INITIALIZE CARD==============================================================
     70  6a3f							;Initializes detected card, carry set on error
     71  6a3f				   CARD_INIT
     72  6a3f		       ad 8c 6a 	      lda	CARD_TYPE
     73  6a42		       c9 01		      cmp	#$01
     74  6a44		       d0 03		      bne	CARD_I0
     75  6a46		       4c 31 68 	      jmp	ETH64_INIT
     76  6a49				   CARD_I0
     77  6a49		       c9 02		      cmp	#$02
     78  6a4b		       d0 03		      bne	CARD_IE
     79  6a4d		       4c 25 69 	      jmp	RRNET_INIT
     80  6a50				   CARD_IE
     81  6a50		       38		      sec
     82  6a51		       60		      rts
     83  6a52
     84  6a52
     85  6a52							;POLL FOR PACKET==============================================================
     86  6a52							;Polls for packet, returns a=1 if packet available, a=0 if not, carry on error
     87  6a52				   CARD_POLL
     88  6a52		       ad 8c 6a 	      lda	CARD_TYPE
     89  6a55		       c9 01		      cmp	#$01
     90  6a57		       d0 03		      bne	CARD_P0
     91  6a59		       4c 1a 68 	      jmp	ETH64_POLL
     92  6a5c				   CARD_P0
     93  6a5c		       c9 02		      cmp	#$02
     94  6a5e		       d0 03		      bne	CARD_PE
     95  6a60		       4c 12 69 	      jmp	RRNET_POLL
     96  6a63				   CARD_PE
     97  6a63		       38		      sec
     98  6a64		       60		      rts
     99  6a65
    100  6a65							;READ PACKET==================================================================
    101  6a65							;Reads packet into INPACKET and puts length in IN_PACKET_LENGTH
    102  6a65				   CARD_READ
    103  6a65		       ad 8c 6a 	      lda	CARD_TYPE
    104  6a68		       c9 01		      cmp	#$01
    105  6a6a		       d0 03		      bne	CARD_R0
    106  6a6c		       4c ac 67 	      jmp	ETH64_READ
    107  6a6f				   CARD_R0
    108  6a6f		       c9 02		      cmp	#$02
    109  6a71		       d0 03		      bne	CARD_RE
    110  6a73		       4c f6 68 	      jmp	RRNET_READ
    111  6a76				   CARD_RE
    112  6a76		       38		      sec
    113  6a77		       60		      rts
    114  6a78
    115  6a78
    116  6a78							;SEND PACKET==================================================================
    117  6a78				   CARD_SEND
    118  6a78							;	PRINT 13,"card send called",13
    119  6a78		       ad 8c 6a 	      lda	CARD_TYPE
    120  6a7b		       c9 01		      cmp	#$01
    121  6a7d		       d0 03		      bne	CARD_S0
    122  6a7f		       4c 54 67 	      jmp	ETH64_SEND
    123  6a82				   CARD_S0
    124  6a82		       c9 02		      cmp	#$02
    125  6a84		       d0 03		      bne	CARD_SE
    126  6a86		       4c c2 68 	      jmp	RRNET_SEND
    127  6a89				   CARD_SE
    128  6a89		       38		      sec
    129  6a8a		       60		      rts
    130  6a8b
    131  6a8b
    132  6a8b		       00	   CARD_STATUS dc.b	$00
    133  6a8c		       00	   CARD_TYPE  dc.b	$00	; 0=None, 1=ETH64, 2=RR-Net
    134  6a8d
    135  6a8d		       d8 44 04 0a CARD_NS1   dc.b	216,68,4,10
    136  6a91		       ff ff ff ff CARD_BCAST_IP dc.b	255,255,255,255
    137  6a95		       ff ff ff ff*CARD_BCAST_MAC dc.b	255,255,255,255,255,255
    138  6a9b		       00 00 00 00*CARD_NOMAC dc.b	0,0,0,0,0,0
    139  6aa1
------- FILE SIXNET.ASM
------- FILE MAC.ASM LEVEL 3 PASS 2
      0  6aa1					      include	"MAC.ASM"
      1  6aa1							;Source by Six of Style (Oliver VieBrooks)
      2  6aa1							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6aa1							;
      4  6aa1							;Last Updated 1/26/2006
      5  6aa1							;
      6  6aa1							;MAC PROTOCOL=================================================================
      7  6aa1							;							 _,.-------.,_
      8  6aa1							;MAC PACKET FORMAT:				     ,;~'	      '~;,
      9  6aa1							;+----------+					   ,;			  ;,
     10  6aa1							;|$00-$0d   |					  ;			    ;
     11  6aa1							;+----------+					 ,'	   Style2006	    ',
     12  6aa1							;|MAC Header|					,;			     ;,
     13  6aa1							;+----------+					; ;	 .	     .	    ; ;
     14  6aa1							;						| ;   ______	   ______   ; |
     15  6aa1							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6aa1							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6aa1							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  6aa1							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  6aa1							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6aa1							;						 |     ---;' / | \ `;---     |
     21  6aa1							;						  \__.	     \/^\/	 .__/
     22  6aa1							;						   V| \ 		/ |V
     23  6aa1							;						    | |T~\___!___!___/~T| |
     24  6aa1							;						    | |`IIII_I_I_I_IIII'| |
     25  6aa1							;						    |  \,III I I I III,/  |
     26  6aa1							;						     \	 `~~~~~~~~~~'	 /
     27  6aa1							;						       \   .	   .   /
     28  6aa1							;							 \.    ^    ./
     29  6aa1							;							   ^~~~^~~~^
     30  6aa1							;
     31  6aa1		       00 00	   MAC_STATUS_IDLE =	0	;
     32  6aa1		       00 01	   MAC_STATUS_BUSY =	1	;
     33  6aa1
     34  6aa1				   MAC_HEADER
     35  6aa1		       00 00 00 00*MAC_DEST   dc.b	$00,$00,$00,$00,$00,$00
     36  6aa7		       00 00 00 00*MAC_SRC    dc.b	$00,$00,$00,$00,$00,$00
     37  6aad		       00 00	   MAC_TYPE   dc.w	$00
     38  6aaf
     39  6aaf		       00 00	   MAC_DATALEN dc.b	$00,$00
     40  6ab1		       00 00	   MAC_DATAADDR dc.b	$00,$00
     41  6ab3		       00	   MAC_STATUS dc.b	$00
     42  6ab4
     43  6ab4							;Procedure for sending -
     44  6ab4							;Wait until MAC_STATUS = MAC_IDLE
     45  6ab4							;Set MAC_DEST
     46  6ab4							;Set MAC_SRC <- can be optimized out
     47  6ab4							;Set MAC_TYPE
     48  6ab4							;Set MAC_DATALEN
     49  6ab4							;Set MAC_DATAADDR
     50  6ab4							;jsr MAC_SEND
     51  6ab4
     52  6ab4
     53  6ab4							;=============================================================================
     54  6ab4				   MAC_INIT
     55  6ab4		       a9 00		      lda	#MAC_STATUS_IDLE
     56  6ab6		       8d b3 6a 	      sta	MAC_STATUS
     57  6ab9		       60		      rts
     58  6aba							;=============================================================================
     59  6aba				   MAC_PROCESS
     60  6aba							;First, is this an arp packet?
     61  6aba		       ad 68 8e 	      lda	INPACKET+$0c
     62  6abd		       c9 08		      cmp	#$08
     63  6abf		       d0 0f		      bne	UPT	;Unknown Packet Type
     64  6ac1		       ad 69 8e 	      lda	INPACKET+$0d
     65  6ac4		       d0 03		      bne	notIP
     66  6ac6
     67  6ac6		       4c dd 7d 	      jmp	IP_PROCESS
     68  6ac9				   notIP
     69  6ac9		       c9 06		      cmp	#$06	;Is it an ARP packet?
     70  6acb		       d0 03		      bne	UPT
     71  6acd
     72  6acd		       4c c0 6b 	      jmp	ARP_PROCESS
     73  6ad0				   UPT
     74  6ad0		       60		      rts
     75  6ad1							;=============================================================================
     76  6ad1				   MAC_SEND		;expects nothing.
     77  6ad1							;	PRINT 13,"mac send called",13
     78  6ad1		       a9 01		      lda	#MAC_STATUS_BUSY
     79  6ad3		       8d b3 6a 	      sta	MAC_STATUS
     80  6ad6
     81  6ad6							;set outpacket length = mac_datalen+$0e
     82  6ad6		       ad b0 6a 	      lda	MAC_DATALEN+1
     83  6ad9		       8d 55 8e 	      sta	OUT_PACKET_LENGTH+1
     84  6adc		       ad af 6a 	      lda	MAC_DATALEN
     85  6adf		       18		      clc
     86  6ae0		       69 0e		      adc	#$0e
     87  6ae2		       8d 54 8e 	      sta	OUT_PACKET_LENGTH
     88  6ae5		       90 03		      bcc	MAC_SENDA
     89  6ae7		       ee 55 8e 	      inc	OUT_PACKET_LENGTH+1
     90  6aea
     91  6aea				   MAC_SENDA
     92  6aea							;generate outpacket
     93  6aea		       a2 00		      ldx	#$00
     94  6aec				   MAC_SEND0
     95  6aec		       bd a1 6a 	      lda	MAC_HEADER,x
     96  6aef		       9d 5c 92 	      sta	OUTPACKET,x
     97  6af2		       e8		      inx
     98  6af3		       e0 0e		      cpx	#$0e
     99  6af5		       d0 f5		      bne	MAC_SEND0
    100  6af7
    101  6af7							;copy data into outpacket
    102  6af7
    103  6af7		       ad b1 6a 	      lda	MAC_DATAADDR
    104  6afa		       85 63		      sta	CPY_SRC
    105  6afc		       ad b2 6a 	      lda	MAC_DATAADDR+1
    106  6aff		       85 64		      sta	CPY_SRC+1
    107  6b01		       a9 6a		      lda	#<(OUTPACKET+$0e)
    108  6b03		       85 65		      sta	CPY_DST
    109  6b05		       a9 92		      lda	#>(OUTPACKET+$0e)
    110  6b07		       85 66		      sta	CPY_DST+1
    111  6b09		       ae b0 6a 	      ldx	MAC_DATALEN+1
    112  6b0c		       ad af 6a 	      lda	MAC_DATALEN
    113  6b0f		       20 31 64 	      jsr	copyblock
    114  6b12
    115  6b12		       20 78 6a 	      jsr	CARD_SEND
    116  6b15
    117  6b15		       a9 00		      lda	#MAC_STATUS_IDLE
    118  6b17		       8d b3 6a 	      sta	MAC_STATUS
    119  6b1a		       60		      rts
    120  6b1b							;=============================================================================
    121  6b1b				   MAC_SETDATALEN		; expects data length in (x:a)
    122  6b1b		       8d af 6a 	      sta	MAC_DATALEN
    123  6b1e		       8e b0 6a 	      stx	MAC_DATALEN+1
    124  6b21		       60		      rts
    125  6b22							;=============================================================================
    126  6b22				   MAC_SETDATAADDR		; expects data ADDR (x:a)
    127  6b22		       8d b1 6a 	      sta	MAC_DATAADDR
    128  6b25		       8e b2 6a 	      stx	MAC_DATAADDR+1
    129  6b28		       60		      rts
    130  6b29							;=============================================================================
    131  6b29				   MAC_SETDEST		; expects dest MAC in (x:a)
    132  6b29
    133  6b29		       8d 32 6b 	      sta	MAC_SD1+$01
    134  6b2c		       8e 33 6b 	      stx	MAC_SD1+$02
    135  6b2f		       a2 00		      ldx	#$00
    136  6b31				   MAC_SD1
    137  6b31		       bd ff ff 	      lda	$ffff,x
    138  6b34		       9d a1 6a 	      sta	MAC_DEST,x
    139  6b37		       e8		      inx
    140  6b38		       e0 06		      cpx	#$06
    141  6b3a		       d0 f5		      bne	MAC_SD1
    142  6b3c		       60		      rts
    143  6b3d							;=============================================================================
    144  6b3d				   MAC_SETSRC		;sets source to card_MAC
    145  6b3d
    146  6b3d		       ad 33 5e 	      lda	CARD_MAC
    147  6b40		       8d a7 6a 	      sta	MAC_SRC
    148  6b43		       ad 34 5e 	      lda	CARD_MAC+1
    149  6b46		       8d a8 6a 	      sta	MAC_SRC+1
    150  6b49		       ad 35 5e 	      lda	CARD_MAC+2
    151  6b4c		       8d a9 6a 	      sta	MAC_SRC+2
    152  6b4f		       ad 36 5e 	      lda	CARD_MAC+3
    153  6b52		       8d aa 6a 	      sta	MAC_SRC+3
    154  6b55		       ad 37 5e 	      lda	CARD_MAC+4
    155  6b58		       8d ab 6a 	      sta	MAC_SRC+4
    156  6b5b		       ad 38 5e 	      lda	CARD_MAC+5
    157  6b5e		       8d ac 6a 	      sta	MAC_SRC+5
    158  6b61		       60		      rts
    159  6b62							;=============================================================================
    160  6b62				   MAC_SETTYPE		;Expects packet type in (x:a)
    161  6b62		       8e ad 6a 	      stx	MAC_TYPE
    162  6b65		       8d ae 6a 	      sta	MAC_TYPE+1
    163  6b68		       60		      rts
    164  6b69
    165  6b69							;That's all, folks.  Time for a beer
    166  6b69							;
    167  6b69							;	  [~]
    168  6b69							;	  |=|
    169  6b69							;	.-' '-.
    170  6b69							;	|-----|  Warsteiner
    171  6b69							;	| ~~~ |  "Die Konigen unter den bieren"
    172  6b69							;	| ~~~ |
    173  6b69							;	| WAR |
    174  6b69							;	|-----|
    175  6b69							;	'-----'
    176  6b69							;
    177  6b69							;
    178  6b69							;
    179  6b69							;Six of DLoC 2004
------- FILE SIXNET.ASM
------- FILE ARP.ASM LEVEL 3 PASS 2
      0  6b69					      include	"ARP.ASM"
      1  6b69							;Source by Six of Style (Oliver VieBrooks)
      2  6b69							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6b69							;
      4  6b69							;Last Updated 1/25/2006
      5  6b69							;
      6  6b69							;ARP PROTOCOL=================================================================
      7  6b69							;							 _,.-------.,_
      8  6b69							;ARP PACKET FORMAT:				     ,;~'	      '~;,
      9  6b69							;+----------+----------+--------+		   ,;			  ;,
     10  6b69							;|$00-$0d   |$0e-$15	|$16-$29 |		  ;			    ;
     11  6b69							;+----------+----------+--------+		 ,'	   Style 2006	    ',
     12  6b69							;|MAC Header|ARP Header|ARP Data|		,;			     ;,
     13  6b69							;+----------+----------+--------+		; ;	 .	     .	    ; ;
     14  6b69							;						| ;   ______	   ______   ; |
     15  6b69							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6b69							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6b69							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  6b69							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  6b69							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6b69							;ARP Header Fields:				 |     ---;' / | \ `;---     |
     21  6b69							;$0e - Hardware MAC Address Type		  \__.	     \/^\/	 .__/
     22  6b69							;$10 - Protocol Address Type			   V| \ 		/ |V
     23  6b69							;$12 - Hardware MAC Address Size		    | |T~\___!___!___/~T| |
     24  6b69							;$13 - Protocol Address Size			    | |`IIII_I_I_I_IIII'| |
     25  6b69							;$14 - Opcode					    |  \,III I I I III,/  |
     26  6b69							;						     \	 `~~~~~~~~~~'	 /
     27  6b69							;ARP Data Fields				       \   .	   .   /
     28  6b69							;$16 - Sender MAC Address				 \.    ^    ./
     29  6b69							;$1c - Sender IP Address				   ^~~~^~~~^
     30  6b69							;$20 - Target MAC Address
     31  6b69							;$26 - Target IP Address
     32  6b69							;
     33  6b69		       00 00	   ARP_STATE_IDLE =	$00
     34  6b69		       00 01	   ARP_STATE_REQ =	$01
     35  6b69		       00 02	   ARP_STATE_REPLY =	$02
     36  6b69
     37  6b69		       00 01	   ARP_T_REQUEST =	$01
     38  6b69		       00 02	   ARP_T_REPLY =	$02
     39  6b69
     40  6b69							;size of an arp packet sans mac header
     41  6b69		       00 1c	   ARP_SIZE   =	$1c
     42  6b69
     43  6b69		       00 00	   ARP_ADDR_SRC_MAC =	$00
     44  6b69		       00 01	   ARP_ADDR_DST_MAC =	$01
     45  6b69		       00 02	   ARP_ADDR_SRC_IP =	$02
     46  6b69		       00 03	   ARP_ADDR_DST_IP =	$03
     47  6b69		       00 04	   ARP_ADDR_RES_MAC =	$04
     48  6b69
     49  6b69		       00 01	   ARP_OPCODE_REQUEST =	$01
     50  6b69		       00 02	   ARP_OPCODE_REPLY =	$02
     51  6b69
     52  6b69							;ARP Engine State Holder
     53  6b69		       00	   ARP_STATE  dc.b	$00
     54  6b6a
     55  6b6a							;Resolved MAC when resolving
     56  6b6a		       00 00 00 00*ARP_MAC    dc.b	$00,$00,$00,$00,$00,$00
     57  6b70
     58  6b70				   ARP_HEADER
     59  6b70		       00 01	   ARP_HW_TYPE dc.b	$00,$01	;Hardware Type <-STATIC
     60  6b72		       08 00	   ARP_PROT_TYPE dc.b	$08,$00	;Protocol Type <-STATIC
     61  6b74		       06	   ARP_HW_SIZE dc.b	$06	;HW Size	<-STATIC
     62  6b75		       04	   ARP_PROT_SIZE dc.b	$04	;Protocol Size <-STATIC
     63  6b76		       00 00	   ARP_OPCODE dc.b	$00,$00
     64  6b78
     65  6b78				   ARP_DATA
     66  6b78		       00 00 00 00*ARP_SRC_MAC dc.b	$00,$00,$00,$00,$00,$00
     67  6b7e		       00 00 00 00 ARP_SRC_IP dc.b	$00,$00,$00,$00
     68  6b82		       00 00 00 00*ARP_DST_MAC dc.b	$00,$00,$00,$00,$00,$00
     69  6b88		       00 00 00 00 ARP_DST_IP dc.b	$00,$00,$00,$00
     70  6b8c
     71  6b8c				   ARP_CACHE_I
     72  6b8c		       00 00 00 00	      dc.b	$00,$00,$00,$00
     73  6b90		       00 00 00 00	      dc.b	$00,$00,$00,$00
     74  6b94		       00 00 00 00	      dc.b	$00,$00,$00,$00
     75  6b98		       00 00 00 00	      dc.b	$00,$00,$00,$00
     76  6b9c
     77  6b9c				   ARP_CACHE_M
     78  6b9c		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     79  6ba2		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     80  6ba8		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     81  6bae		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00
     82  6bb4
     83  6bb4							;broadcast
     84  6bb4		       ff ff ff ff*MAC_BCAST  dc.b	255,255,255,255,255,255
     85  6bba
     86  6bba		       00 05	   ARP_CACHE_DEPTH =	5	;adjustable
     87  6bba
     88  6bba							;To Request a MAC-
     89  6bba							;Init ARP Header <-Lots of this can be optimized out
     90  6bba							;Set SRC MAC+IP <-Can be optimized out
     91  6bba							;Set Dest MAC+IP
     92  6bba							;call ARP_SEND
     93  6bba
     94  6bba							;=============================================================================
     95  6bba							;Initialize ARP by setting it's state to idle
     96  6bba				   ARP_INIT
     97  6bba		       a9 00		      lda	#ARP_STATE_IDLE
     98  6bbc		       8d 69 6b 	      sta	ARP_STATE
     99  6bbf		       60		      rts
    100  6bc0
    101  6bc0							;=============================================================================
    102  6bc0							;Process a packet which has been pre-determined to be an ARP packet
    103  6bc0				   ARP_PROCESS
    104  6bc0							;Is this an ARP Request?
    105  6bc0		       ad 71 8e 	      lda	INPACKET+$15
    106  6bc3		       c9 01		      cmp	#ARP_T_REQUEST
    107  6bc5		       d0 03		      bne	notARPREQ
    108  6bc7							;It is?  Well, let's reply to the damn thing, then.
    109  6bc7		       20 28 6c 	      jsr	ARP_RESPOND
    110  6bca				   notARPREQ
    111  6bca							;It's not a request.  Is it an ARP reply?
    112  6bca		       ad 71 8e 	      lda	INPACKET+$15
    113  6bcd		       c9 02		      cmp	#ARP_T_REPLY
    114  6bcf		       d0 03		      bne	ARP_Exit
    115  6bd1		       20 f1 6b 	      jsr	ARP_PROCREPLY
    116  6bd4				   ARP_Exit
    117  6bd4		       60		      rts
    118  6bd5							;=============================================================================
    119  6bd5							;Send current ARP packet (expects MAC dst already set)
    120  6bd5				   ARP_SEND
    121  6bd5							;	PRINT 13,"arp send called",13
    122  6bd5
    123  6bd5		       20 3d 6b 	      jsr	MAC_SETSRC	;<-This can be optimized out
    124  6bd8							;set packet type to ARP ($0806)
    125  6bd8		       a2 08		      ldx	#$08
    126  6bda		       a9 06		      lda	#$06
    127  6bdc		       20 62 6b 	      jsr	MAC_SETTYPE
    128  6bdf		       a9 70		      lda	#<ARP_HEADER
    129  6be1		       a2 6b		      ldx	#>ARP_HEADER
    130  6be3		       20 22 6b 	      jsr	MAC_SETDATAADDR
    131  6be6		       a9 1c		      lda	#ARP_SIZE
    132  6be8		       a2 00		      ldx	#$00
    133  6bea		       20 1b 6b 	      jsr	MAC_SETDATALEN
    134  6bed		       20 d1 6a 	      jsr	MAC_SEND
    135  6bf0		       60		      rts
    136  6bf1
    137  6bf1							;=============================================================================
    138  6bf1							;Process an incoming ARP REPLY
    139  6bf1				   ARP_PROCREPLY
    140  6bf1							;Were we actually WAITING for a reply?
    141  6bf1		       ad 69 6b 	      lda	ARP_STATE
    142  6bf4		       c9 01		      cmp	#ARP_STATE_REQ
    143  6bf6		       d0 dc		      bne	ARP_Exit
    144  6bf8
    145  6bf8							;Compare IP to ARP_IP
    146  6bf8		       ad 78 8e 	      lda	INPACKET+$1c
    147  6bfb		       cd 88 6b 	      cmp	ARP_DST_IP
    148  6bfe		       d0 d4		      bne	ARP_Exit
    149  6c00		       ad 79 8e 	      lda	INPACKET+$1d
    150  6c03		       cd 89 6b 	      cmp	ARP_DST_IP+$01
    151  6c06		       d0 cc		      bne	ARP_Exit
    152  6c08		       ad 7a 8e 	      lda	INPACKET+$1e
    153  6c0b		       cd 8a 6b 	      cmp	ARP_DST_IP+$02
    154  6c0e		       d0 c4		      bne	ARP_Exit
    155  6c10		       ad 7b 8e 	      lda	INPACKET+$1f
    156  6c13		       cd 8b 6b 	      cmp	ARP_DST_IP+$03
    157  6c16		       d0 bc		      bne	ARP_Exit
    158  6c18
    159  6c18							;I'll be damned.  It IS the one we were waiting for.
    160  6c18							;Copy it's MAC and we're done
    161  6c18
    162  6c18		       a9 72		      lda	#<(INPACKET+$16)
    163  6c1a		       a2 8e		      ldx	#>(INPACKET+$16)
    164  6c1c		       a0 04		      ldy	#ARP_ADDR_RES_MAC
    165  6c1e		       20 c1 6c 	      jsr	ARP_SET_ADDR
    166  6c21
    167  6c21							;ARP status is now idle again.
    168  6c21		       a9 00		      lda	#ARP_STATE_IDLE
    169  6c23		       8d 69 6b 	      sta	ARP_STATE
    170  6c26
    171  6c26		       60		      rts
    172  6c27
    173  6c27
    174  6c27							;=============================================================================
    175  6c27							;Build a packet in response to an ARP request for our MAC
    176  6c27							;
    177  6c27				   ARP_RESP_x
    178  6c27		       60		      rts
    179  6c28				   ARP_RESPOND
    180  6c28							;It is?  Well then, is it for our own IP?
    181  6c28		       ad 82 8e 	      lda	INPACKET+$26
    182  6c2b		       cd 39 5e 	      cmp	CARD_IP
    183  6c2e		       d0 f7		      bne	ARP_RESP_x
    184  6c30		       ad 83 8e 	      lda	INPACKET+$27
    185  6c33		       cd 3a 5e 	      cmp	CARD_IP+$01
    186  6c36		       d0 ef		      bne	ARP_RESP_x
    187  6c38		       ad 84 8e 	      lda	INPACKET+$28
    188  6c3b		       cd 3b 5e 	      cmp	CARD_IP+$02
    189  6c3e		       d0 e7		      bne	ARP_RESP_x
    190  6c40		       ad 85 8e 	      lda	INPACKET+$29
    191  6c43		       cd 3c 5e 	      cmp	CARD_IP+$03
    192  6c46		       d0 df		      bne	ARP_RESP_x
    193  6c48							;First we must build the MAC header
    194  6c48							;Copy Destination MAC to OUTPACKET:00
    195  6c48							;We can get this from the packet we're responding to:
    196  6c48		       a9 72		      lda	#<(INPACKET+$16)
    197  6c4a		       a2 8e		      ldx	#>(INPACKET+$16)
    198  6c4c		       20 29 6b 	      jsr	MAC_SETDEST
    199  6c4f
    200  6c4f							;Set Opcode to ARP_REPLY
    201  6c4f		       a9 02		      lda	#ARP_OPCODE_REPLY
    202  6c51		       20 b8 6c 	      jsr	ARP_SET_OPCODE
    203  6c54
    204  6c54							;My MAC is the source MAC Address <-Can be optimized out
    205  6c54		       a9 33		      lda	#<CARD_MAC
    206  6c56		       a2 5e		      ldx	#>CARD_MAC
    207  6c58		       a0 00		      ldy	#ARP_ADDR_SRC_MAC
    208  6c5a		       20 c1 6c 	      jsr	ARP_SET_ADDR
    209  6c5d
    210  6c5d							;My IP is the Source IP Address <- Can be optimized out
    211  6c5d		       a9 39		      lda	#<CARD_IP
    212  6c5f		       a2 5e		      ldx	#>CARD_IP
    213  6c61		       a0 02		      ldy	#ARP_ADDR_SRC_IP
    214  6c63		       20 c1 6c 	      jsr	ARP_SET_ADDR
    215  6c66
    216  6c66							;Set Dest MAC
    217  6c66							;The INPACKET has the request we're responding to, so let's pull from it.
    218  6c66		       a9 72		      lda	#<(INPACKET+$16)
    219  6c68		       a2 8e		      ldx	#>(INPACKET+$16)
    220  6c6a		       a0 01		      ldy	#ARP_ADDR_DST_MAC
    221  6c6c		       20 c1 6c 	      jsr	ARP_SET_ADDR
    222  6c6f
    223  6c6f							;Set MAC_DEST
    224  6c6f							;The INPACKET has the request we're responding to, so let's pull from it.
    225  6c6f		       a9 72		      lda	#<(INPACKET+$16)
    226  6c71		       a2 8e		      ldx	#>(INPACKET+$16)
    227  6c73		       20 29 6b 	      jsr	MAC_SETDEST
    228  6c76
    229  6c76							;Set Dest IP
    230  6c76		       a9 78		      lda	#<(INPACKET+$1c)
    231  6c78		       a2 8e		      ldx	#>(INPACKET+$1c)
    232  6c7a		       a0 03		      ldy	#ARP_ADDR_DST_IP
    233  6c7c		       20 c1 6c 	      jsr	ARP_SET_ADDR
    234  6c7f
    235  6c7f							;send
    236  6c7f		       20 d5 6b 	      jsr	ARP_SEND
    237  6c82		       60		      rts
    238  6c83							;=============================================================================
    239  6c83							;Send a request for a MAC Expects IP at (x:a)
    240  6c83							;
    241  6c83				   ARP_REQUEST
    242  6c83							;Set Dest IP
    243  6c83		       a0 03		      ldy	#ARP_ADDR_DST_IP
    244  6c85		       20 c1 6c 	      jsr	ARP_SET_ADDR
    245  6c88
    246  6c88							;Set MAC_DEST to Broadcast
    247  6c88		       a9 95		      lda	#<CARD_BCAST_MAC
    248  6c8a		       a2 6a		      ldx	#>CARD_BCAST_MAC
    249  6c8c		       20 29 6b 	      jsr	MAC_SETDEST
    250  6c8f
    251  6c8f							;Set Opcode to ARP_REQUEST
    252  6c8f		       a9 01		      lda	#ARP_OPCODE_REQUEST
    253  6c91		       20 b8 6c 	      jsr	ARP_SET_OPCODE
    254  6c94
    255  6c94							;My MAC is the source MAC Address
    256  6c94		       a9 33		      lda	#<CARD_MAC
    257  6c96		       a2 5e		      ldx	#>CARD_MAC
    258  6c98		       a0 00		      ldy	#ARP_ADDR_SRC_MAC
    259  6c9a		       20 c1 6c 	      jsr	ARP_SET_ADDR
    260  6c9d
    261  6c9d							;My IP is the Source IP Address
    262  6c9d		       a9 39		      lda	#<CARD_IP
    263  6c9f		       a2 5e		      ldx	#>CARD_IP
    264  6ca1		       a0 02		      ldy	#ARP_ADDR_SRC_IP
    265  6ca3		       20 c1 6c 	      jsr	ARP_SET_ADDR
    266  6ca6
    267  6ca6							;Set Dest MAC
    268  6ca6		       a9 9b		      lda	#<CARD_NOMAC
    269  6ca8		       a2 6a		      ldx	#>CARD_NOMAC
    270  6caa		       a0 01		      ldy	#ARP_ADDR_DST_MAC
    271  6cac		       20 c1 6c 	      jsr	ARP_SET_ADDR
    272  6caf
    273  6caf							;send packet
    274  6caf		       20 d5 6b 	      jsr	ARP_SEND
    275  6cb2
    276  6cb2							;set status
    277  6cb2		       a9 01		      lda	#ARP_STATE_REQ
    278  6cb4		       8d 69 6b 	      sta	ARP_STATE
    279  6cb7		       60		      rts
    280  6cb8
    281  6cb8							;=============================================================================
    282  6cb8				   ARP_SET_OPCODE
    283  6cb8		       8d 77 6b 	      sta	ARP_OPCODE+1
    284  6cbb		       a9 00		      lda	#$00
    285  6cbd		       8d 76 6b 	      sta	ARP_OPCODE
    286  6cc0		       60		      rts
    287  6cc1							;=============================================================================
    288  6cc1				   ARP_SET_ADDR 		;expects pointer in x:a,
    289  6cc1							;y = 0 for SRC_MAC
    290  6cc1							;y = 1 for DST_MAC
    291  6cc1							;y = 2 for SRC_IP
    292  6cc1							;y = 3 for DST_IP
    293  6cc1
    294  6cc1		       8d dc 6c 	      sta	ASSM_S+1
    295  6cc4		       8e dd 6c 	      stx	ASSM_S+2
    296  6cc7
    297  6cc7		       b9 ec 6c 	      lda	ASSM_L,y
    298  6cca		       8d df 6c 	      sta	ASSM_D+1
    299  6ccd		       b9 e7 6c 	      lda	ASSM_H,y
    300  6cd0		       8d e0 6c 	      sta	ASSM_D+2
    301  6cd3		       b9 f1 6c 	      lda	ASSM_C,y
    302  6cd6		       8d e3 6c 	      sta	ASSM_N+1
    303  6cd9
    304  6cd9		       a2 00		      ldx	#$00
    305  6cdb		       bd ff ff    ASSM_S     lda	$ffff,x
    306  6cde		       9d ff ff    ASSM_D     sta	$ffff,x
    307  6ce1		       e8		      inx
    308  6ce2		       e0 06	   ASSM_N     cpx	#$06
    309  6ce4		       d0 f5		      bne	ASSM_S
    310  6ce6		       60		      rts
    311  6ce7				   ASSM_H
    312  6ce7		       6b 6b 6b 6b	      dc.b	#>ARP_SRC_MAC,#>ARP_DST_MAC,#>ARP_SRC_IP,#>ARP_DST_IP
    313  6ceb		       6b		      dc.b	#>ARP_MAC
    314  6cec				   ASSM_L
    315  6cec		       78 82 7e 88	      dc.b	#<ARP_SRC_MAC,#<ARP_DST_MAC,#<ARP_SRC_IP,#<ARP_DST_IP
    316  6cf0		       6a		      dc.b	#<ARP_MAC
    317  6cf1				   ASSM_C
    318  6cf1		       06 06 04 04*	      dc.b	6,6,4,4,6
    319  6cf6
    320  6cf6							;=============================================================================
    321  6cf6				   GET_ARP		;expects IP in x:a, returns carry clear if success,
    322  6cf6							;carry set if timeout or keyhit REMOVED by (LB)
    323  6cf6							;returns pointer to resolved MAC in x:a
    324  6cf6
    325  6cf6							;Is this already cached?
    326  6cf6		       8e 03 6d 	      stx	GA_x+1
    327  6cf9		       8d 05 6d 	      sta	GA_a+1
    328  6cfc		       20 1a 6d 	      jsr	ARP_CACHED
    329  6cff		       b0 01		      bcs	GA_x
    330  6d01		       60		      rts		;cache match found, pointer to mac in x:a
    331  6d02
    332  6d02				   GA_x
    333  6d02		       a2 00		      ldx	#$00
    334  6d04				   GA_a
    335  6d04		       a9 00		      lda	#$00
    336  6d06		       20 83 6c 	      jsr	ARP_REQUEST
    337  6d09							;wait until ARP_REPLY recieved
    338  6d09
    339  6d09				   GA_d
    340  6d09		       ad 69 6b 	      lda	ARP_STATE	;IF ARP_STATE has returned to 0
    341  6d0c		       f0 03		      beq	GA_X
    342  6d0e		       4c 09 6d 	      jmp	GA_d
    343  6d11
    344  6d11				   GA_X
    345  6d11		       a9 72		      lda	#<(INPACKET+$16)
    346  6d13		       a2 8e		      ldx	#>(INPACKET+$16)
    347  6d15		       20 75 6d 	      jsr	ARP_CACHEIT
    348  6d18		       18		      clc
    349  6d19		       60		      rts
    350  6d1a
    351  6d1a
    352  6d1a							;=============================================================================
    353  6d1a				   ARP_CACHED		;expects pointer to IP in x:a, returns carry set if no match,
    354  6d1a							;carry set, pointer in x:a to match if match found
    355  6d1a		       8d 3c 6d 	      sta	ARP_CACHED_2+1
    356  6d1d		       8e 3d 6d 	      stx	ARP_CACHED_2+2
    357  6d20
    358  6d20		       a9 8c		      lda	#<ARP_CACHE_I
    359  6d22		       8d 39 6d 	      sta	ARP_CACHED_1+1
    360  6d25		       a9 6b		      lda	#>ARP_CACHE_I
    361  6d27		       8d 3a 6d 	      sta	ARP_CACHED_1+2
    362  6d2a
    363  6d2a		       a9 9c		      lda	#<ARP_CACHE_M
    364  6d2c		       8d 5d 6d 	      sta	ARP_CACHED_a+1
    365  6d2f		       a9 6b		      lda	#>ARP_CACHE_M
    366  6d31		       8d 5b 6d 	      sta	ARP_CACHED_x+1
    367  6d34
    368  6d34
    369  6d34		       a0 00		      ldy	#$00
    370  6d36				   ARP_CACHED_0
    371  6d36		       a2 00		      ldx	#$00
    372  6d38				   ARP_CACHED_1
    373  6d38		       bd 8c 6b 	      lda	ARP_CACHE_I,x
    374  6d3b				   ARP_CACHED_2
    375  6d3b		       dd ff ff 	      cmp	$ffff,x
    376  6d3e		       d0 20		      bne	ARP_CACHED_3
    377  6d40		       e8		      inx
    378  6d41		       e0 04		      cpx	#$04
    379  6d43		       d0 f3		      bne	ARP_CACHED_1
    380  6d45							;match was found!
    381  6d45		       c0 00		      cpy	#$00
    382  6d47		       f0 11		      beq	ARP_CACHED_x
    383  6d49				   ARP_CACHED_5
    384  6d49		       a9 06		      lda	#$06
    385  6d4b		       18		      clc
    386  6d4c		       6d 5d 6d 	      adc	ARP_CACHED_a+1
    387  6d4f		       8d 5d 6d 	      sta	ARP_CACHED_a+1
    388  6d52		       90 03		      bcc	ARP_CACHED_6
    389  6d54		       ee 5b 6d 	      inc	ARP_CACHED_x+1
    390  6d57				   ARP_CACHED_6
    391  6d57		       88		      dey
    392  6d58		       d0 ef		      bne	ARP_CACHED_5
    393  6d5a				   ARP_CACHED_x
    394  6d5a		       a2 00		      ldx	#$00
    395  6d5c				   ARP_CACHED_a
    396  6d5c		       a9 00		      lda	#$00
    397  6d5e		       18		      clc
    398  6d5f		       60		      rts
    399  6d60
    400  6d60				   ARP_CACHED_3
    401  6d60		       a9 04		      lda	#$04
    402  6d62		       18		      clc
    403  6d63		       6d 39 6d 	      adc	ARP_CACHED_1+1
    404  6d66		       8d 39 6d 	      sta	ARP_CACHED_1+1
    405  6d69		       90 03		      bcc	ARP_CACHED_4
    406  6d6b		       ee 3a 6d 	      inc	ARP_CACHED_1+2
    407  6d6e				   ARP_CACHED_4
    408  6d6e		       c8		      iny
    409  6d6f		       c4 05		      cpy	ARP_CACHE_DEPTH
    410  6d71		       d0 c3		      bne	ARP_CACHED_0
    411  6d73
    412  6d73				   ARP_CACHED_NM		;no match found.
    413  6d73		       38		      sec
    414  6d74		       60		      rts
    415  6d75
    416  6d75							;=============================================================================
    417  6d75				   ARP_CACHEIT
    418  6d75		       8e b0 6d 	      stx	ARP_CACHEIT_x+1
    419  6d78		       8d b2 6d 	      sta	ARP_CACHEIT_a+1
    420  6d7b
    421  6d7b							;rotate bottom 3 entries down by one
    422  6d7b		       a2 08		      ldx	#8
    423  6d7d				   ARP_CACHEIT_0
    424  6d7d		       bd 8c 6b 	      lda	ARP_CACHE_I,x
    425  6d80		       9d 90 6b 	      sta	ARP_CACHE_I+4,x
    426  6d83		       ca		      dex
    427  6d84		       e0 ff		      cpx	#$ff
    428  6d86		       d0 f5		      bne	ARP_CACHEIT_0
    429  6d88
    430  6d88		       a2 0c		      ldx	#12
    431  6d8a				   ARP_CACHEIT_1
    432  6d8a		       bd 9c 6b 	      lda	ARP_CACHE_M,x
    433  6d8d		       9d a2 6b 	      sta	ARP_CACHE_M+6,x
    434  6d90		       ca		      dex
    435  6d91		       e0 ff		      cpx	#$ff
    436  6d93		       d0 f5		      bne	ARP_CACHEIT_1
    437  6d95
    438  6d95		       a2 00		      ldx	#$00
    439  6d97				   ARP_CACHEIT_2
    440  6d97		       bd 88 6b 	      lda	ARP_DST_IP,x
    441  6d9a		       9d 8c 6b 	      sta	ARP_CACHE_I,x
    442  6d9d		       e8		      inx
    443  6d9e		       e0 04		      cpx	#$04
    444  6da0		       d0 f5		      bne	ARP_CACHEIT_2
    445  6da2
    446  6da2		       a2 00		      ldx	#$00
    447  6da4				   ARP_CACHEIT_3
    448  6da4		       bd 72 8e 	      lda	INPACKET+$16,x
    449  6da7		       9d 9c 6b 	      sta	ARP_CACHE_M,x
    450  6daa		       e8		      inx
    451  6dab		       e0 06		      cpx	#$06
    452  6dad		       d0 f5		      bne	ARP_CACHEIT_3
    453  6daf				   ARP_CACHEIT_x
    454  6daf		       a2 00		      ldx	#$00
    455  6db1				   ARP_CACHEIT_a
    456  6db1		       a9 00		      lda	#$00
    457  6db3		       60		      rts
    458  6db4
    459  6db4
    460  6db4							;That's all, folks.  Time for a beer
    461  6db4							;
    462  6db4							;	  [~]
    463  6db4							;	  |=|
    464  6db4							;	.-' '-.
    465  6db4							;	|-----|  Warsteiner
    466  6db4							;	| ~~~ |  "Die Konigen unter den bieren"
    467  6db4							;	| ~~~ |
    468  6db4							;	| WAR |
    469  6db4							;	|-----|
    470  6db4							;	'-----'
    471  6db4							;
    472  6db4							;
    473  6db4							;
    474  6db4							;Six of Style 2006
------- FILE SIXNET.ASM
------- FILE IP.ASM LEVEL 3 PASS 2
      0  6db4					      include	"IP.ASM"
      1  6db4							;Source by Six of Style (Oliver VieBrooks)
      2  6db4							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  6db4							;
      4  6db4							;Last Updated 1/25/2006
      5  6db4							;
      6  6db4							;IP PROTOCOL==================================================================
      7  6db4							;							 _,.-------.,_
      8  6db4							;IP PACKET FORMAT:				     ,;~'	      '~;,
      9  6db4							;+----------+----------+---------+		   ,;			  ;,
     10  6db4							;|$00-$0d   |$0e-$21	|$22->	  |		  ;			    ;
     11  6db4							;+----------+----------+---------+		 ,'			    ',
     12  6db4							;|MAC Header|IP Header |IP Data  |		,;			     ;,
     13  6db4							;+----------+----------+---------+		; ;	 .	     .	    ; ;
     14  6db4							;						| ;   ______	   ______   ; |
     15  6db4							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  6db4							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  6db4							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  6db4							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  6db4							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  6db4							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  6db4							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  6db4							;$0f - Type of Service 			   V| \ 		/ |V
     23  6db4							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  6db4							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  6db4							;$14 - Flags					    |  \,III I I I III,/  |
     26  6db4							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  6db4							;$16 - Time To Live				       \   .	   .   /
     28  6db4							;$17 - Protocol					 \.    ^    ./
     29  6db4							;$18 - Checksum					   ^~~~^~~~^
     30  6db4							;$1a - Source IP Address
     31  6db4							;$1e - Destination IP Address
     32  6db4
     33  6db4		       00 01	   IP_PROTOCOL_ICMP =	1
     34  6db4		       00 06	   IP_PROTOCOL_TCP =	6
     35  6db4		       00 11	   IP_PROTOCOL_UDP =	17
     36  6db4
     37  6db4		       00	   IP_BCAST   dc.b	0
     38  6db5		       ff ff ff ff IP_BCASTIP dc.b	255,255,255,255
     39  6db9		       ff ff ff ff*IP_BCASTIPMAC dc.b	255,255,255,255,255,255
     40  6dbf				   IP_HEADER
     41  6dbf
     42  6dbf		       45	   IP_VERSION dc.b	$45	;Version and IHL (STATIC)
     43  6dc0		       00	   IP_TOS     dc.b	$00	;Type of Service (STATIC)
     44  6dc1		       00 00	   IP_TOTAL_LEN dc.w	$0000	;Total Length of packet (H:L)(-MAC Header Length)
     45  6dc3		       00 00	   IP_IDENTIFIER dc.w	$0000	;Packet Identifier (STATIC) <-Not Good
     46  6dc5		       40	   IP_FLAGS   dc.b	$40	;Flags (STATIC)
     47  6dc6		       00	   IP_FRAGMENT dc.b	$00	;Fragment (STATIC)
     48  6dc7		       ff	   IP_TTL     dc.b	$FF	;TTL
     49  6dc8		       00	   IP_PROTOCOL dc.b	$00
     50  6dc9		       00 00	   IP_CHECKSUM dc.w	$0000
     51  6dcb		       00 00 00 00 IP_SOURCE  dc.w	$0000,$0000
     52  6dcf		       00 00 00 00 IP_DEST    dc.w	$0000,$0000
     53  6dd3				   IP_DATA
     54  6dd3		       00 00 00 00*IP_BUFFER  ds.b	$1000	;4k buffer
     55  7dd3		       00 00	   IP_DATALEN dc.b	$00,$00
     56  7dd5
     57  7dd5							;broadcast
     58  7dd5
     59  7dd5							;=============================================================================
     60  7dd5							;Initialize IP
     61  7dd5				   IP_INIT
     62  7dd5		       a9 39		      lda	#<CARD_IP
     63  7dd7		       a2 5e		      ldx	#>CARD_IP
     64  7dd9		       20 4e 7e 	      jsr	IP_SET_SRC
     65  7ddc		       60		      rts
     66  7ddd							;=============================================================================
     67  7ddd							;Process incoming IP Packet
     68  7ddd				   IP_PROCESS		;act on incoming IP Packet
     69  7ddd		       ad 73 8e 	      lda	INPACKET+$17
     70  7de0		       c9 01		      cmp	#IP_PROTOCOL_ICMP	;Is this an ICMP packet?
     71  7de2		       d0 03		      bne	NOT_ICMP
     72  7de4							;(LB) This doesn't do anything, but the fact that it is here makes incoming pings work.  Bizarre!
     73  7de4							;IPRINT "ICMP PACKET RECEIVED",13
     74  7de4		       4c bf 7f 	      jmp	ICMP_PROCESS
     75  7de7
     76  7de7				   NOT_ICMP
     77  7de7		       c9 11		      cmp	#IP_PROTOCOL_UDP
     78  7de9		       d0 03		      bne	NOT_UDP
     79  7deb		       4c 92 83 	      jmp	UDP_PROCESS
     80  7dee
     81  7dee				   NOT_UDP
     82  7dee		       c9 06		      cmp	#IP_PROTOCOL_TCP
     83  7df0		       d0 03		      bne	NOT_TCP
     84  7df2		       4c cd 88 	      jmp	TCP_PROCESS
     85  7df5				   NOT_TCP
     86  7df5		       60		      rts
     87  7df6
     88  7df6							;=============================================================================
     89  7df6				   IP_SEND		;expects header to already be built.
     90  7df6							;	PRINT 13,"ip send called",13
     91  7df6
     92  7df6		       20 8f 7e 	      jsr	IP_SETCHECKSUM
     93  7df9		       ad b4 6d 	      lda	IP_BCAST
     94  7dfc		       f0 0e		      beq	IP_SEND3	;is this a broadcast packet?
     95  7dfe		       a9 b5		      lda	#<IP_BCASTIP
     96  7e00		       a2 6d		      ldx	#>IP_BCASTIP
     97  7e02		       20 62 7e 	      jsr	IP_SETDEST
     98  7e05		       a9 b9		      lda	#<IP_BCASTIPMAC
     99  7e07		       a2 6d		      ldx	#>IP_BCASTIPMAC
    100  7e09		       4c 28 7e 	      jmp	IP_SEND2
    101  7e0c				   IP_SEND3
    102  7e0c		       a9 cf		      lda	#<IP_DEST
    103  7e0e		       a2 6d		      ldx	#>IP_DEST
    104  7e10		       20 fd 66 	      jsr	IPMASK
    105  7e13		       90 07		      bcc	IP_SEND1
    106  7e15
    107  7e15							;external IP, use GW_MAC
    108  7e15		       a9 45		      lda	#<CARD_GATE_MAC
    109  7e17		       a2 5e		      ldx	#>CARD_GATE_MAC
    110  7e19		       4c 28 7e 	      jmp	IP_SEND2
    111  7e1c
    112  7e1c							;internal IP, resolve its MAC and set it
    113  7e1c				   IP_SEND1
    114  7e1c		       a9 cf		      lda	#<IP_DEST
    115  7e1e		       a2 6d		      ldx	#>IP_DEST
    116  7e20		       20 f6 6c 	      jsr	GET_ARP
    117  7e23		       90 03		      bcc	IP_SEND2
    118  7e25		       4c 48 7e 	      jmp	IP_SEND_ERR
    119  7e28
    120  7e28				   IP_SEND2
    121  7e28		       20 29 6b 	      jsr	MAC_SETDEST
    122  7e2b							;set source MAC
    123  7e2b		       20 3d 6b 	      jsr	MAC_SETSRC	;<-This can be optimized out!
    124  7e2e							;set MAC Type
    125  7e2e		       a2 08		      ldx	#$08
    126  7e30		       a9 00		      lda	#$00
    127  7e32		       20 62 6b 	      jsr	MAC_SETTYPE
    128  7e35							;Set MAC Data Addr
    129  7e35		       a9 bf		      lda	#<IP_HEADER
    130  7e37		       a2 6d		      ldx	#>IP_HEADER
    131  7e39		       20 22 6b 	      jsr	MAC_SETDATAADDR
    132  7e3c							;SET MAC Data Length (H:L to L:H)
    133  7e3c		       ad c2 6d 	      lda	IP_TOTAL_LEN+1
    134  7e3f		       ae c1 6d 	      ldx	IP_TOTAL_LEN
    135  7e42		       20 1b 6b 	      jsr	MAC_SETDATALEN
    136  7e45							;	PRINT 13,"ip calling mac send",13
    137  7e45		       4c d1 6a 	      jmp	MAC_SEND
    138  7e48				   IP_SEND_ERR
    139  7e48		       38		      sec
    140  7e49		       60		      rts
    141  7e4a							;Before IP_SEND
    142  7e4a							;Set Protocol
    143  7e4a							;Set Source
    144  7e4a							;Set Dest
    145  7e4a							;Set TTL
    146  7e4a							;Copy Data in and set data len
    147  7e4a							;=============================================================================
    148  7e4a				   IP_SETPROTOCOL		; Expects protocol in a
    149  7e4a		       8d c8 6d 	      sta	IP_PROTOCOL
    150  7e4d		       60		      rts
    151  7e4e							;=============================================================================
    152  7e4e				   IP_SET_SRC		;expects pointer to ip in x:a
    153  7e4e		       8e 58 7e 	      stx	IP_SSS+2
    154  7e51		       8d 57 7e 	      sta	IP_SSS+1
    155  7e54		       a2 00		      ldx	#$00
    156  7e56		       bd ff ff    IP_SSS     lda	$ffff,x
    157  7e59		       9d cb 6d 	      sta	IP_SOURCE,x
    158  7e5c		       e8		      inx
    159  7e5d		       e0 04		      cpx	#$04
    160  7e5f		       d0 f5		      bne	IP_SSS
    161  7e61		       60		      rts
    162  7e62							;=============================================================================
    163  7e62				   IP_SETDEST		;Expects dest ip addr in (x:a)
    164  7e62		       8d 6b 7e 	      sta	IP_SD1+$01
    165  7e65		       8e 6c 7e 	      stx	IP_SD1+$02
    166  7e68		       a2 00		      ldx	#$00
    167  7e6a		       bd ff ff    IP_SD1     lda	$FFFF,x
    168  7e6d		       9d cf 6d 	      sta	IP_DEST,x
    169  7e70		       e8		      inx
    170  7e71		       e0 04		      cpx	#$04
    171  7e73		       d0 f5		      bne	IP_SD1
    172  7e75		       60		      rts
    173  7e76							;=============================================================================
    174  7e76				   IP_SETTTL
    175  7e76		       8d c7 6d 	      sta	IP_TTL
    176  7e79		       60		      rts
    177  7e7a							;=============================================================================
    178  7e7a				   IP_SET_DATALEN		;expects length of data in IP_BUFFER in x:a
    179  7e7a		       8e c1 6d 	      stx	IP_TOTAL_LEN
    180  7e7d		       8d c2 6d 	      sta	IP_TOTAL_LEN+$01
    181  7e80							;add length of IP header ($14)
    182  7e80		       a9 14		      lda	#$14
    183  7e82		       18		      clc
    184  7e83		       6d c2 6d 	      adc	IP_TOTAL_LEN+1
    185  7e86		       8d c2 6d 	      sta	IP_TOTAL_LEN+1
    186  7e89		       90 03		      bcc	IPDL_0
    187  7e8b		       ee c1 6d 	      inc	IP_TOTAL_LEN
    188  7e8e				   IPDL_0
    189  7e8e		       60		      rts
    190  7e8f							;=============================================================================
    191  7e8f				   IP_SETCHECKSUM		;Routine by Doc Bacardi from RRNet Source
    192  7e8f							; clear checksum field
    193  7e8f		       a9 00		      lda	#0
    194  7e91		       8d c9 6d 	      sta	IP_CHECKSUM
    195  7e94		       8d ca 6d 	      sta	IP_CHECKSUM+$01
    196  7e97
    197  7e97							; start to make checksum at start of ip header
    198  7e97		       a9 bf		      lda	#<IP_HEADER
    199  7e99		       85 6a		      sta	MakeChecksumZp_Ptr
    200  7e9b		       a9 6d		      lda	#>IP_HEADER
    201  7e9d		       85 6b		      sta	MakeChecksumZp_Ptr+1
    202  7e9f
    203  7e9f							; length of area to make checksum of is the ip header
    204  7e9f		       a9 14		      lda	#$14
    205  7ea1		       8d db 62 	      sta	MakeChecksumZp_Len
    206  7ea4		       a9 00		      lda	#$00
    207  7ea6		       8d dc 62 	      sta	MakeChecksumZp_Len+1
    208  7ea9
    209  7ea9							; calculate checksum for the ip header
    210  7ea9		       20 df 62 	      jsr	MakeChecksum
    211  7eac
    212  7eac							; store checksum in header
    213  7eac		       8d c9 6d 	      sta	IP_CHECKSUM
    214  7eaf		       8e ca 6d 	      stx	IP_CHECKSUM+1
    215  7eb2		       60		      rts
    216  7eb3							;=============================================================================
    217  7eb3				   IP_SET_FRAG
    218  7eb3		       60		      rts
    219  7eb4
    220  7eb4				   IP_SET_BCAST
    221  7eb4		       8d b4 6d 	      sta	IP_BCAST
    222  7eb7		       60		      rts
------- FILE SIXNET.ASM
------- FILE ICMP.ASM LEVEL 3 PASS 2
      0  7eb8					      include	"ICMP.ASM"
      1  7eb8							;Source by Six of Style (Oliver VieBrooks)
      2  7eb8							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  7eb8							;
      4  7eb8							;Last Updated 1/26/2006
      5  7eb8							;
      6  7eb8							;ICMP PROTOCOL================================================================
      7  7eb8							;							 _,.-------.,_
      8  7eb8							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  7eb8							;+----------+---------+-----------+---------+	   ,;			  ;,
     10  7eb8							;|$00-$0d   |$0e-$21  |$22-$24    |$26->    |	  ;			    ;
     11  7eb8							;+----------+---------+-----------+---------+	 ,'	   Style 2006	    ',
     12  7eb8							;|MAC Header|IP Header|ICMP Header|ICMP Data|	,;			     ;,
     13  7eb8							;+----------+---------+-----------+---------+	; ;	 .	     .	    ; ;
     14  7eb8							;						| ;   ______	   ______   ; |
     15  7eb8							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  7eb8							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  7eb8							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  7eb8							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  7eb8							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  7eb8							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  7eb8							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  7eb8							;$0f - Type of Service 			   V| \ 		/ |V
     23  7eb8							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  7eb8							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  7eb8							;$14 - Flags					    |  \,III I I I III,/  |
     26  7eb8							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  7eb8							;$16 - Time To Live				       \   .	   .   /
     28  7eb8							;$17 - Protocol					 \.    ^    ./
     29  7eb8							;$18 - Checksum					   ^~~~^~~~^
     30  7eb8							;$1a - Source IP Address
     31  7eb8							;$1e - Destination IP Address
     32  7eb8							;
     33  7eb8							;ICMP Fields:
     34  7eb8							;$22 - Type
     35  7eb8							;$23 - Code
     36  7eb8							;$24 - Checksum
     37  7eb8							;$26 - Data
     38  7eb8							;=============================================================================
     39  7eb8							;EQUATES
     40  7eb8
     41  7eb8		       00 00	   ICMP_T_PONG =	$00
     42  7eb8		       00 03	   ICMP_T_UNREACHABLE =	$03
     43  7eb8		       00 04	   ICMP_T_SRC =	$04
     44  7eb8		       00 05	   ICMP_T_REDIRECT =	$05
     45  7eb8		       00 08	   ICMP_T_PING =	$08
     46  7eb8
     47  7eb8		       00 00	   ICMP_STATE_IDLE =	$00
     48  7eb8		       00 01	   ICMP_STATE_REQ =	$01
     49  7eb8		       00 02	   ICMP_STATE_REPLY =	$02
     50  7eb8
     51  7eb8							;=============================================================================
     52  7eb8				   ICMP_HEADER
     53  7eb8
     54  7eb8		       00	   ICMP_TYPE  dc.b	$00
     55  7eb9		       00	   ICMP_CODE  dc.b	$00
     56  7eba		       00 00	   ICMP_CHECKSUM dc.w	$0000
     57  7ebc
     58  7ebc		       00 00 00 00*ICMP_DATA  ds.b	$FC	; $fc bytes is the max data size we'll bother with.
     59  7fb8
     60  7fb8		       00 00	   ICMP_DATA_LEN dc.w	$00
     61  7fba
     62  7fba		       00	   ICMP_STATE dc.b	$00	;0=idle, 1=awaiting ping returns
     63  7fbb
     64  7fbb		       00 00 00 00 ICMP_DEST_IP dc.b	$00,$00,$00,$00
     65  7fbf
     66  7fbf							;=============================================================================
     67  7fbf				   ICMP_PROCESS 		;Process incoming ICMP packet
     68  7fbf		       ad 7e 8e 	      lda	INPACKET+$22
     69  7fc2		       c9 00		      cmp	#ICMP_T_PONG
     70  7fc4		       d0 04		      bne	ICMP_NOTREPLY
     71  7fc6		       20 42 8e 	      jsr	PING_PONGED	;process pong
     72  7fc9		       60		      rts
     73  7fca				   ICMP_NOTREPLY
     74  7fca		       c9 03		      cmp	#ICMP_T_UNREACHABLE
     75  7fcc		       d0 04		      bne	ICMP_NOTDNU
     76  7fce							;destination unreachable!
     77  7fce		       20 3c 8e 	      jsr	PING_DNU
     78  7fd1		       60		      rts
     79  7fd2				   ICMP_NOTDNU
     80  7fd2		       c9 08		      cmp	#ICMP_T_PING
     81  7fd4		       d0 04		      bne	ICMP_NOTREQ
     82  7fd6		       20 48 8e 	      jsr	PING_PINGED	;we've been pinged!
     83  7fd9		       60		      rts
     84  7fda				   ICMP_NOTREQ
     85  7fda		       60		      rts
     86  7fdb
     87  7fdb
     88  7fdb							;Before ICMP_SEND
     89  7fdb							;Set Type
     90  7fdb							;Set Code
     91  7fdb							;Put Data in ICMP_Data and Set Data Length
     92  7fdb							;Set Dest IP
     93  7fdb							;=============================================================================
     94  7fdb				   ICMP_SEND
     95  7fdb							;	PRINT 13,"icmp send called",13
     96  7fdb							;Generate ICMP Checksum
     97  7fdb		       20 4a 80 	      jsr	ICMP_GEN_CHECKSUM
     98  7fde							;Set IP Protocol to ICMP
     99  7fde		       a9 01		      lda	#IP_PROTOCOL_ICMP
    100  7fe0		       20 4a 7e 	      jsr	IP_SETPROTOCOL
    101  7fe3							;Our SRC IP is the stored CARD IP <-Can be optimized out
    102  7fe3		       a9 39		      lda	#<CARD_IP
    103  7fe5		       a2 5e		      ldx	#>CARD_IP
    104  7fe7		       20 4e 7e 	      jsr	IP_SET_SRC
    105  7fea
    106  7fea		       a9 bb		      lda	#<ICMP_DEST_IP
    107  7fec		       a2 7f		      ldx	#>ICMP_DEST_IP
    108  7fee		       20 62 7e 	      jsr	IP_SETDEST
    109  7ff1
    110  7ff1		       a9 80		      lda	#$80
    111  7ff3		       20 76 7e 	      jsr	IP_SETTTL
    112  7ff6
    113  7ff6							;Copy ICMP Header+Data to IP_DATA
    114  7ff6		       ad b8 7f 	      lda	ICMP_DATA_LEN
    115  7ff9		       18		      clc
    116  7ffa		       69 04		      adc	#$04
    117  7ffc		       48		      pha
    118  7ffd
    119  7ffd		       aa		      tax
    120  7ffe				   ICMP_SEND0
    121  7ffe		       bd b7 7e 	      lda	ICMP_HEADER-1,x
    122  8001		       9d d2 6d 	      sta	IP_BUFFER-1,x
    123  8004		       ca		      dex
    124  8005		       d0 f7		      bne	ICMP_SEND0
    125  8007		       68		      pla
    126  8008		       20 7a 7e 	      jsr	IP_SET_DATALEN
    127  800b
    128  800b							;Send
    129  800b		       a9 00		      lda	#$00
    130  800d		       8d b4 6d 	      sta	IP_BCAST
    131  8010		       4c f6 7d 	      jmp	IP_SEND
    132  8013		       60		      rts
    133  8014
    134  8014
    135  8014							;=============================================================================
    136  8014				   ICMP_SET_TYPE
    137  8014		       8d b8 7e 	      sta	ICMP_TYPE
    138  8017		       60		      rts
    139  8018
    140  8018							;=============================================================================
    141  8018				   ICMP_SET_CODE
    142  8018		       8d b9 7e 	      sta	ICMP_CODE
    143  801b		       60		      rts
    144  801c
    145  801c							;=============================================================================
    146  801c				   ICMP_COPY_DATA		;Expects data address in x:a, number of bytes in y
    147  801c		       8c b8 7f 	      sty	ICMP_DATA_LEN
    148  801f		       8c 32 80 	      sty	ICMPSD_C+1
    149  8022		       8e 2c 80 	      stx	ICMPSD_0+2
    150  8025		       8d 2b 80 	      sta	ICMPSD_0+1
    151  8028		       a2 00		      ldx	#$00
    152  802a				   ICMPSD_0
    153  802a		       bd ff ff 	      lda	$ffff,x
    154  802d		       9d bc 7e 	      sta	ICMP_DATA,x
    155  8030		       e8		      inx
    156  8031				   ICMPSD_C
    157  8031		       e0 ff		      cpx	#$ff
    158  8033		       d0 f5		      bne	ICMPSD_0
    159  8035		       60		      rts
    160  8036
    161  8036							;=============================================================================
    162  8036				   ICMP_SET_DEST_IP
    163  8036		       8d 3f 80 	      sta	Isd0+$01
    164  8039		       8e 40 80 	      stx	Isd0+$02
    165  803c		       a2 00		      ldx	#$00
    166  803e		       bd ff ff    Isd0       lda	$FFFF,x
    167  8041		       9d bb 7f 	      sta	ICMP_DEST_IP,x
    168  8044		       e8		      inx
    169  8045		       e0 04		      cpx	#$04
    170  8047		       d0 f5		      bne	Isd0
    171  8049		       60		      rts
    172  804a							;=============================================================================
    173  804a				   ICMP_GEN_CHECKSUM
    174  804a		       a9 00		      lda	#$00
    175  804c		       8d ba 7e 	      sta	ICMP_CHECKSUM
    176  804f		       8d bb 7e 	      sta	ICMP_CHECKSUM+1
    177  8052							; start to make checksum at start of ICMP header in OUTPACKET
    178  8052		       a9 b8		      lda	#<ICMP_HEADER
    179  8054		       85 6a		      sta	MakeChecksumZp_Ptr
    180  8056		       a9 7e		      lda	#>ICMP_HEADER
    181  8058		       85 6b		      sta	MakeChecksumZp_Ptr+1
    182  805a
    183  805a							; length of area to make checksum of is the ICMP Header+Data
    184  805a		       a9 00		      lda	#$00
    185  805c		       8d dc 62 	      sta	MakeChecksumZp_Len+$01
    186  805f		       ad b8 7f 	      lda	ICMP_DATA_LEN
    187  8062		       18		      clc
    188  8063		       69 04		      adc	#$04
    189  8065		       8d db 62 	      sta	MakeChecksumZp_Len
    190  8068		       90 03		      bcc	icg0
    191  806a		       ee dc 62 	      inc	MakeChecksumZp_Len+1
    192  806d				   icg0
    193  806d							; calculate checksum for the ip header
    194  806d		       20 df 62 	      jsr	MakeChecksum
    195  8070
    196  8070							; store checksum in packet
    197  8070		       8d ba 7e 	      sta	ICMP_CHECKSUM
    198  8073		       8e bb 7e 	      stx	ICMP_CHECKSUM+$01
    199  8076		       60		      rts
    200  8077
------- FILE SIXNET.ASM
------- FILE UDP.ASM LEVEL 3 PASS 2
      0  8077					      include	"UDP.ASM"
      1  8077							;Source by Six of Style (Oliver VieBrooks)
      2  8077							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  8077							;
      4  8077							;Last Updated 1/26/2006
      5  8077							;
      6  8077							;UDP PROTOCOL=================================================================
      7  8077							;							 _,.-------.,_
      8  8077							;IP PACKET FORMAT:				     ,;~'	      '~;,
      9  8077							;+----------+----------+----------+----+	   ,;			  ;,
     10  8077							;|$00-$0d   |$0e-$21	|$22-$29   |$2a-|	  ;			    ;
     11  8077							;+----------+----------+----------+----+	 ,'			    ',
     12  8077							;|MAC Header|IP Header |UDP Header|Data|	,;			     ;,
     13  8077							;+----------+----------+----------+----+	; ;	 .	     .	    ; ;
     14  8077							;						| ;   ______	   ______   ; |
     15  8077							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  8077							;$00 - Destination MAC (6)			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  8077							;$06 - Source MAC (6)				 |   |	      }:{	 |   |
     18  8077							;$0c - Packet Type (2) 			 |   !	     / | \	 !   |
     19  8077							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  8077							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  8077							;$0e - IP Version (1)				  \__.	     \/^\/	 .__/
     22  8077							;$0f - Type of Service (1)			   V| \ 		/ |V
     23  8077							;$10 - Total Length of packet (2)		    | |T~\___!___!___/~T| |
     24  8077							;$12 - Identifier (2)				    | |`IIII_I_I_I_IIII'| |
     25  8077							;$14 - Flags (1)				    |  \,III I I I III,/  |
     26  8077							;$15 - Fragment (1)				     \	 `~~~~~~~~~~'	 /
     27  8077							;$16 - Time To Live (1)			       \   .	   .   /
     28  8077							;$17 - Protocol (1)					 \.    ^    ./
     29  8077							;$18 - Checksum (2)					   ^~~~^~~~^
     30  8077							;$1a - Source IP Address (4)
     31  8077							;$1e - Destination IP Address (4)
     32  8077							;
     33  8077							;UDP Header Fields:
     34  8077							;$22 - Source Port (2)
     35  8077							;$24 - Dest Port (2)
     36  8077							;$26 - Length (2)
     37  8077							;$28 - Checksum (2)
     38  8077		       00	   UDP_BCAST  dc.b	$00
     39  8078				   UDP_PSEUDO_HEADER
     40  8078		       00 00 00 00 UDP_PSEUDO_SRC dc.b	$00,$00,$00,$00
     41  807c		       00 00 00 00 UDP_PSEUDO_DEST dc.b	$00,$00,$00,$00
     42  8080		       00 11	   UDP_PSEUDO_PROTOCOL dc.b	00,17
     43  8082		       00 00	   UDP_PSEUDO_LENGTH dc.b	$00,$00
     44  8084
     45  8084				   UDP_HEADER
     46  8084		       00 00	   UDP_SRC    dc.b	$00,$00
     47  8086		       00 00	   UDP_DEST   dc.b	$00,$00
     48  8088		       00 00	   UDP_PLEN   dc.b	$00,$00
     49  808a		       23 cf	   UDP_CSUM   dc.b	$23,$cf	;$00,$00
     50  808c
     51  808c		       00 00 00 00*UDP_DATA   ds.b	$300
     52  838c
     53  838c		       00 00 00 00 UDP_DEST_IP dc.b	$00,$00,$00,$00
     54  8390		       00 00	   UDP_LEN    dc.b	$00,$00
     55  8392				   UDP_INIT
     56  8392
     57  8392				   UDP_PROCESS		;process according to ports
     58  8392							;IPRINT "processing UDP Packet"
     59  8392							;Check for incoming DNS packets
     60  8392		       ad 80 8e 	      lda	INPACKET+$24
     61  8395		       c9 0c		      cmp	#>DNS_SOURCE_PORT
     62  8397		       d0 0a		      bne	UDP_PROC_USER	;(LB)
     63  8399		       ad 81 8e 	      lda	INPACKET+$25
     64  839c		       c9 57		      cmp	#<DNS_SOURCE_PORT
     65  839e		       d0 03		      bne	UDP_PROC_USER	;(LB)
     66  83a0		       20 74 8c 	      jsr	DNS_PROCESS
     67  83a3
     68  83a3							; Check for my UDP packets (LB)
     69  83a3				   UDP_PROC_USER
     70  83a3							;Check for incoming USER packets
     71  83a3		       ad 80 8e 	      lda	INPACKET+$24
     72  83a6		       c9 0b		      cmp	#>USER_UDP_PORT
     73  83a8		       d0 0b		      bne	UDP_PROC_2
     74  83aa		       ad 81 8e 	      lda	INPACKET+$25
     75  83ad		       c9 b8		      cmp	#<USER_UDP_PORT
     76  83af		       d0 04		      bne	UDP_PROC_2
     77  83b1		       20 d4 5f 	      jsr	MYUDP_PROCESS
     78  83b4		       60		      rts
     79  83b5
     80  83b5							;(LB) - removed, not using TFTP
     81  83b5							;UDP_PROC1
     82  83b5							;	;Check for incoming TFTP packets
     83  83b5							;	lda INPACKET+$24
     84  83b5							;	cmp #>TFTP_SRC_PORT
     85  83b5							;	bne UDP_PROC_2
     86  83b5							;	lda INPACKET+$25
     87  83b5							;	cmp #<TFTP_SRC_PORT
     88  83b5							;	bne UDP_PROC_2
     89  83b5							;	jmp TFTP_PROCESS
     90  83b5				   UDP_PROC_2
     91  83b5							;Check for incoming DHCP Replies
     92  83b5		       ad 80 8e 	      lda	INPACKET+$24
     93  83b8		       c9 00		      cmp	#>DHCP_SRC_PORT
     94  83ba		       d0 0a		      bne	UDP_PROC_x
     95  83bc		       ad 81 8e 	      lda	INPACKET+$25
     96  83bf		       c9 44		      cmp	#<DHCP_SRC_PORT
     97  83c1		       d0 03		      bne	UDP_PROC_x
     98  83c3		       4c 1d 8a 	      jmp	DHCP_PROCESS
     99  83c6				   UDP_PROC_x
    100  83c6		       60		      rts
    101  83c7
    102  83c7							;Before UDP_SEND
    103  83c7							;Set Source Port
    104  83c7							;Set Dest Port
    105  83c7							;Set Data Len
    106  83c7							;Copy Data
    107  83c7							;Set Dest IP
    108  83c7				   UDP_SEND
    109  83c7		       20 58 84 	      jsr	UDP_GEN_PSEUDO
    110  83ca		       20 78 84 	      jsr	UDP_SET_CSUM
    111  83cd		       a9 11		      lda	#IP_PROTOCOL_UDP
    112  83cf		       20 4a 7e 	      jsr	IP_SETPROTOCOL
    113  83d2		       a9 39		      lda	#<CARD_IP
    114  83d4		       a2 5e		      ldx	#>CARD_IP
    115  83d6		       20 4e 7e 	      jsr	IP_SET_SRC
    116  83d9
    117  83d9		       ad 77 80 	      lda	UDP_BCAST
    118  83dc		       f0 08		      beq	UDP_SEND0
    119  83de		       a9 01		      lda	#$01
    120  83e0		       20 b4 7e 	      jsr	IP_SET_BCAST
    121  83e3		       4c ed 83 	      jmp	UDP_SEND1
    122  83e6				   UDP_SEND0
    123  83e6		       a9 8c		      lda	#<UDP_DEST_IP
    124  83e8		       a2 83		      ldx	#>UDP_DEST_IP
    125  83ea		       20 62 7e 	      jsr	IP_SETDEST
    126  83ed				   UDP_SEND1
    127  83ed		       a9 80		      lda	#$80
    128  83ef		       20 76 7e 	      jsr	IP_SETTTL
    129  83f2
    130  83f2							;Copy UDP Header+Data to IP_DATA
    131  83f2		       a9 84		      lda	#<UDP_HEADER
    132  83f4		       85 63		      sta	CPY_SRC
    133  83f6		       a9 80		      lda	#>UDP_HEADER
    134  83f8		       85 64		      sta	CPY_SRC+1
    135  83fa		       a9 d3		      lda	#<IP_DATA
    136  83fc		       85 65		      sta	CPY_DST
    137  83fe		       a9 6d		      lda	#>IP_DATA
    138  8400		       85 66		      sta	CPY_DST+1
    139  8402		       ae 91 83 	      ldx	UDP_LEN+1
    140  8405		       ad 90 83 	      lda	UDP_LEN
    141  8408		       20 31 64 	      jsr	copyblock
    142  840b
    143  840b		       ad 90 83 	      lda	UDP_LEN
    144  840e		       ae 91 83 	      ldx	UDP_LEN+1
    145  8411		       20 7a 7e 	      jsr	IP_SET_DATALEN
    146  8414
    147  8414		       20 f6 7d 	      jsr	IP_SEND
    148  8417		       60		      rts
    149  8418
    150  8418				   UDP_SET_SRC_PORT		;expects source port in x:a
    151  8418		       8e 84 80 	      stx	UDP_SRC
    152  841b		       8d 85 80 	      sta	UDP_SRC+1
    153  841e		       60		      rts
    154  841f
    155  841f				   UDP_SET_DEST_PORT		;expects dest port in x:a
    156  841f		       8e 86 80 	      stx	UDP_DEST
    157  8422		       8d 87 80 	      sta	UDP_DEST+1
    158  8425		       60		      rts
    159  8426
    160  8426				   UDP_SET_DEST_IP		;expects pointer in x:a
    161  8426		       8d 2f 84 	      sta	USDI_0+1
    162  8429		       8e 30 84 	      stx	USDI_0+2
    163  842c		       a2 00		      ldx	#$00
    164  842e		       bd ff ff    USDI_0     lda	$ffff,x
    165  8431		       9d 8c 83 	      sta	UDP_DEST_IP,x
    166  8434		       e8		      inx
    167  8435		       e0 04		      cpx	#$04
    168  8437		       d0 f5		      bne	USDI_0
    169  8439		       60		      rts
    170  843a
    171  843a				   UDP_SET_DATALEN		;Expects len in x:a
    172  843a		       8e 91 83 	      stx	UDP_LEN+1
    173  843d		       8d 90 83 	      sta	UDP_LEN
    174  8440		       18		      clc
    175  8441		       69 08		      adc	#$08	;Size of UDP Header
    176  8443		       8d 90 83 	      sta	UDP_LEN
    177  8446		       90 03		      bcc	UDP_SDL1
    178  8448		       ee 91 83 	      inc	UDP_LEN+1
    179  844b				   UDP_SDL1
    180  844b		       ad 91 83 	      lda	UDP_LEN+1
    181  844e		       8d 88 80 	      sta	UDP_PLEN
    182  8451		       ad 90 83 	      lda	UDP_LEN
    183  8454		       8d 89 80 	      sta	UDP_PLEN+1
    184  8457
    185  8457		       60		      rts
    186  8458
    187  8458				   UDP_GEN_PSEUDO
    188  8458		       a2 00		      ldx	#$00
    189  845a				   UDPGP_0
    190  845a		       bd 39 5e 	      lda	CARD_IP,x
    191  845d		       9d 78 80 	      sta	UDP_PSEUDO_SRC,x
    192  8460		       bd 8c 83 	      lda	UDP_DEST_IP,x
    193  8463		       9d 7c 80 	      sta	UDP_PSEUDO_DEST,x
    194  8466		       e8		      inx
    195  8467		       e0 04		      cpx	#$04
    196  8469		       d0 ef		      bne	UDPGP_0
    197  846b		       ad 88 80 	      lda	UDP_PLEN
    198  846e		       8d 82 80 	      sta	UDP_PSEUDO_LENGTH
    199  8471		       ad 89 80 	      lda	UDP_PLEN+1
    200  8474		       8d 83 80 	      sta	UDP_PSEUDO_LENGTH+1
    201  8477		       60		      rts
    202  8478
    203  8478
    204  8478				   UDP_SET_CSUM 		;Routine by Doc Bacardi from RRNet Source
    205  8478							; clear checksum field
    206  8478		       a9 00		      lda	#0
    207  847a		       8d 8a 80 	      sta	UDP_CSUM
    208  847d		       8d 8b 80 	      sta	UDP_CSUM+$01
    209  8480							; start to make checksum at start of UDP pseudo header
    210  8480		       a9 78		      lda	#<(UDP_PSEUDO_HEADER)
    211  8482		       85 6a		      sta	MakeChecksumZp_Ptr
    212  8484		       a9 80		      lda	#>(UDP_PSEUDO_HEADER)
    213  8486		       85 6b		      sta	MakeChecksumZp_Ptr+1
    214  8488
    215  8488							; length of area to make checksum of is the $0c+LEN(UDP header+data)
    216  8488		       ad 90 83 	      lda	UDP_LEN
    217  848b		       8d db 62 	      sta	MakeChecksumZp_Len
    218  848e		       ad 91 83 	      lda	UDP_LEN+1
    219  8491		       8d dc 62 	      sta	MakeChecksumZp_Len+1
    220  8494
    221  8494		       a9 0c		      lda	#$0c
    222  8496		       18		      clc
    223  8497		       6d db 62 	      adc	MakeChecksumZp_Len
    224  849a		       8d db 62 	      sta	MakeChecksumZp_Len
    225  849d		       90 03		      bcc	UDP_SC0
    226  849f		       ee dc 62 	      inc	MakeChecksumZp_Len+1
    227  84a2				   UDP_SC0
    228  84a2		       20 df 62 	      jsr	MakeChecksum
    229  84a5
    230  84a5		       8d 8a 80 	      sta	UDP_CSUM
    231  84a8		       8e 8b 80 	      stx	UDP_CSUM+1
    232  84ab		       60		      rts
    233  84ac
    234  84ac
    235  84ac
    236  84ac
------- FILE SIXNET.ASM
------- FILE TCP.ASM LEVEL 3 PASS 2
      0  84ac					      include	"TCP.ASM"
      1  84ac							;Source by Six of Style (Oliver VieBrooks)
      2  84ac							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  84ac							;
      4  84ac							;Last Updated Feb/3/2006
      5  84ac							;
      6  84ac							;ICMP PROTOCOL================================================================
      7  84ac							;							 _,.-------.,_
      8  84ac							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  84ac							;+----------+---------+-----------+		   ,;			  ;,
     10  84ac							;|$00-$0d   |$0e-$20  |$21-$	   |		  ;			    ;
     11  84ac							;+----------+---------+-----------+		 ,'	  Style 2006	    ',
     12  84ac							;|MAC Header|IP Header|TCP Header |		,;			     ;,
     13  84ac							;+----------+---------+-----------+		; ;	 .	     .	    ; ;
     14  84ac							;						| ;   ______	   ______   ; |
     15  84ac							;MAC Header Fields:				|  `/~"     ~" . "~	"~\'  |
     16  84ac							;$00 - Destination MAC 			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  84ac							;$06 - Source MAC				 |   |	      }:{	 |   |
     18  84ac							;$0c - Packet Type				 |   !	     / | \	 !   |
     19  84ac							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  84ac							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  84ac							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  84ac							;$0f - Type of Service 			   V| \ 		/ |V
     23  84ac							;$12 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  84ac							;$13 - Protocol Address Size			    | |`IIII_I_I_I_IIII'| |
     25  84ac							;$14 - Opcode					    |  \,III I I I III,/  |
     26  84ac							;						     \	 `~~~~~~~~~~'	 /
     27  84ac							;						       \   .	   .   /
     28  84ac							;							 \.    ^    ./
     29  84ac							;							   ^~~~^~~~^
     30  84ac		       00 00	   TCP_STATUS_IDLE =	0
     31  84ac
     32  84ac							;client status
     33  84ac		       00 01	   TCP_STATUS_CONNECTING =	1	;Sent SYN PACKET, waiting for SYN-ACK
     34  84ac		       00 02	   TCP_STATUS_AWAITING_ACK =	2	;Sent Segments, awaiting ACK
     35  84ac		       00 03	   TCP_STATUS_AWAITING_DATA =	3	;Waiting for data (idle)
     36  84ac		       00 04	   TCP_STATUS_ACKING =	4	;Received Data, sending ACK
     37  84ac		       00 05	   TCP_STATUS_FIN_WAIT1 =	5	;Sent FIN, awaiting ACK
     38  84ac		       00 06	   TCP_STATUS_FIN_WAIT2 =	6	;Sent Last ACK, awaiting Server Last ACK
     39  84ac		       00 07	   TCP_STATUS_TIME_WAIT =	7	;Waiting for FIN-RETRY,
     40  84ac
     41  84ac
     42  84ac		       00 01	   SOCKET_STATUS_CLOSED =	1
     43  84ac		       00 02	   SOCKET_STATUS_LISTEN =	2
     44  84ac		       00 03	   SOCKET_STATUS_SYN_SENT =	3
     45  84ac		       00 04	   SOCKET_STATUS_SYN_RECEIVED =	4
     46  84ac		       00 05	   SOCKET_STATUS_ESTABLISHED =	5
     47  84ac
     48  84ac
     49  84ac
     50  84ac		       64 00	   TCP_CLIENT_LOCAL_PORT dc.w	$0064
     51  84ae		       00 00	   TCP_CLIENT_REMOTE_PORT dc.w	$0000
     52  84b0		       00 00 00 00 TCP_CLIENT_REMOTE_IP dc.b	$00,$00,$00,$00
     53  84b4		       00	   TCP_CLIENT_STATUS dc.b	$00
     54  84b5
     55  84b5				   TCP_HEADER
     56  84b5
     57  84b5		       00 00	   TCP_SOURCE_PORT dc.w	$0000
     58  84b7		       00 00	   TCP_DEST_PORT dc.w	$0000
     59  84b9		       00 00 00 00 TCP_SEQ_NUM dc.w	$0000,$0000
     60  84bd		       00 00 00 00 TCP_ACK_NUM dc.w	$0000,$0000
     61  84c1		       00 00	   TCP_CONTROL_WORD dc.w	$0000
     62  84c3		       00 00	   TCP_WINDOW dc.w	$0000
     63  84c5		       00 00	   TCP_CHECKSUM dc.w	$0000
     64  84c7		       00 00	   TCP_URGENT dc.w	$0000
     65  84c9		       00 00 00 00 TCP_OPTIONS dc.w	$0000,$0000
     66  84cd		       00 00 00 00*TCP_DATA   ds.b	$400
     67  88cd
     68  88cd				   TCP_PROCESS		;process incoming packet
     69  88cd		       60		      rts
     70  88ce							;Before TCP_CONNECT
     71  88ce							;
     72  88ce				   TCP_CONNECT
     73  88ce
     74  88ce
     75  88ce				   TCP_SEND
     76  88ce							;Before TCP_SEND
     77  88ce							;Set Source Port
     78  88ce							;Set Dest Port
     79  88ce							;Set Data Len
     80  88ce							;Copy Data
     81  88ce							;Set Dest IP
     82  88ce							;Generate Checksum
     83  88ce							;jsr TCP_GEN_PSEUDO
     84  88ce							;jsr TCP_SET_CSUM
     85  88ce
     86  88ce							;lda #IP_PROTOCOL_TCP
     87  88ce							;jsr IP_SETPROTOCOL
     88  88ce
     89  88ce							;lda #<CARD_IP
     90  88ce							;ldx #>CARD_IP
     91  88ce							;jsr IP_SET_SRC
     92  88ce
     93  88ce							;lda #<TCP_DEST_IP
     94  88ce							;ldx #>TCP_DEST_IP
     95  88ce							;jsr IP_SETDEST
     96  88ce
     97  88ce							;lda #$80
     98  88ce							;jsr IP_SETTTL
     99  88ce
    100  88ce							;Copy UDP Header+Data to IP_DATA
    101  88ce							;lda #<TCP_HEADER
    102  88ce							;sta CPY_SRC
    103  88ce							;lda #>TCP_HEADER
    104  88ce							;sta CPY_SRC+1
    105  88ce							;lda #<IP_DATA
    106  88ce							;sta CPY_DST
    107  88ce							;lda #>IP_DATA
    108  88ce							;sta CPY_DST+1
    109  88ce							;ldx TCP_LEN+1
    110  88ce							;lda TCP_LEN
    111  88ce							;jsr copyblock
    112  88ce
    113  88ce
    114  88ce							;lda TCP_LEN
    115  88ce							;ldx TCP_LEN+1
    116  88ce							;jsr IP_SET_DATALEN
    117  88ce
    118  88ce							;jsr IP_SEND
    119  88ce		       60		      rts
    120  88cf
------- FILE SIXNET.ASM
    129  88cf
------- FILE DHCP.ASM LEVEL 3 PASS 2
      0  88cf					      include	"DHCP.ASM"
      1  88cf							;Source by Six of Style (Oliver VieBrooks)
      2  88cf							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  88cf							;
      4  88cf							;Last Updated 4/24/2006
      5  88cf							;
      6  88cf							;DHCP PROTOCOL=================================================================
      7  88cf							;							  _,.-------.,_
      8  88cf							;DHCP PACKET FORMAT:				      ,;~'	       '~;,
      9  88cf							;+----------+---------+----------+-----------+     ,;			   ;,
     10  88cf							;|$00-$0d   |$0e-$21  |$22-$29   |$2a-       |    ;			     ;
     11  88cf							;+----------+---------+----------+-----------+   ,'			     ',
     12  88cf							;|MAC Header|IP Header|UDP Header|DHCP Packet|  ,;			      ;,
     13  88cf							;+----------+---------+----------+-----------+  ; ;	  .	      .      ; ;
     14  88cf							;						 | ;   ______	    ______   ; |
     15  88cf							;MAC Header Fields:				 |  `/~"     ~" . "~	 "~\'  |
     16  88cf							;$00 - Destination MAC (6)			 |  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  88cf							;$06 - Source MAC (6)				  |   |        }:{	  |   |
     18  88cf							;$0c - Packet Type (2) 			  |   !       / | \	  !   |
     19  88cf							;						  .~  (__,.--" .^. "--.,__)  ~.
     20  88cf							;IP Header Fields:				  |	---;' / | \ `;---     |
     21  88cf							;$0e - IP Version (1)				   \__.       \/^\/	  .__/
     22  88cf							;$0f - Type of Service (1)			    V| \		 / |V
     23  88cf							;$10 - Total Length of packet (2)		     | |T~\___!___!___/~T| |
     24  88cf							;$12 - Identifier (2)				     | |`IIII_I_I_I_IIII'| |
     25  88cf							;$14 - Flags (1)				     |	\,III I I I III,/  |
     26  88cf							;$15 - Fragment (1)				      \   `~~~~~~~~~~'	  /
     27  88cf							;$16 - Time To Live (1)				\   .	    .	/
     28  88cf							;$17 - Protocol (1)					  \.	^    ./
     29  88cf							;$18 - Checksum (2)					    ^~~~^~~~^
     30  88cf							;$1a - Source IP Address (4)
     31  88cf							;$1e - Destination IP Address (4)
     32  88cf							;
     33  88cf							;UDP Header Fields:
     34  88cf							;$22 - Source Port (2)
     35  88cf							;$24 - Dest Port (2)
     36  88cf							;$26 - Length (2)
     37  88cf							;$28 - Checksum (2)
     38  88cf							;
     39  88cf							;DHCP Packet Fields
     40  88cf							;$2a - Opcode (1)
     41  88cf							;$2b - Hardware Type (1)
     42  88cf							;$2c - Hardware Address Length (1)
     43  88cf							;$2d - Hop Count (1)
     44  88cf							;$2e - Transaction ID (4)
     45  88cf							;$32 - Number of seconds (2)
     46  88cf							;$34 - Flags (2) (only using 1 bit!)
     47  88cf							;$36 - Client IP (4)
     48  88cf							;$3a - Your IP (4)
     49  88cf							;$3e - Server IP (4)
     50  88cf							;$42 - Gateway IP (4)
     51  88cf							;$46 - Client Hardware Address (16)
     52  88cf							;$56 - Server Host Name (64)
     53  88cf							;$96 - Boot filename (128)
     54  88cf							;=============================================================================
     55  88cf							;EQUATES
     56  88cf		       00 00	   DHCP_STATE_IDLE =	$00
     57  88cf		       00 01	   DHCP_STATE_DISCOVER =	$01
     58  88cf		       00 02	   DHCP_STATE_REQ =	$02
     59  88cf
     60  88cf
     61  88cf		       00 01	   DHCP_MTYPE_REQ =	$01
     62  88cf		       00 02	   DHCP_MTYPE_REPLY =	$02
     63  88cf
     64  88cf		       00 01	   DHCP_HWTYPE_ETHERNET =	1	;
     65  88cf
     66  88cf		       00	   DHCP_STATE dc.b	$00
     67  88cf		       00 44	   DHCP_SRC_PORT =	68
     68  88cf		       00 43	   DHCP_DEST_PORT =	67
     69  88d0
     70  88d0		       00 01	   DHCP_OPTION_MASK =	1
     71  88d0		       00 03	   DHCP_OPTION_ROUTER =	3
     72  88d0		       00 06	   DHCP_OPTION_NAMESERV =	6
     73  88d0		       00 32	   DHCP_OPTION_IPADDR =	50
     74  88d0		       00 33	   DHCP_OPTION_LEASE =	51
     75  88d0		       00 35	   DHCP_OPTION_TYPE =	53
     76  88d0		       00 36	   DHCP_OPTION_SERVER =	54
     77  88d0		       00 ff	   DHCP_OPTION_END =	255
     78  88d0
     79  88d0							;=============================================================================
     80  88d0		       00 00 00 00 DHCP_SERVER dc.b	0,0,0,0
     81  88d4				   DHCP_HEADER
     82  88d4		       00	   DHCP_MTYPE dc.b	$00
     83  88d5		       01	   DHCP_HWTYPE dc.b	$01
     84  88d6		       06	   DHCP_HWLEN dc.b	$06
     85  88d7		       00	   DHCP_HOP   dc.b	$00
     86  88d8		       37 33 7c 64 DHCP_TID   dc.b	$37,$33,$7c,$64
     87  88dc		       00 00	   DHCP_NOS   dc.b	$00,$00
     88  88de		       00 00	   DHCP_FLAGS dc.b	$00,$00
     89  88e0		       00 00 00 00 DHCP_CADDRESS dc.b	$00,$00,$00,$00
     90  88e4		       00 00 00 00 DHCP_YADDRESS dc.b	$00,$00,$00,$00
     91  88e8		       00 00 00 00 DHCP_SADDRESS dc.b	$00,$00,$00,$00
     92  88ec		       00 00 00 00 DHCP_GADDRESS dc.b	$00,$00,$00,$00
     93  88f0
     94  88f0		       00 00 00 00*DHCP_HWADDRESS ds.b	16,0
     95  8900		       00 00 00 00*DHCP_SHOSTNAME ds.b	64,0
     96  8940		       00 00 00 00*DHCP_BFILENAME ds.b	128,0
     97  89c0
     98  89c0		       63 82 53 63 DHCP_MAGIC dc.b	99,130,83,99
     99  89c4		       00 00 00 00*DHCP_DATA  ds.b	64,0
    100  8a04
    101  8a04		       35 01 01    DHCP_DISC_DATA dc.b	$35,$01,$01	;DHCP Message Type = DHCP Discover
    102  8a07		       37 03 01 03*	      dc.b	$37,$03,$01,$03,$06	;Parameter Request List = Mask,Router,DNS
    103  8a0c		       ff		      dc.b	$ff
    104  8a0d
    105  8a0d				   DHCP_REQ_DATA
    106  8a0d		       35 01 03 	      dc.b	$35,$01,$03
    107  8a10		       36 04		      dc.b	$36,$04
    108  8a12		       00 00 00 00 DHCP_REQ_SRV dc.b	$00,$00,$00,$00
    109  8a16		       32 04		      dc.b	$32,$04
    110  8a18		       00 00 00 00 DHCP_REQ_IP dc.b	$00,$00,$00,$00
    111  8a1c		       ff		      dc.b	$ff
    112  8a1d
    113  8a1d
    114  8a1d							;============================================================================
    115  8a1d				   DHCP_PROCESS 		;Process incoming DHCP packet
    116  8a1d		       ad cf 88 	      lda	DHCP_STATE
    117  8a20		       c5 01		      cmp	DHCP_STATE_DISCOVER
    118  8a22		       d0 03		      bne	DHCP_PROC0
    119  8a24							;Ok, we're in discover mode.  Is this an offer packet?
    120  8a24							;	lda (INPACKET+$11a)
    121  8a24							;	cmp #$35
    122  8a24							;	bne DHCP_PROCx
    123  8a24							;	lda (INPACKET+$11b)
    124  8a24							;	cmp #$01
    125  8a24							;	bne DHCP_PROCx
    126  8a24							;	lda (INPACKET+$11c)
    127  8a24							;	cmp #$02
    128  8a24							;	bne DHCP_PROCx
    129  8a24		       4c 2f 8a 	      jmp	DHCP_OFFER_PROC	;send a request based on this data
    130  8a27				   DHCP_PROC0
    131  8a27		       c5 02		      cmp	DHCP_STATE_REQ
    132  8a29		       d0 03		      bne	DHCP_PROCx
    133  8a2b		       4c 9b 8a 	      jmp	DHCP_SEND_ACK	;send an ack
    134  8a2e				   DHCP_PROCx
    135  8a2e		       60		      rts
    136  8a2f
    137  8a2f
    138  8a2f							;============================================================================
    139  8a2f				   DHCP_OFFER_PROC		;process DHCP OFFER Packet
    140  8a2f
    141  8a2f		       ad 96 8e 	      lda	INPACKET+$3a
    142  8a32		       8d 18 8a 	      sta	DHCP_REQ_IP
    143  8a35		       8d 39 5e 	      sta	CARD_IP
    144  8a38		       ad 97 8e 	      lda	INPACKET+$3b
    145  8a3b		       8d 19 8a 	      sta	DHCP_REQ_IP+1
    146  8a3e		       8d 3a 5e 	      sta	CARD_IP+1
    147  8a41		       ad 98 8e 	      lda	INPACKET+$3c
    148  8a44		       8d 1a 8a 	      sta	DHCP_REQ_IP+2
    149  8a47		       8d 3b 5e 	      sta	CARD_IP+2
    150  8a4a		       ad 99 8e 	      lda	INPACKET+$3d
    151  8a4d		       8d 3c 5e 	      sta	CARD_IP+3
    152  8a50		       8d 1b 8a 	      sta	DHCP_REQ_IP+3
    153  8a53
    154  8a53		       ad 9a 8e 	      lda	INPACKET+$3e
    155  8a56		       8d 12 8a 	      sta	DHCP_REQ_SRV
    156  8a59		       ad 9b 8e 	      lda	INPACKET+$3f
    157  8a5c		       8d 13 8a 	      sta	DHCP_REQ_SRV+1
    158  8a5f		       ad 9c 8e 	      lda	INPACKET+$40
    159  8a62		       8d 14 8a 	      sta	DHCP_REQ_SRV+2
    160  8a65		       ad 9d 8e 	      lda	INPACKET+$41
    161  8a68		       8d 15 8a 	      sta	DHCP_REQ_SRV+3
    162  8a6b							;HWTYPE, HWLEN, HOP, TID,NOS,flags,cad,yad,sad,gad,shost
    163  8a6b							;bfilename,magic are static
    164  8a6b							;hwaddress already set by discover
    165  8a6b		       a9 76		      lda	#<(INPACKET+$11a)
    166  8a6d		       a2 8f		      ldx	#>(INPACKET+$11a)
    167  8a6f				   DHCP_0x
    168  8a6f		       20 16 8b 	      jsr	DHCP_PARSEOPTION
    169  8a72		       90 fb		      bcc	DHCP_0x
    170  8a74
    171  8a74							;Set DHCP_DATA
    172  8a74		       a2 00		      ldx	#$00
    173  8a76				   DHCP_O1
    174  8a76		       bd 0d 8a 	      lda	DHCP_REQ_DATA,x
    175  8a79		       9d c4 89 	      sta	DHCP_DATA,x
    176  8a7c		       e8		      inx
    177  8a7d		       e0 16		      cpx	#$16
    178  8a7f		       d0 f5		      bne	DHCP_O1
    179  8a81							;rest is pad
    180  8a81		       a9 00		      lda	#$00
    181  8a83				   DHCP_O2
    182  8a83		       9d c4 89 	      sta	DHCP_DATA,x
    183  8a86		       e8		      inx
    184  8a87		       e0 40		      cpx	#$40
    185  8a89		       d0 f8		      bne	DHCP_O2
    186  8a8b							;set state
    187  8a8b		       a5 02		      lda	DHCP_STATE_REQ
    188  8a8d		       8d cf 88 	      sta	DHCP_STATE
    189  8a90
    190  8a90		       a9 b5		      lda	#<IP_BCASTIP
    191  8a92		       a2 6d		      ldx	#>IP_BCASTIP
    192  8a94		       20 26 84 	      jsr	UDP_SET_DEST_IP
    193  8a97
    194  8a97		       4c e2 8a 	      jmp	DHCP_SEND
    195  8a9a		       60		      rts
    196  8a9b
    197  8a9b							;============================================================================
    198  8a9b				   DHCP_SEND_ACK
    199  8a9b		       60		      rts
    200  8a9c							;============================================================================
    201  8a9c				   DHCP_DISCOVER		;Send DHCP Discover
    202  8a9c							;zero out card_ip
    203  8a9c		       a9 00		      lda	#$00
    204  8a9e		       8d 39 5e 	      sta	CARD_IP
    205  8aa1		       8d 3a 5e 	      sta	CARD_IP+1
    206  8aa4		       8d 3b 5e 	      sta	CARD_IP+2
    207  8aa7		       8d 3c 5e 	      sta	CARD_IP+3
    208  8aaa
    209  8aaa							;Setup DHCP
    210  8aaa		       a9 01		      lda	#DHCP_MTYPE_REQ
    211  8aac		       8d d4 88 	      sta	DHCP_MTYPE
    212  8aaf							;HWTYPE, HWLEN, HOP, TID,NOS,flags,cad,yad,sad,gad,shost
    213  8aaf							;bfilename,magic are static
    214  8aaf							;set client hardware address {Will only do this in DHCP_Discover)
    215  8aaf		       a2 00		      ldx	#$00
    216  8ab1				   DHCP_D0
    217  8ab1		       bd 33 5e 	      lda	CARD_MAC,x
    218  8ab4		       9d f0 88 	      sta	DHCP_HWADDRESS,x
    219  8ab7		       e8		      inx
    220  8ab8		       e0 06		      cpx	#$06
    221  8aba		       d0 f5		      bne	DHCP_D0
    222  8abc
    223  8abc							;Set DHCP_DATA
    224  8abc		       a2 00		      ldx	#$00
    225  8abe				   DHCP_D1
    226  8abe		       bd 04 8a 	      lda	DHCP_DISC_DATA,x
    227  8ac1		       9d c4 89 	      sta	DHCP_DATA,x
    228  8ac4		       e8		      inx
    229  8ac5		       e0 09		      cpx	#$09
    230  8ac7		       d0 f5		      bne	DHCP_D1
    231  8ac9							;rest is pad
    232  8ac9		       a9 00		      lda	#$00
    233  8acb				   DHCP_D2
    234  8acb		       9d c4 89 	      sta	DHCP_DATA,x
    235  8ace		       e8		      inx
    236  8acf		       e0 40		      cpx	#$40
    237  8ad1		       d0 f8		      bne	DHCP_D2
    238  8ad3		       a5 01		      lda	DHCP_STATE_DISCOVER
    239  8ad5		       8d cf 88 	      sta	DHCP_STATE
    240  8ad8		       a9 b5		      lda	#<IP_BCASTIP
    241  8ada		       a2 6d		      ldx	#>IP_BCASTIP
    242  8adc		       20 26 84 	      jsr	UDP_SET_DEST_IP
    243  8adf
    244  8adf		       4c e2 8a 	      jmp	DHCP_SEND
    245  8ae2
    246  8ae2							;============================================================================
    247  8ae2				   DHCP_SEND
    248  8ae2							;lda #<IP_BCAST
    249  8ae2							;ldx #>IP_BCAST
    250  8ae2							;jsr UDP_SET_DEST_IP
    251  8ae2		       a9 01		      lda	#$01
    252  8ae4		       8d 77 80 	      sta	UDP_BCAST
    253  8ae7							;Prep UDP
      0  8ae7					      ldax	#DHCP_SRC_PORT	;bootpc
      1  8ae7		       a2 00		      ldx	#>#DHCP_SRC_PORT
      2  8ae9		       a9 44		      lda	#<#DHCP_SRC_PORT
    255  8aeb		       20 18 84 	      jsr	UDP_SET_SRC_PORT
      0  8aee					      ldax	#DHCP_DEST_PORT	;bootps
      1  8aee		       a2 00		      ldx	#>#DHCP_DEST_PORT
      2  8af0		       a9 43		      lda	#<#DHCP_DEST_PORT
    257  8af2		       20 1f 84 	      jsr	UDP_SET_DEST_PORT
    258  8af5							;Set Data Len
      0  8af5					      ldax	#304
      1  8af5		       a2 01		      ldx	#>#304
      2  8af7		       a9 30		      lda	#<#304
    260  8af9		       20 3a 84 	      jsr	UDP_SET_DATALEN
    261  8afc
    262  8afc							;copy to udp data
    263  8afc		       a2 00		      ldx	#$00
    264  8afe		       bd d4 88    DHCP_S0    lda	DHCP_HEADER,x
    265  8b01		       9d 8c 80 	      sta	UDP_DATA,x
    266  8b04		       e8		      inx
    267  8b05		       d0 f7		      bne	DHCP_S0
    268  8b07		       bd 38 89 	      lda	DHCP_HEADER+100,x
    269  8b0a		       9d f0 80    DHCP_S1    sta	UDP_DATA+100,x
    270  8b0d		       e8		      inx
    271  8b0e		       e0 31		      cpx	#49
    272  8b10		       d0 f8		      bne	DHCP_S1
    273  8b12
    274  8b12		       20 c7 83 	      jsr	UDP_SEND
    275  8b15		       60		      rts
    276  8b16
    277  8b16
    278  8b16				   DHCP_PARSEOPTION
    279  8b16							;expects option start in x:a, returns cc if good, cs if end of options
    280  8b16							;returns address of next option in x:a
    281  8b16		       85 55		      sta	DHCP_PTR
    282  8b18		       86 56		      stx	DHCP_PTR+1
    283  8b1a				   DH_P0
    284  8b1a		       a0 00		      ldy	#$00
    285  8b1c		       b1 55		      lda	(DHCP_PTR),y
    286  8b1e		       c9 ff		      cmp	#DHCP_OPTION_END
    287  8b20
    288  8b20		       d0 02		      bne	DH_P1
    289  8b22							;end of options
    290  8b22		       38		      sec
    291  8b23		       60		      rts
    292  8b24
    293  8b24				   DH_P1		;subnet mask
    294  8b24		       c9 01		      cmp	#DHCP_OPTION_MASK
    295  8b26		       d0 1e		      bne	DH_P2
    296  8b28		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte
    297  8b2b		       a5 55		      lda	DHCP_PTR
      0  8b2d					      ldax	CARD_MASK
      1  8b2d		       a2 5e		      ldx	#>CARD_MASK
      2  8b2f		       a9 3d		      lda	#<CARD_MASK
      0  8b31					      stax	as0
      1  8b31		       8e e4 63 	      stx	as0+1
      2  8b34		       8d e3 63 	      sta	as0
      0  8b37					      ldxa	DHCP_PTR
      1  8b37		       a6 56		      ldx	DHCP_PTR+1
      2  8b39		       a5 55		      lda	DHCP_PTR
    301  8b3b		       a0 04		      ldy	#$04
    302  8b3d		       20 0b 64 	      jsr	copybytes
    303  8b40		       20 fc 8b 	      jsr	DH_PAdd4
    304  8b43		       4c f6 8b 	      jmp	DH_Px
    305  8b46				   DH_P2		;gateway
    306  8b46		       c9 03		      cmp	#DHCP_OPTION_ROUTER
    307  8b48		       d0 1e		      bne	DH_P3
    308  8b4a		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte
    309  8b4d		       a5 55		      lda	DHCP_PTR
      0  8b4f					      ldax	CARD_GATE
      1  8b4f		       a2 5e		      ldx	#>CARD_GATE
      2  8b51		       a9 41		      lda	#<CARD_GATE
      0  8b53					      stax	as0
      1  8b53		       8e e4 63 	      stx	as0+1
      2  8b56		       8d e3 63 	      sta	as0
      0  8b59					      ldxa	DHCP_PTR
      1  8b59		       a6 56		      ldx	DHCP_PTR+1
      2  8b5b		       a5 55		      lda	DHCP_PTR
    313  8b5d		       a0 04		      ldy	#$04
    314  8b5f		       20 0b 64 	      jsr	copybytes
    315  8b62		       20 fc 8b 	      jsr	DH_PAdd4
    316  8b65		       4c f6 8b 	      jmp	DH_Px
    317  8b68				   DH_P3		;name server
    318  8b68		       c9 06		      cmp	#DHCP_OPTION_NAMESERV
    319  8b6a		       d0 1e		      bne	DH_P4
    320  8b6c		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte (it's 4)
    321  8b6f		       a5 55		      lda	DHCP_PTR
      0  8b71					      ldax	CARD_NS1
      1  8b71		       a2 6a		      ldx	#>CARD_NS1
      2  8b73		       a9 8d		      lda	#<CARD_NS1
      0  8b75					      stax	as0
      1  8b75		       8e e4 63 	      stx	as0+1
      2  8b78		       8d e3 63 	      sta	as0
      0  8b7b					      ldxa	DHCP_PTR
      1  8b7b		       a6 56		      ldx	DHCP_PTR+1
      2  8b7d		       a5 55		      lda	DHCP_PTR
    325  8b7f		       a0 04		      ldy	#$04
    326  8b81		       20 0b 64 	      jsr	copybytes
    327  8b84		       20 fc 8b 	      jsr	DH_PAdd4
    328  8b87		       4c f6 8b 	      jmp	DH_Px
    329  8b8a				   DH_P4		;our ip address
    330  8b8a		       c9 32		      cmp	#DHCP_OPTION_IPADDR
    331  8b8c		       d0 1e		      bne	DH_P5
    332  8b8e		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte
    333  8b91		       a5 55		      lda	DHCP_PTR
      0  8b93					      ldax	CARD_IP
      1  8b93		       a2 5e		      ldx	#>CARD_IP
      2  8b95		       a9 39		      lda	#<CARD_IP
      0  8b97					      stax	as0
      1  8b97		       8e e4 63 	      stx	as0+1
      2  8b9a		       8d e3 63 	      sta	as0
      0  8b9d					      ldxa	DHCP_PTR
      1  8b9d		       a6 56		      ldx	DHCP_PTR+1
      2  8b9f		       a5 55		      lda	DHCP_PTR
    337  8ba1		       a0 04		      ldy	#$04
    338  8ba3		       20 0b 64 	      jsr	copybytes
    339  8ba6		       20 fc 8b 	      jsr	DH_PAdd4
    340  8ba9		       4c f6 8b 	      jmp	DH_Px
    341  8bac				   DH_P5		;DHCP Lease Duration
    342  8bac		       c9 33		      cmp	#DHCP_OPTION_LEASE
    343  8bae		       d0 09		      bne	DH_P6
    344  8bb0		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte
    345  8bb3		       20 fc 8b 	      jsr	DH_PAdd4	;skip this data.  Fuck leasing/renewing for now.
    346  8bb6		       4c f6 8b 	      jmp	DH_Px
    347  8bb9				   DH_P6		;DHCP Message Type
    348  8bb9		       c9 35		      cmp	#DHCP_OPTION_TYPE
    349  8bbb		       d0 09		      bne	DH_P7
    350  8bbd		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte + length byte
    351  8bc0		       20 05 8c 	      jsr	DH_PAdd	;skip data
    352  8bc3		       4c f6 8b 	      jmp	DH_Px
    353  8bc6				   DH_P7		;DHCP Server Address
    354  8bc6		       c9 36		      cmp	#DHCP_OPTION_SERVER
    355  8bc8		       d0 1e		      bne	DH_PErr
    356  8bca		       20 02 8c 	      jsr	DH_PAdd2	;skip option byte+length byte
    357  8bcd		       a5 55		      lda	DHCP_PTR
      0  8bcf					      ldax	DHCP_SERVER
      1  8bcf		       a2 88		      ldx	#>DHCP_SERVER
      2  8bd1		       a9 d0		      lda	#<DHCP_SERVER
      0  8bd3					      stax	as0
      1  8bd3		       8e e4 63 	      stx	as0+1
      2  8bd6		       8d e3 63 	      sta	as0
      0  8bd9					      ldxa	DHCP_PTR
      1  8bd9		       a6 56		      ldx	DHCP_PTR+1
      2  8bdb		       a5 55		      lda	DHCP_PTR
    361  8bdd		       a0 04		      ldy	#$04
    362  8bdf		       20 0b 64 	      jsr	copybytes
    363  8be2		       20 fc 8b 	      jsr	DH_PAdd4
    364  8be5		       4c f6 8b 	      jmp	DH_Px
    365  8be8				   DH_PErr		;unknown option, attempt to skip it and it's data.
    366  8be8		       20 05 8c 	      jsr	DH_PAdd	;discard option
    367  8beb		       a0 00		      ldy	#$00
    368  8bed		       b1 55		      lda	(DHCP_PTR),y
    369  8bef		       a8		      tay
    370  8bf0		       20 05 8c    DHPErrL    jsr	DH_PAdd
    371  8bf3		       88		      dey
    372  8bf4		       d0 fa		      bne	DHPErrL
    373  8bf6				   DH_Px
      0  8bf6					      ldxa	DHCP_PTR
      1  8bf6		       a6 56		      ldx	DHCP_PTR+1
      2  8bf8		       a5 55		      lda	DHCP_PTR
    375  8bfa		       18		      clc
    376  8bfb		       60		      rts
    377  8bfc
    378  8bfc				   DH_PAdd4
    379  8bfc		       20 05 8c 	      jsr	DH_PAdd
    380  8bff		       20 05 8c 	      jsr	DH_PAdd
    381  8c02				   DH_PAdd2
    382  8c02		       20 05 8c 	      jsr	DH_PAdd
    383  8c05				   DH_PAdd
    384  8c05		       e6 55		      inc	DHCP_PTR
    385  8c07		       d0 02		      bne	DHPAddx
    386  8c09		       e6 56		      inc	DHCP_PTR+1
    387  8c0b				   DHPAddx
    388  8c0b		       60		      rts
    389  8c0c
    390  8c0c
    391  8c0c
------- FILE SIXNET.ASM
------- FILE DNS.ASM LEVEL 3 PASS 2
      0  8c0c					      include	"DNS.ASM"
      1  8c0c							;Source by Six of Style (Oliver VieBrooks)
      2  8c0c							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  8c0c							;
      4  8c0c							;Last Updated 8/27/2005
      5  8c0c							;
      6  8c0c							;DNS PROTOCOL=================================================================
      7  8c0c							;							 _,.-------.,_
      8  8c0c							;   PACKET FORMAT:				     ,;~'	      '~;,
      9  8c0c							;+----------+----------+----------+		   ,;			  ;,
     10  8c0c							;|$00-$0d   |$0e-$21	|$22-$29   |		  ;			    ;
     11  8c0c							;+----------+----------+----------+		 ,'			    ',
     12  8c0c							;|MAC Header|IP Header |UDP Header|		,;			     ;,
     13  8c0c							;+----------+----------+----------+		; ;	 .	     .	    ; ;
     14  8c0c							;|						| ;   ______	   ______   ; |
     15  8c0c							;						|  `/~"     ~" . "~	"~\'  |
     16  8c0c							;						|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  8c0c							;						 |   |	      }:{	 |   |
     18  8c0c							;						 |   !	     / | \	 !   |
     19  8c0c							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  8c0c							;MAC Header Fields:				 |     ---;' / | \ `;---     |
     21  8c0c							;$00 - Destination MAC (6)			  \__.	     \/^\/	 .__/
     22  8c0c							;$06 - Source MAC (6)				   V| \ 		/ |V
     23  8c0c							;$0c - Packet Type (2) 			    | |T~\___!___!___/~T| |
     24  8c0c							;						    | |`IIII_I_I_I_IIII'| |
     25  8c0c							;IP Header Fields:				    |  \,III I I I III,/  |
     26  8c0c							;$0e - IP Version (1)				     \	 `~~~~~~~~~~'	 /
     27  8c0c							;$0f - Type of Service (1)			       \   .	   .   /
     28  8c0c							;$10 - Total Length of packet (2)			 \.    ^    ./
     29  8c0c							;$12 - Identifier (2)					   ^~~~^~~~^
     30  8c0c							;$14 - Flags (1)
     31  8c0c							;$15 - Fragment (1)
     32  8c0c							;$16 - Time To Live (1)
     33  8c0c							;$17 - Protocol (1)
     34  8c0c							;$18 - Checksum (2)
     35  8c0c							;$1a - Source IP Address (4)
     36  8c0c							;$1e - Destination IP Address (4)
     37  8c0c							;
     38  8c0c							;UDP Header Fields:
     39  8c0c							;$22 - Source Port (2)
     40  8c0c							;$24 - Dest Port (2)
     41  8c0c							;$26 - Length (2)
     42  8c0c							;$28 - Checksum (2)
     43  8c0c							;
     44  8c0c							;DNS Fields:
     45  8c0c							;$2a - Identification (2)
     46  8c0c							;$2c - Flags (2)
     47  8c0c							;	Control Byte 1 (1)
     48  8c0c							;	bit 0 - Query/Response
     49  8c0c							;	bits 1-4 - Opcode
     50  8c0c							;	bit 5 - Authoritative Answer
     51  8c0c							;	bit 6 - Truncated
     52  8c0c							;	bit 7 - Recursion Desired
     53  8c0c							;	Control Byte 2 (1)
     54  8c0c							;	bit 0 - Recursion Available
     55  8c0c							;	bit 1 - Z
     56  8c0c							;	bit 2 - Authenticated Data
     57  8c0c							;	bit 3 - Checking Disabled
     58  8c0c							;	bits 4-7 - Return code
     59  8c0c							;$2e - Total Questions (2)
     60  8c0c							;$30 - Total Answer RRs (2)
     61  8c0c							;$32 - Total Authority RRs (2)
     62  8c0c							;$34 - Total Additional RRs (2)
     63  8c0c							;$36 - Questions (Variable Length)
     64  8c0c							;$?? - Answer RRs (Variable Length)
     65  8c0c							;$?? - Authority RRs (Variable Length)
     66  8c0c							;$?? - Additional RRs (Variable Length)
     67  8c0c
     68  8c0c		       00 00	   DNS_STATUS_IDLE =	$00
     69  8c0c		       00 01	   DNS_STATUS_QUERY =	$01
     70  8c0c
     71  8c0c		       01 00	   DNS_FLAGS_QUERY =	$0100
     72  8c0c
     73  8c0c		       0c 57	   DNS_SOURCE_PORT =	3159
     74  8c0c
     75  8c0c		       00 01	   DNS_TYPE_HOST =	$0001
     76  8c0c		       00 01	   DNS_CLASS_INET =	$0001
     77  8c0c
     78  8c0c		       00	   DNS_STATUS dc.b	#DNS_STATUS_IDLE
     79  8c0d
     80  8c0d				   DNS_HEADER
     81  8c0d		       00 00	   DNS_IDENT  dc.b	$00,$00	;Transaction ID
     82  8c0f		       01 00	   DNS_FLAGS  dc.b	$01,$00
     83  8c11
     84  8c11		       00 01	   DNS_QUESTIONS dc.b	$00,$01
     85  8c13		       00 00	   DNS_ANSRR  dc.b	$00,$00
     86  8c15		       00 00	   DNS_AUTHRR dc.b	$00,$00
     87  8c17		       00 00	   DNS_ADDITION dc.b	$00,$00
     88  8c19
     89  8c19		       00 00 00 00*DNS_NAMBUF dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     90  8c21		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     91  8c29		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     92  8c31		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     93  8c39		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     94  8c41		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     95  8c49		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     96  8c51		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     97  8c59		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     98  8c61		       00 00 00 00*	      dc.b	$00,$00,$00,$00,$00,$00,$00,$00
     99  8c69
    100  8c69		       00 01	   DNS_QUERY_TYPE dc.b	$00,$01
    101  8c6b		       00 01	   DNS_CLASS  dc.b	$00,$01
    102  8c6d
    103  8c6d		       00	   DNS_NAMLEN dc.b	$00	;should include trailing null
    104  8c6e
    105  8c6e		       00 00	   DNS_ANSADDR dc.b	$00,$00	;holder for answer offset, calced at query time
    106  8c70							;(INPACKET+$36)+DNS_NAMLEN+$04
    107  8c70
    108  8c70		       00 00 00 00 DNS_RESIP  dc.b	0,0,0,0	;holder for resolved IP
    109  8c74
    110  8c74				   DNS_PROCESS		;process incoming DNS packet
    111  8c74							;IPRINT "processing dns packet"
    112  8c74							;Check Transaction ID
    113  8c74		       ad 86 8e 	      lda	INPACKET+$2a
    114  8c77		       cd 0d 8c 	      cmp	DNS_IDENT
    115  8c7a		       d0 3f		      bne	DNP_0
    116  8c7c		       ad 87 8e 	      lda	INPACKET+$2b
    117  8c7f		       cd 0e 8c 	      cmp	DNS_IDENT+1
    118  8c82		       d0 37		      bne	DNP_0
    119  8c84							;This is the one we were waiting for
    120  8c84							;calculate Answer base
    121  8c84							;INPACKET+$3a+NAMELEN+$0d ($47+NAMELEN)
    122  8c84		       a9 a3		      lda	#<(INPACKET+$47)
    123  8c86		       8d 6e 8c 	      sta	DNS_ANSADDR
    124  8c89		       a9 8e		      lda	#>(INPACKET+$47)
    125  8c8b		       8d 6f 8c 	      sta	DNS_ANSADDR+1
    126  8c8e		       ad 6d 8c 	      lda	DNS_NAMLEN
    127  8c91		       18		      clc
    128  8c92		       6d 6e 8c 	      adc	DNS_ANSADDR
    129  8c95		       8d 6e 8c 	      sta	DNS_ANSADDR
    130  8c98		       90 03		      bcc	DNP_1
    131  8c9a		       ee 6f 8c 	      inc	DNS_ANSADDR+1
    132  8c9d				   DNP_1
    133  8c9d							;IP is at (DNS_ANSADDR)
    134  8c9d		       ad 6e 8c 	      lda	DNS_ANSADDR
    135  8ca0		       8d ac 8c 	      sta	DNP_L+1
    136  8ca3		       ad 6f 8c 	      lda	DNS_ANSADDR+1
    137  8ca6		       8d ad 8c 	      sta	DNP_L+2
    138  8ca9
    139  8ca9		       a2 00		      ldx	#$00
    140  8cab		       bd ff ff    DNP_L      lda	$ffff,x
    141  8cae		       9d 70 8c 	      sta	DNS_RESIP,x
    142  8cb1		       e8		      inx
    143  8cb2		       e0 04		      cpx	#$04
    144  8cb4		       d0 f5		      bne	DNP_L
    145  8cb6		       a9 00		      lda	#DNS_STATUS_IDLE
    146  8cb8		       8d 0c 8c 	      sta	DNS_STATUS
    147  8cbb				   DNP_0
    148  8cbb		       60		      rts
    149  8cbc
    150  8cbc							;Before DNS_SEND
    151  8cbc							;Set Transaction Ident
    152  8cbc							;Set Flags
    153  8cbc							;Set Num of Questions
    154  8cbc
    155  8cbc				   DNS_REQUEST
    156  8cbc		       a9 01		      lda	#DNS_STATUS_QUERY
    157  8cbe		       8d 0c 8c 	      sta	DNS_STATUS
    158  8cc1							;generate IDENT
    159  8cc1		       ad 08 dc 	      lda	$dc08
    160  8cc4		       8d 0d 8c 	      sta	DNS_IDENT
    161  8cc7		       ad 09 dc 	      lda	$dc09
    162  8cca		       8d 0e 8c 	      sta	DNS_IDENT+1
    163  8ccd
    164  8ccd							;Set UDP Source Port
    165  8ccd		       a2 0c		      ldx	#>DNS_SOURCE_PORT
    166  8ccf		       a9 57		      lda	#<DNS_SOURCE_PORT
    167  8cd1		       20 18 84 	      jsr	UDP_SET_SRC_PORT
    168  8cd4
    169  8cd4							;Set UDP Dest Port
    170  8cd4		       a2 00		      ldx	#$00
    171  8cd6		       a9 35		      lda	#53
    172  8cd8		       20 1f 84 	      jsr	UDP_SET_DEST_PORT
    173  8cdb
    174  8cdb							;set UDP Data length to $10 + DNS_NAMLEN
    175  8cdb		       a2 00		      ldx	#$00
    176  8cdd		       ad 6d 8c 	      lda	DNS_NAMLEN
    177  8ce0		       18		      clc
    178  8ce1		       69 11		      adc	#$11	;0
    179  8ce3		       90 01		      bcc	DNR_4
    180  8ce5		       e8		      inx
    181  8ce6				   DNR_4
    182  8ce6		       20 3a 84 	      jsr	UDP_SET_DATALEN
    183  8ce9
    184  8ce9							;COpy Data
    185  8ce9		       a2 00		      ldx	#$00
    186  8ceb				   DNR_5
    187  8ceb		       bd 0d 8c 	      lda	DNS_HEADER,x
    188  8cee		       9d 8c 80 	      sta	UDP_DATA,x
    189  8cf1		       e8		      inx
    190  8cf2		       e0 0c		      cpx	#$0c
    191  8cf4		       d0 f5		      bne	DNR_5
    192  8cf6
    193  8cf6							;Copy Name into UDP_DATA
    194  8cf6		       a0 00		      ldy	#$00
    195  8cf8				   DNR_0
    196  8cf8		       b9 19 8c 	      lda	DNS_NAMBUF,y
    197  8cfb		       99 98 80 	      sta	UDP_DATA+$0c,y
    198  8cfe		       c8		      iny
    199  8cff		       cc 6d 8c 	      cpy	DNS_NAMLEN
    200  8d02		       d0 f4		      bne	DNR_0
    201  8d04				   DNR_C
    202  8d04							;Insert Query Type and Class
    203  8d04		       c8		      iny
    204  8d05		       a2 00		      ldx	#$00
    205  8d07				   DNR_D
    206  8d07		       bd 69 8c 	      lda	DNS_QUERY_TYPE,x
    207  8d0a		       99 98 80 	      sta	UDP_DATA+$0c,y
    208  8d0d		       e8		      inx
    209  8d0e		       c8		      iny
    210  8d0f		       e0 04		      cpx	#$04
    211  8d11		       d0 f4		      bne	DNR_D
    212  8d13
    213  8d13							;set dest ip
    214  8d13		       a9 8d		      lda	#<CARD_NS1
    215  8d15		       a2 6a		      ldx	#>CARD_NS1
    216  8d17		       20 26 84 	      jsr	UDP_SET_DEST_IP
    217  8d1a
    218  8d1a							;Before UDP_SEND
    219  8d1a							;Set Source Port  check
    220  8d1a							;Set Dest Port    check
    221  8d1a							;Set Data Len	   check
    222  8d1a							;Copy Data  check
    223  8d1a							;Set Dest IP check
    224  8d1a
    225  8d1a		       a9 00		      lda	#$00
    226  8d1c		       8d 77 80 	      sta	UDP_BCAST
    227  8d1f		       20 c7 83 	      jsr	UDP_SEND
    228  8d22		       60		      rts
    229  8d23
    230  8d23		       00	   DNS_PTR    dc.b	$00
    231  8d24
    232  8d24				   DNS_SETNAME		;Expectx x:a to point to a nts, returns len (including null) in y
    233  8d24							;processes domain name to acceptable format (len)string(len)string, etc...
    234  8d24
    235  8d24		       85 5f		      sta	DNS_TMP
    236  8d26		       86 60		      stx	DNS_TMP+1
    237  8d28		       a0 00		      ldy	#$00
    238  8d2a		       a2 00		      ldx	#$00
    239  8d2c		       8c 23 8d 	      sty	DNS_PTR	;initial prevloc is $00
    240  8d2f				   DNS_SN0
    241  8d2f		       b1 5f		      lda	(DNS_TMP),y
    242  8d31		       f0 1f		      beq	DNS_SN1	;Is it a $00?
    243  8d33		       c9 2e		      cmp	#$2e	;is it a dot?
    244  8d35		       d0 10		      bne	DNS_SN3
    245  8d37							;store char count in previous location
    246  8d37		       8a		      txa
    247  8d38		       ae 23 8d 	      ldx	DNS_PTR
    248  8d3b		       9d 19 8c 	      sta	DNS_NAMBUF,x
    249  8d3e							;set location to current
    250  8d3e		       98		      tya
    251  8d3f		       18		      clc
    252  8d40		       69 01		      adc	#$01
    253  8d42		       8d 23 8d 	      sta	DNS_PTR
    254  8d45							;start char count back at -1 (to account for the current char)
    255  8d45		       a2 ff		      ldx	#$ff
    256  8d47				   DNS_SN3
    257  8d47		       99 1a 8c 	      sta	DNS_NAMBUF+1,y
    258  8d4a		       e8		      inx		;inc char count
    259  8d4b		       c8		      iny
    260  8d4c		       c0 f0		      cpy	#$f0	;max out at $f0
    261  8d4e		       d0 df		      bne	DNS_SN0
    262  8d50		       a9 00		      lda	#$00
    263  8d52				   DNS_SN1
    264  8d52							;store final null byte
    265  8d52		       99 1a 8c 	      sta	DNS_NAMBUF+1,y
    266  8d55		       c8		      iny
    267  8d56
    268  8d56							;store final length
    269  8d56		       8c 6d 8c 	      sty	DNS_NAMLEN
    270  8d59				   DNS_SN2
    271  8d59							;stash final strlen
    272  8d59		       8a		      txa
    273  8d5a		       ae 23 8d 	      ldx	DNS_PTR
    274  8d5d		       9d 19 8c 	      sta	DNS_NAMBUF,x
    275  8d60		       60		      rts
    276  8d61
    277  8d61
    278  8d61				   DNS_RESOLVER
      0  8d61					      PRINT	CRLF,"resolve:"
      1  8d61		       20 60 63 	      jsr	prns
      2  8d64		       0d 72 65 73*	      dc.b	CRLF,"resolve:",0
    280  8d6e							; (LB)
    281  8d6e							;	INPUT SEND_DOMAIN,80
    282  8d6e							;	PRINT CRLF,"resolving..."
    283  8d6e							;	ldx #>SEND_DOMAIN
    284  8d6e							;	lda #<SEND_DOMAIN
    285  8d6e		       20 24 8d 	      jsr	DNS_SETNAME
    286  8d71		       20 bc 8c 	      jsr	DNS_REQUEST
    287  8d74		       ad 0c 8c    DNRE_0     lda	DNS_STATUS
    288  8d77		       d0 fb		      bne	DNRE_0
      0  8d79					      PRINT	CRLF
      1  8d79		       20 60 63 	      jsr	prns
      2  8d7c		       0d 00		      dc.b	CRLF,0
    290  8d7e		       a2 8c		      ldx	#>DNS_RESIP
    291  8d80		       a9 70		      lda	#<DNS_RESIP
    292  8d82		       20 39 65 	      jsr	printip
    293  8d85		       20 38 63 	      jsr	getanykey
    294  8d88		       60		      rts
------- FILE SIXNET.ASM
------- FILE PING.ASM LEVEL 3 PASS 2
      0  8d89					      include	"PING.ASM"
      1  8d89							;Source by Six of Style (Oliver VieBrooks)
      2  8d89							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  8d89							;
      4  8d89							;Last Updated 1/26/2006
      5  8d89							;
      6  8d89							;PING PROTOCOL================================================================
      7  8d89							;							 _,.-------.,_
      8  8d89							;ICMP PACKET FORMAT:				     ,;~'	      '~;,
      9  8d89							;+----------+---------+-----------+		   ,;			  ;,
     10  8d89							;|$00-$0d   |$0e-$21  |$22-$24    |		  ;			    ;
     11  8d89							;+----------+---------+-----------+		 ,'	   Style 2006	    ',
     12  8d89							;|MAC Header|IP Header|ICMP Header|		,;			     ;,
     13  8d89							;+----------+---------+-----------+		; ;	 .	     .	    ; ;
     14  8d89							;|$26-$2a   |$2b->    |			| ;   ______	   ______   ; |
     15  8d89							;+----------+---------+			|  `/~"     ~" . "~	"~\'  |
     16  8d89							;|PING Hdr  |PING Data|			|  ~  ,-~~~^~, | ,~^~~~-,  ~  |
     17  8d89							;+----------+---------+			 |   |	      }:{	 |   |
     18  8d89							;						 |   !	     / | \	 !   |
     19  8d89							;						 .~  (__,.--" .^. "--.,__)  ~.
     20  8d89							;IP Header Fields:				 |     ---;' / | \ `;---     |
     21  8d89							;$0e - IP Version				  \__.	     \/^\/	 .__/
     22  8d89							;$0f - Type of Service 			   V| \ 		/ |V
     23  8d89							;$10 - Total Length of packet			    | |T~\___!___!___/~T| |
     24  8d89							;$12 - Identifier				    | |`IIII_I_I_I_IIII'| |
     25  8d89							;$14 - Flags					    |  \,III I I I III,/  |
     26  8d89							;$15 - Fragment				     \	 `~~~~~~~~~~'	 /
     27  8d89							;$16 - Time To Live				       \   .	   .   /
     28  8d89							;$17 - Protocol					 \.    ^    ./
     29  8d89							;$18 - Checksum					   ^~~~^~~~^
     30  8d89							;$1a - Source IP Address
     31  8d89							;$1e - Destination IP Address
     32  8d89							;
     33  8d89							;ICMP Fields:
     34  8d89							;$22 - Type
     35  8d89							;$23 - Code
     36  8d89							;$24 - Checksum
     37  8d89							;$26 - Data
     38  8d89							;
     39  8d89							;PING Fields:
     40  8d89							;$27 - Identifier
     41  8d89							;$29 - Sequence Number
     42  8d89							;$2b-> - Ping payload
     43  8d89
     44  8d89		       00 00	   PING_STATE_IDLE =	$00	;doing nothing
     45  8d89		       00 01	   PING_STATE_REQ =	$01	;waiting for pong
     46  8d89		       00 02	   PING_STATE_REPLY =	$02	;replying to ping
     47  8d89		       00 03	   PING_STATE_DNU =	$03	;Destination unreachable (idle)
     48  8d89
     49  8d89		       00	   PING_STATE dc.b	$00
     50  8d8a		       00 00 00 00*PING_MAC   dc.b	$00,$00,$00,$00,$00,$00
     51  8d90		       00 00 00 00 PING_IP    dc.b	$00,$00,$00,$00
     52  8d94
     53  8d94				   PING_HEADER
     54  8d94		       00 00	   PING_IDENT dc.b	$00,$00
     55  8d96		       00 00	   PING_SEQUENCE dc.b	$00,$00
     56  8d98		       73 69 78 6e*PING_DATA  dc.b	"sixnet 1.0 ping payload  http://thedarkside.ath.cx/sixnet c64 c64"
     57  8dd9				   PING_DATAEND
     58  8dd9
     59  8dd9
     60  8dd9		       01	   PING_REPLYTOPING dc.b	$01
     61  8dda		       00	   PING_PONGTICK dc.b	$00
     62  8ddb
     63  8ddb							;Before ICMP_SEND
     64  8ddb							;Set Type
     65  8ddb							;Set Code
     66  8ddb							;Put Data in ICMP_Data and Set Data Length
     67  8ddb							;Set Dest IP
     68  8ddb
     69  8ddb				   PING_PING		; PING (PING_IP,PING_MAC)
     70  8ddb							;set type
     71  8ddb		       a9 08		      lda	#ICMP_T_PING	;ICMP Echo Request
     72  8ddd		       20 14 80 	      jsr	ICMP_SET_TYPE
     73  8de0
     74  8de0							;set code
     75  8de0		       a9 00		      lda	#$00
     76  8de2		       20 18 80 	      jsr	ICMP_SET_CODE
     77  8de5
     78  8de5							;set data Expects data address in x:a, number of bytes in y
     79  8de5		       a2 8d		      ldx	#>PING_HEADER
     80  8de7		       a9 94		      lda	#<PING_HEADER
     81  8de9		       a0 45		      ldy	#(PING_DATAEND-PING_HEADER)
     82  8deb		       20 1c 80 	      jsr	ICMP_COPY_DATA
     83  8dee
     84  8dee							;set dest IP
     85  8dee		       a9 90		      lda	#<PING_IP
     86  8df0		       a2 8d		      ldx	#>PING_IP
     87  8df2		       20 36 80 	      jsr	ICMP_SET_DEST_IP
     88  8df5
     89  8df5		       a9 01		      lda	#PING_STATE_REQ
     90  8df7		       8d 89 8d 	      sta	PING_STATE
     91  8dfa		       20 db 7f 	      jsr	ICMP_SEND
     92  8dfd
     93  8dfd		       ee 94 8d 	      inc	PING_IDENT
     94  8e00		       d0 03		      bne	PING_PING_x
     95  8e02		       ee 95 8d 	      inc	PING_IDENT+1
     96  8e05				   PING_PING_x
     97  8e05		       60		      rts
     98  8e06
     99  8e06				   PING_PONG		; PONG (PING_IP)
    100  8e06							;set type
    101  8e06		       a9 00		      lda	#ICMP_T_PONG	;ICMP Reply
    102  8e08		       20 14 80 	      jsr	ICMP_SET_TYPE
    103  8e0b
    104  8e0b							;set code
    105  8e0b		       a9 00		      lda	#$00
    106  8e0d		       20 18 80 	      jsr	ICMP_SET_CODE
    107  8e10
    108  8e10							;set dest IP
    109  8e10		       a9 76		      lda	#<(INPACKET+$1a)
    110  8e12		       a2 8e		      ldx	#>(INPACKET+$1a)
    111  8e14		       20 36 80 	      jsr	ICMP_SET_DEST_IP
    112  8e17
    113  8e17							;Get length of ICMP Data by subtracting header size from INPACKET_LENGTH
    114  8e17		       ad 52 8e 	      lda	IN_PACKET_LENGTH
    115  8e1a		       8d e3 63 	      sta	as0
    116  8e1d		       ad 53 8e 	      lda	IN_PACKET_LENGTH+$01
    117  8e20		       8d e4 63 	      sta	as0+$01
    118  8e23		       a9 26		      lda	#$26	;length of MAC+IP+ICMP headers
    119  8e25		       8d e5 63 	      sta	as1
    120  8e28		       a9 00		      lda	#$00
    121  8e2a		       8d e6 63 	      sta	as1+$01
    122  8e2d		       20 fa 63 	      jsr	sub16
    123  8e30		       a8		      tay		;screw stuff over 255 bytes
    124  8e31
    125  8e31							;Copy ICMP Data from incoming packet to outgoing packet
    126  8e31		       a9 82		      lda	#<(INPACKET+$26)
    127  8e33		       a2 8e		      ldx	#>(INPACKET+$26)
    128  8e35		       20 1c 80 	      jsr	ICMP_COPY_DATA
    129  8e38
    130  8e38		       20 db 7f 	      jsr	ICMP_SEND
    131  8e3b		       60		      rts
    132  8e3c
    133  8e3c				   PING_DNU
    134  8e3c		       a9 03		      lda	#PING_STATE_DNU
    135  8e3e		       8d 89 8d 	      sta	PING_STATE
    136  8e41		       60		      rts
    137  8e42
    138  8e42				   PING_PONGED		; process incoming pong
    139  8e42							;are we waiting for a pong?
    140  8e42							;Is this from the IP we pinged?
    141  8e42							;	jsr prns
    142  8e42							;	dc.b "PONG",13,0
    143  8e42		       a9 00		      lda	#PING_STATE_IDLE
    144  8e44		       8d 89 8d 	      sta	PING_STATE
    145  8e47		       60		      rts
    146  8e48
    147  8e48				   PING_PINGED		; Process incoming ping
    148  8e48							;is this ping for our IP?
    149  8e48							;	jsr prns
    150  8e48							;	dc.b "PINGED",13,0
    151  8e48		       ad d9 8d 	      lda	PING_REPLYTOPING
    152  8e4b		       f0 03		      beq	pipid0
    153  8e4d		       20 06 8e 	      jsr	PING_PONG
    154  8e50				   pipid0
    155  8e50		       60		      rts
    156  8e51
------- FILE SIXNET.ASM
    133  8e51
------- FILE PACKET.ASM LEVEL 3 PASS 2
      0  8e51					      include	"PACKET.ASM"	;(LB) - moved
      1  8e51							;Source by Six of Style (Oliver VieBrooks)
      2  8e51							;http://style64.org http://thedarkside.ath.cx mailto:six@darklordsofchaos.com
      3  8e51							;
      4  8e51							;Last Updated 8/24/2005
      5  8e51							;
      6  8e51
      7  8e51		       00	   PACKET_LOCAL dc.b	$00	;Used to determine where to send packets (gateway or dest)
      8  8e52		       00 00	   IN_PACKET_LENGTH dc.w	$0000
      9  8e54		       00 00	   OUT_PACKET_LENGTH dc.w	$0000
     10  8e56
     11  8e56		       00 00	   IN_PACKET_STATUS dc.w	$0000
     12  8e58
     13  8e58		       00 00	   TXCOUNT    dc.w	$0000
     14  8e5a
     15  8e5a		       00 00	   RXCOUNT    dc.w	$0000
     16  8e5c
     17  8e5c		       00 00 00 00*INPACKET   ds.b	$0400	; Maximum Packet Size
     18  925c		       00 00 00 00*OUTPACKET  ds.b	$0400
------- FILE SIXNET.ASM
    135  965c
    136  965c							;BUFFER=======================================================================
    137  965c
    138  965c				   BUFSTART
    139  cfff					      org	$cfff
    140  cfff				   BUFFEND
------- FILE racer-main.asm
